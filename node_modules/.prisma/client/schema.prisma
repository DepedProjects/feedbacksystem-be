// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  uid        Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  role       String
  officeName String?
  officeId   Int?
  office     offices? @relation(fields: [officeId], references: [id])
}

model submitters {
  id               Int               @unique @default(autoincrement())
  name             String?
  email            String
  age              age?              @relation(fields: [ageId], references: [id])
  ageId            Int?
  ageBracket       String?
  specAge          Int?
  clientType       clientType?       @relation(fields: [clientTypeId], references: [id])
  clientTypeId     Int?
  sex              String
  serviceFeedbacks serviceFeedback[]
  Logs             logs[]
}

model age {
  id              Int               @unique @default(autoincrement())
  description     String
  Submitters      submitters[]
  ServiceFeedback serviceFeedback[]
}

model serviceFeedback {
  id                     Int                @unique @default(autoincrement())
  startTime              DateTime?          @default(now())
  submitter              submitters         @relation(fields: [submitterId], references: [id])
  submitterId            Int
  submittername          String
  email                  String?
  language               String?
  service                services?          @relation(fields: [serviceId], references: [id])
  serviceDesc            String?
  serviceId              Int
  otherService           String?            @db.Text
  ClientType             clientType?        @relation(fields: [typeId], references: [id])
  typeId                 Int?
  Age                    age?               @relation(fields: [ageBracketId], references: [id])
  sex                    String?
  ageBracketId           Int?
  specificAge            Int?
  serviceKind            serviceKind?       @relation(fields: [serviceKindId], references: [id])
  serviceKindId          Int?
  serviceKindDescription String?
  relatedClientType      String?
  ageBracket             String?
  officeVisited          offices            @relation(fields: [officeId], references: [id])
  officeId               Int
  officeName             String?
  consent                String?
  awareCC                String?
  seeCC                  String?
  useCC                  String?
  overallComment         String?
  averageRating          Float
  responsiveness         Int
  reliability            Int
  accessAndFacilities    Int
  communication          Int
  costs                  Int
  integrity              Int
  assurance              Int
  outcome                Int
  uniqueIdentifier       String
  feedbackQuestions      feedbackQuestion[]
  logs                   logs[]
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
}

model clientType {
  id              Int               @unique @default(autoincrement())
  type            String
  ServiceFeedback serviceFeedback[]
  Submitters      submitters[]
}

model feedbackQuestion {
  id                Int             @unique @default(autoincrement())
  category          categories      @relation(fields: [categoryId], references: [id])
  categoryId        Int
  question          questions       @relation(fields: [questionId], references: [id])
  questionId        Int
  rating            Int
  serviceFeedback   serviceFeedback @relation(fields: [serviceFeedbackId], references: [id])
  serviceFeedbackId Int
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model services {
  id               Int               @unique @default(autoincrement())
  title            String
  office           offices?          @relation(fields: [relatedOfficeId], references: [id])
  relatedOfficeId  Int?
  serviceKind      serviceKind?      @relation(fields: [serviceKindId], references: [id])
  serviceKindId    Int?
  serviceFeedbacks serviceFeedback[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
}

model serviceKind {
  id               Int               @unique @default(autoincrement())
  description      String?
  serviceFeedbacks serviceFeedback[]
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  Services         services[]
}

model logs {
  id                Int             @unique @default(autoincrement())
  user              submitters      @relation(fields: [userId], references: [id])
  userId            Int
  serviceFeedback   serviceFeedback @relation(fields: [serviceFeedbackId], references: [id])
  serviceFeedbackId Int
  created_at        DateTime        @default(now())
}

model categories {
  id               Int                @unique @default(autoincrement())
  title            String
  qualityDimension String
  FeedbackQuestion feedbackQuestion[]
  Questions        questions[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
}

model questions {
  id               Int                @unique @default(autoincrement())
  title            String?            @unique
  description      String?            @db.Text
  category         categories         @relation(fields: [categoryId], references: [id])
  categoryId       Int
  FeedbackQuestion feedbackQuestion[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
}

model offices {
  id              Int               @unique @default(autoincrement())
  title           String
  ServiceFeedback serviceFeedback[]
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Services        services[]
  users           users[]
}
