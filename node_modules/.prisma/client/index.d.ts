
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model Submitters
 * 
 */
export type Submitters = $Result.DefaultSelection<Prisma.$SubmittersPayload>
/**
 * Model Age
 * 
 */
export type Age = $Result.DefaultSelection<Prisma.$AgePayload>
/**
 * Model ServiceFeedback
 * 
 */
export type ServiceFeedback = $Result.DefaultSelection<Prisma.$ServiceFeedbackPayload>
/**
 * Model ClientType
 * 
 */
export type ClientType = $Result.DefaultSelection<Prisma.$ClientTypePayload>
/**
 * Model FeedbackQuestion
 * 
 */
export type FeedbackQuestion = $Result.DefaultSelection<Prisma.$FeedbackQuestionPayload>
/**
 * Model Services
 * 
 */
export type Services = $Result.DefaultSelection<Prisma.$ServicesPayload>
/**
 * Model ServiceKind
 * 
 */
export type ServiceKind = $Result.DefaultSelection<Prisma.$ServiceKindPayload>
/**
 * Model Logs
 * 
 */
export type Logs = $Result.DefaultSelection<Prisma.$LogsPayload>
/**
 * Model Categories
 * 
 */
export type Categories = $Result.DefaultSelection<Prisma.$CategoriesPayload>
/**
 * Model Questions
 * 
 */
export type Questions = $Result.DefaultSelection<Prisma.$QuestionsPayload>
/**
 * Model Offices
 * 
 */
export type Offices = $Result.DefaultSelection<Prisma.$OfficesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.submitters`: Exposes CRUD operations for the **Submitters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submitters
    * const submitters = await prisma.submitters.findMany()
    * ```
    */
  get submitters(): Prisma.SubmittersDelegate<ExtArgs>;

  /**
   * `prisma.age`: Exposes CRUD operations for the **Age** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ages
    * const ages = await prisma.age.findMany()
    * ```
    */
  get age(): Prisma.AgeDelegate<ExtArgs>;

  /**
   * `prisma.serviceFeedback`: Exposes CRUD operations for the **ServiceFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceFeedbacks
    * const serviceFeedbacks = await prisma.serviceFeedback.findMany()
    * ```
    */
  get serviceFeedback(): Prisma.ServiceFeedbackDelegate<ExtArgs>;

  /**
   * `prisma.clientType`: Exposes CRUD operations for the **ClientType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientTypes
    * const clientTypes = await prisma.clientType.findMany()
    * ```
    */
  get clientType(): Prisma.ClientTypeDelegate<ExtArgs>;

  /**
   * `prisma.feedbackQuestion`: Exposes CRUD operations for the **FeedbackQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackQuestions
    * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
    * ```
    */
  get feedbackQuestion(): Prisma.FeedbackQuestionDelegate<ExtArgs>;

  /**
   * `prisma.services`: Exposes CRUD operations for the **Services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.services.findMany()
    * ```
    */
  get services(): Prisma.ServicesDelegate<ExtArgs>;

  /**
   * `prisma.serviceKind`: Exposes CRUD operations for the **ServiceKind** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceKinds
    * const serviceKinds = await prisma.serviceKind.findMany()
    * ```
    */
  get serviceKind(): Prisma.ServiceKindDelegate<ExtArgs>;

  /**
   * `prisma.logs`: Exposes CRUD operations for the **Logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.logs.findMany()
    * ```
    */
  get logs(): Prisma.LogsDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **Categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.CategoriesDelegate<ExtArgs>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **Questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.QuestionsDelegate<ExtArgs>;

  /**
   * `prisma.offices`: Exposes CRUD operations for the **Offices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offices
    * const offices = await prisma.offices.findMany()
    * ```
    */
  get offices(): Prisma.OfficesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    Submitters: 'Submitters',
    Age: 'Age',
    ServiceFeedback: 'ServiceFeedback',
    ClientType: 'ClientType',
    FeedbackQuestion: 'FeedbackQuestion',
    Services: 'Services',
    ServiceKind: 'ServiceKind',
    Logs: 'Logs',
    Categories: 'Categories',
    Questions: 'Questions',
    Offices: 'Offices'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'submitters' | 'age' | 'serviceFeedback' | 'clientType' | 'feedbackQuestion' | 'services' | 'serviceKind' | 'logs' | 'categories' | 'questions' | 'offices'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Submitters: {
        payload: Prisma.$SubmittersPayload<ExtArgs>
        fields: Prisma.SubmittersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmittersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmittersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          findFirst: {
            args: Prisma.SubmittersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmittersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          findMany: {
            args: Prisma.SubmittersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>[]
          }
          create: {
            args: Prisma.SubmittersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          createMany: {
            args: Prisma.SubmittersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubmittersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          update: {
            args: Prisma.SubmittersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          deleteMany: {
            args: Prisma.SubmittersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubmittersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubmittersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmittersPayload>
          }
          aggregate: {
            args: Prisma.SubmittersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubmitters>
          }
          groupBy: {
            args: Prisma.SubmittersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubmittersGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmittersCountArgs<ExtArgs>,
            result: $Utils.Optional<SubmittersCountAggregateOutputType> | number
          }
        }
      }
      Age: {
        payload: Prisma.$AgePayload<ExtArgs>
        fields: Prisma.AgeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AgeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AgeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          findFirst: {
            args: Prisma.AgeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AgeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          findMany: {
            args: Prisma.AgeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>[]
          }
          create: {
            args: Prisma.AgeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          createMany: {
            args: Prisma.AgeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AgeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          update: {
            args: Prisma.AgeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          deleteMany: {
            args: Prisma.AgeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AgeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AgeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AgePayload>
          }
          aggregate: {
            args: Prisma.AgeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAge>
          }
          groupBy: {
            args: Prisma.AgeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.AgeCountArgs<ExtArgs>,
            result: $Utils.Optional<AgeCountAggregateOutputType> | number
          }
        }
      }
      ServiceFeedback: {
        payload: Prisma.$ServiceFeedbackPayload<ExtArgs>
        fields: Prisma.ServiceFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFeedbackFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFeedbackFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          findFirst: {
            args: Prisma.ServiceFeedbackFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFeedbackFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          findMany: {
            args: Prisma.ServiceFeedbackFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>[]
          }
          create: {
            args: Prisma.ServiceFeedbackCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          createMany: {
            args: Prisma.ServiceFeedbackCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceFeedbackDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          update: {
            args: Prisma.ServiceFeedbackUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.ServiceFeedbackDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceFeedbackUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceFeedbackUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceFeedbackPayload>
          }
          aggregate: {
            args: Prisma.ServiceFeedbackAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceFeedback>
          }
          groupBy: {
            args: Prisma.ServiceFeedbackGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceFeedbackCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceFeedbackCountAggregateOutputType> | number
          }
        }
      }
      ClientType: {
        payload: Prisma.$ClientTypePayload<ExtArgs>
        fields: Prisma.ClientTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClientTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClientTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          findFirst: {
            args: Prisma.ClientTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClientTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          findMany: {
            args: Prisma.ClientTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>[]
          }
          create: {
            args: Prisma.ClientTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          createMany: {
            args: Prisma.ClientTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClientTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          update: {
            args: Prisma.ClientTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          deleteMany: {
            args: Prisma.ClientTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClientTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClientTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClientTypePayload>
          }
          aggregate: {
            args: Prisma.ClientTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientType>
          }
          groupBy: {
            args: Prisma.ClientTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClientTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientTypeCountAggregateOutputType> | number
          }
        }
      }
      FeedbackQuestion: {
        payload: Prisma.$FeedbackQuestionPayload<ExtArgs>
        fields: Prisma.FeedbackQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackQuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          findFirst: {
            args: Prisma.FeedbackQuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackQuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          findMany: {
            args: Prisma.FeedbackQuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>[]
          }
          create: {
            args: Prisma.FeedbackQuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          createMany: {
            args: Prisma.FeedbackQuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeedbackQuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          update: {
            args: Prisma.FeedbackQuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackQuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackQuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackQuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackQuestionPayload>
          }
          aggregate: {
            args: Prisma.FeedbackQuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedbackQuestion>
          }
          groupBy: {
            args: Prisma.FeedbackQuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackQuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackQuestionCountAggregateOutputType> | number
          }
        }
      }
      Services: {
        payload: Prisma.$ServicesPayload<ExtArgs>
        fields: Prisma.ServicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          findFirst: {
            args: Prisma.ServicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          findMany: {
            args: Prisma.ServicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>[]
          }
          create: {
            args: Prisma.ServicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          createMany: {
            args: Prisma.ServicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          update: {
            args: Prisma.ServicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          deleteMany: {
            args: Prisma.ServicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          aggregate: {
            args: Prisma.ServicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServices>
          }
          groupBy: {
            args: Prisma.ServicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicesCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicesCountAggregateOutputType> | number
          }
        }
      }
      ServiceKind: {
        payload: Prisma.$ServiceKindPayload<ExtArgs>
        fields: Prisma.ServiceKindFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceKindFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceKindFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          findFirst: {
            args: Prisma.ServiceKindFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceKindFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          findMany: {
            args: Prisma.ServiceKindFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>[]
          }
          create: {
            args: Prisma.ServiceKindCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          createMany: {
            args: Prisma.ServiceKindCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServiceKindDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          update: {
            args: Prisma.ServiceKindUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          deleteMany: {
            args: Prisma.ServiceKindDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceKindUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServiceKindUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServiceKindPayload>
          }
          aggregate: {
            args: Prisma.ServiceKindAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceKind>
          }
          groupBy: {
            args: Prisma.ServiceKindGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceKindGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceKindCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceKindCountAggregateOutputType> | number
          }
        }
      }
      Logs: {
        payload: Prisma.$LogsPayload<ExtArgs>
        fields: Prisma.LogsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LogsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LogsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          findFirst: {
            args: Prisma.LogsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LogsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          findMany: {
            args: Prisma.LogsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>[]
          }
          create: {
            args: Prisma.LogsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          createMany: {
            args: Prisma.LogsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LogsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          update: {
            args: Prisma.LogsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          deleteMany: {
            args: Prisma.LogsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LogsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LogsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LogsPayload>
          }
          aggregate: {
            args: Prisma.LogsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogs>
          }
          groupBy: {
            args: Prisma.LogsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LogsCountArgs<ExtArgs>,
            result: $Utils.Optional<LogsCountAggregateOutputType> | number
          }
        }
      }
      Categories: {
        payload: Prisma.$CategoriesPayload<ExtArgs>
        fields: Prisma.CategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findFirst: {
            args: Prisma.CategoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          findMany: {
            args: Prisma.CategoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>[]
          }
          create: {
            args: Prisma.CategoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          createMany: {
            args: Prisma.CategoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          update: {
            args: Prisma.CategoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          deleteMany: {
            args: Prisma.CategoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.CategoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      Questions: {
        payload: Prisma.$QuestionsPayload<ExtArgs>
        fields: Prisma.QuestionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          findFirst: {
            args: Prisma.QuestionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          findMany: {
            args: Prisma.QuestionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>[]
          }
          create: {
            args: Prisma.QuestionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          createMany: {
            args: Prisma.QuestionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuestionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          update: {
            args: Prisma.QuestionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          deleteMany: {
            args: Prisma.QuestionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuestionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.QuestionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionsCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      Offices: {
        payload: Prisma.$OfficesPayload<ExtArgs>
        fields: Prisma.OfficesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OfficesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OfficesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          findFirst: {
            args: Prisma.OfficesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OfficesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          findMany: {
            args: Prisma.OfficesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>[]
          }
          create: {
            args: Prisma.OfficesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          createMany: {
            args: Prisma.OfficesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OfficesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          update: {
            args: Prisma.OfficesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          deleteMany: {
            args: Prisma.OfficesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OfficesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OfficesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OfficesPayload>
          }
          aggregate: {
            args: Prisma.OfficesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOffices>
          }
          groupBy: {
            args: Prisma.OfficesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OfficesGroupByOutputType>[]
          }
          count: {
            args: Prisma.OfficesCountArgs<ExtArgs>,
            result: $Utils.Optional<OfficesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SubmittersCountOutputType
   */

  export type SubmittersCountOutputType = {
    serviceFeedbacks: number
    Logs: number
  }

  export type SubmittersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | SubmittersCountOutputTypeCountServiceFeedbacksArgs
    Logs?: boolean | SubmittersCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes

  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmittersCountOutputType
     */
    select?: SubmittersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }


  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogsWhereInput
  }



  /**
   * Count Type AgeCountOutputType
   */

  export type AgeCountOutputType = {
    Submitters: number
    ServiceFeedback: number
  }

  export type AgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Submitters?: boolean | AgeCountOutputTypeCountSubmittersArgs
    ServiceFeedback?: boolean | AgeCountOutputTypeCountServiceFeedbackArgs
  }

  // Custom InputTypes

  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeCountOutputType
     */
    select?: AgeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeCountSubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmittersWhereInput
  }


  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }



  /**
   * Count Type ServiceFeedbackCountOutputType
   */

  export type ServiceFeedbackCountOutputType = {
    feedbackQuestions: number
    logs: number
  }

  export type ServiceFeedbackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbackQuestions?: boolean | ServiceFeedbackCountOutputTypeCountFeedbackQuestionsArgs
    logs?: boolean | ServiceFeedbackCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes

  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedbackCountOutputType
     */
    select?: ServiceFeedbackCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeCountFeedbackQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackQuestionWhereInput
  }


  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogsWhereInput
  }



  /**
   * Count Type ClientTypeCountOutputType
   */

  export type ClientTypeCountOutputType = {
    ServiceFeedback: number
    Submitters: number
  }

  export type ClientTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | ClientTypeCountOutputTypeCountServiceFeedbackArgs
    Submitters?: boolean | ClientTypeCountOutputTypeCountSubmittersArgs
  }

  // Custom InputTypes

  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientTypeCountOutputType
     */
    select?: ClientTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }


  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeCountSubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmittersWhereInput
  }



  /**
   * Count Type ServicesCountOutputType
   */

  export type ServicesCountOutputType = {
    serviceFeedbacks: number
  }

  export type ServicesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | ServicesCountOutputTypeCountServiceFeedbacksArgs
  }

  // Custom InputTypes

  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicesCountOutputType
     */
    select?: ServicesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }



  /**
   * Count Type ServiceKindCountOutputType
   */

  export type ServiceKindCountOutputType = {
    serviceFeedbacks: number
    Services: number
  }

  export type ServiceKindCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | ServiceKindCountOutputTypeCountServiceFeedbacksArgs
    Services?: boolean | ServiceKindCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKindCountOutputType
     */
    select?: ServiceKindCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }


  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicesWhereInput
  }



  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    FeedbackQuestion: number
    Questions: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | CategoriesCountOutputTypeCountFeedbackQuestionArgs
    Questions?: boolean | CategoriesCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountFeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackQuestionWhereInput
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionsWhereInput
  }



  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    FeedbackQuestion: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | QuestionsCountOutputTypeCountFeedbackQuestionArgs
  }

  // Custom InputTypes

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountFeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackQuestionWhereInput
  }



  /**
   * Count Type OfficesCountOutputType
   */

  export type OfficesCountOutputType = {
    ServiceFeedback: number
    Services: number
    users: number
  }

  export type OfficesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | OfficesCountOutputTypeCountServiceFeedbackArgs
    Services?: boolean | OfficesCountOutputTypeCountServicesArgs
    users?: boolean | OfficesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficesCountOutputType
     */
    select?: OfficesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicesWhereInput
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    uid: number | null
    officeId: number | null
  }

  export type UsersSumAggregateOutputType = {
    uid: number | null
    officeId: number | null
  }

  export type UsersMinAggregateOutputType = {
    uid: number | null
    username: string | null
    password: string | null
    role: string | null
    officeName: string | null
    officeId: number | null
  }

  export type UsersMaxAggregateOutputType = {
    uid: number | null
    username: string | null
    password: string | null
    role: string | null
    officeName: string | null
    officeId: number | null
  }

  export type UsersCountAggregateOutputType = {
    uid: number
    username: number
    password: number
    role: number
    officeName: number
    officeId: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    uid?: true
    officeId?: true
  }

  export type UsersSumAggregateInputType = {
    uid?: true
    officeId?: true
  }

  export type UsersMinAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
  }

  export type UsersMaxAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
  }

  export type UsersCountAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    uid: number
    username: string
    password: string
    role: string
    officeName: string | null
    officeId: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    officeName?: boolean
    officeId?: boolean
    office?: boolean | users$officeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    uid?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    officeName?: boolean
    officeId?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | users$officeArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      office: Prisma.$OfficesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      uid: number
      username: string
      password: string
      role: string
      officeName: string | null
      officeId: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const usersWithUidOnly = await prisma.users.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    office<T extends users$officeArgs<ExtArgs> = {}>(args?: Subset<T, users$officeArgs<ExtArgs>>): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly uid: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
    readonly officeName: FieldRef<"users", 'String'>
    readonly officeId: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.office
   */
  export type users$officeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    where?: OfficesWhereInput
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model Submitters
   */

  export type AggregateSubmitters = {
    _count: SubmittersCountAggregateOutputType | null
    _avg: SubmittersAvgAggregateOutputType | null
    _sum: SubmittersSumAggregateOutputType | null
    _min: SubmittersMinAggregateOutputType | null
    _max: SubmittersMaxAggregateOutputType | null
  }

  export type SubmittersAvgAggregateOutputType = {
    id: number | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
  }

  export type SubmittersSumAggregateOutputType = {
    id: number | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
  }

  export type SubmittersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
    sex: string | null
  }

  export type SubmittersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
    sex: string | null
  }

  export type SubmittersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    ageId: number
    specAge: number
    clientTypeId: number
    sex: number
    _all: number
  }


  export type SubmittersAvgAggregateInputType = {
    id?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
  }

  export type SubmittersSumAggregateInputType = {
    id?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
  }

  export type SubmittersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
  }

  export type SubmittersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
  }

  export type SubmittersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
    _all?: true
  }

  export type SubmittersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submitters to aggregate.
     */
    where?: SubmittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submitters to fetch.
     */
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submitters
    **/
    _count?: true | SubmittersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmittersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmittersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmittersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmittersMaxAggregateInputType
  }

  export type GetSubmittersAggregateType<T extends SubmittersAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmitters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmitters[P]>
      : GetScalarType<T[P], AggregateSubmitters[P]>
  }




  export type SubmittersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmittersWhereInput
    orderBy?: SubmittersOrderByWithAggregationInput | SubmittersOrderByWithAggregationInput[]
    by: SubmittersScalarFieldEnum[] | SubmittersScalarFieldEnum
    having?: SubmittersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmittersCountAggregateInputType | true
    _avg?: SubmittersAvgAggregateInputType
    _sum?: SubmittersSumAggregateInputType
    _min?: SubmittersMinAggregateInputType
    _max?: SubmittersMaxAggregateInputType
  }

  export type SubmittersGroupByOutputType = {
    id: number
    name: string | null
    email: string
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
    sex: string
    _count: SubmittersCountAggregateOutputType | null
    _avg: SubmittersAvgAggregateOutputType | null
    _sum: SubmittersSumAggregateOutputType | null
    _min: SubmittersMinAggregateOutputType | null
    _max: SubmittersMaxAggregateOutputType | null
  }

  type GetSubmittersGroupByPayload<T extends SubmittersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmittersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmittersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmittersGroupByOutputType[P]>
            : GetScalarType<T[P], SubmittersGroupByOutputType[P]>
        }
      >
    >


  export type SubmittersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    ageId?: boolean
    specAge?: boolean
    clientTypeId?: boolean
    sex?: boolean
    age?: boolean | Submitters$ageArgs<ExtArgs>
    clientType?: boolean | Submitters$clientTypeArgs<ExtArgs>
    serviceFeedbacks?: boolean | Submitters$serviceFeedbacksArgs<ExtArgs>
    Logs?: boolean | Submitters$LogsArgs<ExtArgs>
    _count?: boolean | SubmittersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submitters"]>

  export type SubmittersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    ageId?: boolean
    specAge?: boolean
    clientTypeId?: boolean
    sex?: boolean
  }

  export type SubmittersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    age?: boolean | Submitters$ageArgs<ExtArgs>
    clientType?: boolean | Submitters$clientTypeArgs<ExtArgs>
    serviceFeedbacks?: boolean | Submitters$serviceFeedbacksArgs<ExtArgs>
    Logs?: boolean | Submitters$LogsArgs<ExtArgs>
    _count?: boolean | SubmittersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubmittersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submitters"
    objects: {
      age: Prisma.$AgePayload<ExtArgs> | null
      clientType: Prisma.$ClientTypePayload<ExtArgs> | null
      serviceFeedbacks: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
      Logs: Prisma.$LogsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      email: string
      ageId: number | null
      specAge: number | null
      clientTypeId: number | null
      sex: string
    }, ExtArgs["result"]["submitters"]>
    composites: {}
  }


  type SubmittersGetPayload<S extends boolean | null | undefined | SubmittersDefaultArgs> = $Result.GetResult<Prisma.$SubmittersPayload, S>

  type SubmittersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubmittersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SubmittersCountAggregateInputType | true
    }

  export interface SubmittersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submitters'], meta: { name: 'Submitters' } }
    /**
     * Find zero or one Submitters that matches the filter.
     * @param {SubmittersFindUniqueArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubmittersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersFindUniqueArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Submitters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubmittersFindUniqueOrThrowArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubmittersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Submitters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersFindFirstArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubmittersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersFindFirstArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Submitters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersFindFirstOrThrowArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubmittersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Submitters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submitters
     * const submitters = await prisma.submitters.findMany()
     * 
     * // Get first 10 Submitters
     * const submitters = await prisma.submitters.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submittersWithIdOnly = await prisma.submitters.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubmittersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Submitters.
     * @param {SubmittersCreateArgs} args - Arguments to create a Submitters.
     * @example
     * // Create one Submitters
     * const Submitters = await prisma.submitters.create({
     *   data: {
     *     // ... data to create a Submitters
     *   }
     * })
     * 
    **/
    create<T extends SubmittersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersCreateArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Submitters.
     *     @param {SubmittersCreateManyArgs} args - Arguments to create many Submitters.
     *     @example
     *     // Create many Submitters
     *     const submitters = await prisma.submitters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubmittersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Submitters.
     * @param {SubmittersDeleteArgs} args - Arguments to delete one Submitters.
     * @example
     * // Delete one Submitters
     * const Submitters = await prisma.submitters.delete({
     *   where: {
     *     // ... filter to delete one Submitters
     *   }
     * })
     * 
    **/
    delete<T extends SubmittersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersDeleteArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Submitters.
     * @param {SubmittersUpdateArgs} args - Arguments to update one Submitters.
     * @example
     * // Update one Submitters
     * const submitters = await prisma.submitters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubmittersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersUpdateArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Submitters.
     * @param {SubmittersDeleteManyArgs} args - Arguments to filter Submitters to delete.
     * @example
     * // Delete a few Submitters
     * const { count } = await prisma.submitters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubmittersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmittersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submitters
     * const submitters = await prisma.submitters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubmittersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submitters.
     * @param {SubmittersUpsertArgs} args - Arguments to update or create a Submitters.
     * @example
     * // Update or create a Submitters
     * const submitters = await prisma.submitters.upsert({
     *   create: {
     *     // ... data to create a Submitters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submitters we want to update
     *   }
     * })
    **/
    upsert<T extends SubmittersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubmittersUpsertArgs<ExtArgs>>
    ): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersCountArgs} args - Arguments to filter Submitters to count.
     * @example
     * // Count the number of Submitters
     * const count = await prisma.submitters.count({
     *   where: {
     *     // ... the filter for the Submitters we want to count
     *   }
     * })
    **/
    count<T extends SubmittersCountArgs>(
      args?: Subset<T, SubmittersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmittersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmittersAggregateArgs>(args: Subset<T, SubmittersAggregateArgs>): Prisma.PrismaPromise<GetSubmittersAggregateType<T>>

    /**
     * Group by Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmittersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmittersGroupByArgs['orderBy'] }
        : { orderBy?: SubmittersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmittersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmittersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submitters model
   */
  readonly fields: SubmittersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submitters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmittersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    age<T extends Submitters$ageArgs<ExtArgs> = {}>(args?: Subset<T, Submitters$ageArgs<ExtArgs>>): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    clientType<T extends Submitters$clientTypeArgs<ExtArgs> = {}>(args?: Subset<T, Submitters$clientTypeArgs<ExtArgs>>): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceFeedbacks<T extends Submitters$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Submitters$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Logs<T extends Submitters$LogsArgs<ExtArgs> = {}>(args?: Subset<T, Submitters$LogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Submitters model
   */ 
  interface SubmittersFieldRefs {
    readonly id: FieldRef<"Submitters", 'Int'>
    readonly name: FieldRef<"Submitters", 'String'>
    readonly email: FieldRef<"Submitters", 'String'>
    readonly ageId: FieldRef<"Submitters", 'Int'>
    readonly specAge: FieldRef<"Submitters", 'Int'>
    readonly clientTypeId: FieldRef<"Submitters", 'Int'>
    readonly sex: FieldRef<"Submitters", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Submitters findUnique
   */
  export type SubmittersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter, which Submitters to fetch.
     */
    where: SubmittersWhereUniqueInput
  }


  /**
   * Submitters findUniqueOrThrow
   */
  export type SubmittersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter, which Submitters to fetch.
     */
    where: SubmittersWhereUniqueInput
  }


  /**
   * Submitters findFirst
   */
  export type SubmittersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter, which Submitters to fetch.
     */
    where?: SubmittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submitters to fetch.
     */
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submitters.
     */
    cursor?: SubmittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submitters.
     */
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * Submitters findFirstOrThrow
   */
  export type SubmittersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter, which Submitters to fetch.
     */
    where?: SubmittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submitters to fetch.
     */
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submitters.
     */
    cursor?: SubmittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submitters.
     */
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * Submitters findMany
   */
  export type SubmittersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter, which Submitters to fetch.
     */
    where?: SubmittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submitters to fetch.
     */
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submitters.
     */
    cursor?: SubmittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submitters.
     */
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * Submitters create
   */
  export type SubmittersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * The data needed to create a Submitters.
     */
    data: XOR<SubmittersCreateInput, SubmittersUncheckedCreateInput>
  }


  /**
   * Submitters createMany
   */
  export type SubmittersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submitters.
     */
    data: SubmittersCreateManyInput | SubmittersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Submitters update
   */
  export type SubmittersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * The data needed to update a Submitters.
     */
    data: XOR<SubmittersUpdateInput, SubmittersUncheckedUpdateInput>
    /**
     * Choose, which Submitters to update.
     */
    where: SubmittersWhereUniqueInput
  }


  /**
   * Submitters updateMany
   */
  export type SubmittersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submitters.
     */
    data: XOR<SubmittersUpdateManyMutationInput, SubmittersUncheckedUpdateManyInput>
    /**
     * Filter which Submitters to update
     */
    where?: SubmittersWhereInput
  }


  /**
   * Submitters upsert
   */
  export type SubmittersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * The filter to search for the Submitters to update in case it exists.
     */
    where: SubmittersWhereUniqueInput
    /**
     * In case the Submitters found by the `where` argument doesn't exist, create a new Submitters with this data.
     */
    create: XOR<SubmittersCreateInput, SubmittersUncheckedCreateInput>
    /**
     * In case the Submitters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmittersUpdateInput, SubmittersUncheckedUpdateInput>
  }


  /**
   * Submitters delete
   */
  export type SubmittersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    /**
     * Filter which Submitters to delete.
     */
    where: SubmittersWhereUniqueInput
  }


  /**
   * Submitters deleteMany
   */
  export type SubmittersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submitters to delete
     */
    where?: SubmittersWhereInput
  }


  /**
   * Submitters.age
   */
  export type Submitters$ageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    where?: AgeWhereInput
  }


  /**
   * Submitters.clientType
   */
  export type Submitters$clientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    where?: ClientTypeWhereInput
  }


  /**
   * Submitters.serviceFeedbacks
   */
  export type Submitters$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * Submitters.Logs
   */
  export type Submitters$LogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    where?: LogsWhereInput
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    cursor?: LogsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * Submitters without action
   */
  export type SubmittersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
  }



  /**
   * Model Age
   */

  export type AggregateAge = {
    _count: AgeCountAggregateOutputType | null
    _avg: AgeAvgAggregateOutputType | null
    _sum: AgeSumAggregateOutputType | null
    _min: AgeMinAggregateOutputType | null
    _max: AgeMaxAggregateOutputType | null
  }

  export type AgeAvgAggregateOutputType = {
    id: number | null
  }

  export type AgeSumAggregateOutputType = {
    id: number | null
  }

  export type AgeMinAggregateOutputType = {
    id: number | null
    description: string | null
  }

  export type AgeMaxAggregateOutputType = {
    id: number | null
    description: string | null
  }

  export type AgeCountAggregateOutputType = {
    id: number
    description: number
    _all: number
  }


  export type AgeAvgAggregateInputType = {
    id?: true
  }

  export type AgeSumAggregateInputType = {
    id?: true
  }

  export type AgeMinAggregateInputType = {
    id?: true
    description?: true
  }

  export type AgeMaxAggregateInputType = {
    id?: true
    description?: true
  }

  export type AgeCountAggregateInputType = {
    id?: true
    description?: true
    _all?: true
  }

  export type AgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Age to aggregate.
     */
    where?: AgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ages to fetch.
     */
    orderBy?: AgeOrderByWithRelationInput | AgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ages
    **/
    _count?: true | AgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgeMaxAggregateInputType
  }

  export type GetAgeAggregateType<T extends AgeAggregateArgs> = {
        [P in keyof T & keyof AggregateAge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAge[P]>
      : GetScalarType<T[P], AggregateAge[P]>
  }




  export type AgeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AgeWhereInput
    orderBy?: AgeOrderByWithAggregationInput | AgeOrderByWithAggregationInput[]
    by: AgeScalarFieldEnum[] | AgeScalarFieldEnum
    having?: AgeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgeCountAggregateInputType | true
    _avg?: AgeAvgAggregateInputType
    _sum?: AgeSumAggregateInputType
    _min?: AgeMinAggregateInputType
    _max?: AgeMaxAggregateInputType
  }

  export type AgeGroupByOutputType = {
    id: number
    description: string
    _count: AgeCountAggregateOutputType | null
    _avg: AgeAvgAggregateOutputType | null
    _sum: AgeSumAggregateOutputType | null
    _min: AgeMinAggregateOutputType | null
    _max: AgeMaxAggregateOutputType | null
  }

  type GetAgeGroupByPayload<T extends AgeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgeGroupByOutputType[P]>
            : GetScalarType<T[P], AgeGroupByOutputType[P]>
        }
      >
    >


  export type AgeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    Submitters?: boolean | Age$SubmittersArgs<ExtArgs>
    ServiceFeedback?: boolean | Age$ServiceFeedbackArgs<ExtArgs>
    _count?: boolean | AgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["age"]>

  export type AgeSelectScalar = {
    id?: boolean
    description?: boolean
  }

  export type AgeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Submitters?: boolean | Age$SubmittersArgs<ExtArgs>
    ServiceFeedback?: boolean | Age$ServiceFeedbackArgs<ExtArgs>
    _count?: boolean | AgeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AgePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Age"
    objects: {
      Submitters: Prisma.$SubmittersPayload<ExtArgs>[]
      ServiceFeedback: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
    }, ExtArgs["result"]["age"]>
    composites: {}
  }


  type AgeGetPayload<S extends boolean | null | undefined | AgeDefaultArgs> = $Result.GetResult<Prisma.$AgePayload, S>

  type AgeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AgeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AgeCountAggregateInputType | true
    }

  export interface AgeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Age'], meta: { name: 'Age' } }
    /**
     * Find zero or one Age that matches the filter.
     * @param {AgeFindUniqueArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AgeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AgeFindUniqueArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Age that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AgeFindUniqueOrThrowArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AgeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Age that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeFindFirstArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AgeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeFindFirstArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Age that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeFindFirstOrThrowArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AgeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ages
     * const ages = await prisma.age.findMany()
     * 
     * // Get first 10 Ages
     * const ages = await prisma.age.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ageWithIdOnly = await prisma.age.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AgeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Age.
     * @param {AgeCreateArgs} args - Arguments to create a Age.
     * @example
     * // Create one Age
     * const Age = await prisma.age.create({
     *   data: {
     *     // ... data to create a Age
     *   }
     * })
     * 
    **/
    create<T extends AgeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AgeCreateArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ages.
     *     @param {AgeCreateManyArgs} args - Arguments to create many Ages.
     *     @example
     *     // Create many Ages
     *     const age = await prisma.age.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AgeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Age.
     * @param {AgeDeleteArgs} args - Arguments to delete one Age.
     * @example
     * // Delete one Age
     * const Age = await prisma.age.delete({
     *   where: {
     *     // ... filter to delete one Age
     *   }
     * })
     * 
    **/
    delete<T extends AgeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AgeDeleteArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Age.
     * @param {AgeUpdateArgs} args - Arguments to update one Age.
     * @example
     * // Update one Age
     * const age = await prisma.age.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AgeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AgeUpdateArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ages.
     * @param {AgeDeleteManyArgs} args - Arguments to filter Ages to delete.
     * @example
     * // Delete a few Ages
     * const { count } = await prisma.age.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AgeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AgeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ages
     * const age = await prisma.age.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AgeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AgeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Age.
     * @param {AgeUpsertArgs} args - Arguments to update or create a Age.
     * @example
     * // Update or create a Age
     * const age = await prisma.age.upsert({
     *   create: {
     *     // ... data to create a Age
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Age we want to update
     *   }
     * })
    **/
    upsert<T extends AgeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AgeUpsertArgs<ExtArgs>>
    ): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeCountArgs} args - Arguments to filter Ages to count.
     * @example
     * // Count the number of Ages
     * const count = await prisma.age.count({
     *   where: {
     *     // ... the filter for the Ages we want to count
     *   }
     * })
    **/
    count<T extends AgeCountArgs>(
      args?: Subset<T, AgeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Age.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgeAggregateArgs>(args: Subset<T, AgeAggregateArgs>): Prisma.PrismaPromise<GetAgeAggregateType<T>>

    /**
     * Group by Age.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AgeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AgeGroupByArgs['orderBy'] }
        : { orderBy?: AgeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AgeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Age model
   */
  readonly fields: AgeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Age.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AgeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Submitters<T extends Age$SubmittersArgs<ExtArgs> = {}>(args?: Subset<T, Age$SubmittersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findMany'> | Null>;

    ServiceFeedback<T extends Age$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Age$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Age model
   */ 
  interface AgeFieldRefs {
    readonly id: FieldRef<"Age", 'Int'>
    readonly description: FieldRef<"Age", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Age findUnique
   */
  export type AgeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter, which Age to fetch.
     */
    where: AgeWhereUniqueInput
  }


  /**
   * Age findUniqueOrThrow
   */
  export type AgeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter, which Age to fetch.
     */
    where: AgeWhereUniqueInput
  }


  /**
   * Age findFirst
   */
  export type AgeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter, which Age to fetch.
     */
    where?: AgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ages to fetch.
     */
    orderBy?: AgeOrderByWithRelationInput | AgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ages.
     */
    cursor?: AgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ages.
     */
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * Age findFirstOrThrow
   */
  export type AgeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter, which Age to fetch.
     */
    where?: AgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ages to fetch.
     */
    orderBy?: AgeOrderByWithRelationInput | AgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ages.
     */
    cursor?: AgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ages.
     */
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * Age findMany
   */
  export type AgeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter, which Ages to fetch.
     */
    where?: AgeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ages to fetch.
     */
    orderBy?: AgeOrderByWithRelationInput | AgeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ages.
     */
    cursor?: AgeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ages.
     */
    skip?: number
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * Age create
   */
  export type AgeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * The data needed to create a Age.
     */
    data: XOR<AgeCreateInput, AgeUncheckedCreateInput>
  }


  /**
   * Age createMany
   */
  export type AgeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ages.
     */
    data: AgeCreateManyInput | AgeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Age update
   */
  export type AgeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * The data needed to update a Age.
     */
    data: XOR<AgeUpdateInput, AgeUncheckedUpdateInput>
    /**
     * Choose, which Age to update.
     */
    where: AgeWhereUniqueInput
  }


  /**
   * Age updateMany
   */
  export type AgeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ages.
     */
    data: XOR<AgeUpdateManyMutationInput, AgeUncheckedUpdateManyInput>
    /**
     * Filter which Ages to update
     */
    where?: AgeWhereInput
  }


  /**
   * Age upsert
   */
  export type AgeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * The filter to search for the Age to update in case it exists.
     */
    where: AgeWhereUniqueInput
    /**
     * In case the Age found by the `where` argument doesn't exist, create a new Age with this data.
     */
    create: XOR<AgeCreateInput, AgeUncheckedCreateInput>
    /**
     * In case the Age was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AgeUpdateInput, AgeUncheckedUpdateInput>
  }


  /**
   * Age delete
   */
  export type AgeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    /**
     * Filter which Age to delete.
     */
    where: AgeWhereUniqueInput
  }


  /**
   * Age deleteMany
   */
  export type AgeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ages to delete
     */
    where?: AgeWhereInput
  }


  /**
   * Age.Submitters
   */
  export type Age$SubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    where?: SubmittersWhereInput
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    cursor?: SubmittersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * Age.ServiceFeedback
   */
  export type Age$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * Age without action
   */
  export type AgeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
  }



  /**
   * Model ServiceFeedback
   */

  export type AggregateServiceFeedback = {
    _count: ServiceFeedbackCountAggregateOutputType | null
    _avg: ServiceFeedbackAvgAggregateOutputType | null
    _sum: ServiceFeedbackSumAggregateOutputType | null
    _min: ServiceFeedbackMinAggregateOutputType | null
    _max: ServiceFeedbackMaxAggregateOutputType | null
  }

  export type ServiceFeedbackAvgAggregateOutputType = {
    id: number | null
    submitterId: number | null
    serviceId: number | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    officeId: number | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
  }

  export type ServiceFeedbackSumAggregateOutputType = {
    id: number | null
    submitterId: number | null
    serviceId: number | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    officeId: number | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
  }

  export type ServiceFeedbackMinAggregateOutputType = {
    id: number | null
    startTime: Date | null
    submitterId: number | null
    submittername: string | null
    serviceDesc: string | null
    serviceId: number | null
    otherService: string | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number | null
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
    uniqueIdentifier: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceFeedbackMaxAggregateOutputType = {
    id: number | null
    startTime: Date | null
    submitterId: number | null
    submittername: string | null
    serviceDesc: string | null
    serviceId: number | null
    otherService: string | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number | null
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
    uniqueIdentifier: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceFeedbackCountAggregateOutputType = {
    id: number
    startTime: number
    submitterId: number
    submittername: number
    serviceDesc: number
    serviceId: number
    otherService: number
    typeId: number
    ageBracketId: number
    specificAge: number
    serviceKindId: number
    serviceKindDescription: number
    relatedClientType: number
    ageBracket: number
    officeId: number
    officeName: number
    consent: number
    awareCC: number
    seeCC: number
    useCC: number
    overallComment: number
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServiceFeedbackAvgAggregateInputType = {
    id?: true
    submitterId?: true
    serviceId?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    officeId?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
  }

  export type ServiceFeedbackSumAggregateInputType = {
    id?: true
    submitterId?: true
    serviceId?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    officeId?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
  }

  export type ServiceFeedbackMinAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceFeedbackMaxAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceFeedbackCountAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServiceFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceFeedback to aggregate.
     */
    where?: ServiceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceFeedbacks to fetch.
     */
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceFeedbacks
    **/
    _count?: true | ServiceFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceFeedbackMaxAggregateInputType
  }

  export type GetServiceFeedbackAggregateType<T extends ServiceFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceFeedback[P]>
      : GetScalarType<T[P], AggregateServiceFeedback[P]>
  }




  export type ServiceFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithAggregationInput | ServiceFeedbackOrderByWithAggregationInput[]
    by: ServiceFeedbackScalarFieldEnum[] | ServiceFeedbackScalarFieldEnum
    having?: ServiceFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceFeedbackCountAggregateInputType | true
    _avg?: ServiceFeedbackAvgAggregateInputType
    _sum?: ServiceFeedbackSumAggregateInputType
    _min?: ServiceFeedbackMinAggregateInputType
    _max?: ServiceFeedbackMaxAggregateInputType
  }

  export type ServiceFeedbackGroupByOutputType = {
    id: number
    startTime: Date | null
    submitterId: number
    submittername: string
    serviceDesc: string | null
    serviceId: number
    otherService: string | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at: Date
    updated_at: Date
    _count: ServiceFeedbackCountAggregateOutputType | null
    _avg: ServiceFeedbackAvgAggregateOutputType | null
    _sum: ServiceFeedbackSumAggregateOutputType | null
    _min: ServiceFeedbackMinAggregateOutputType | null
    _max: ServiceFeedbackMaxAggregateOutputType | null
  }

  type GetServiceFeedbackGroupByPayload<T extends ServiceFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type ServiceFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    submitterId?: boolean
    submittername?: boolean
    serviceDesc?: boolean
    serviceId?: boolean
    otherService?: boolean
    typeId?: boolean
    ageBracketId?: boolean
    specificAge?: boolean
    serviceKindId?: boolean
    serviceKindDescription?: boolean
    relatedClientType?: boolean
    ageBracket?: boolean
    officeId?: boolean
    officeName?: boolean
    consent?: boolean
    awareCC?: boolean
    seeCC?: boolean
    useCC?: boolean
    overallComment?: boolean
    averageRating?: boolean
    responsiveness?: boolean
    reliability?: boolean
    accessAndFacilities?: boolean
    communication?: boolean
    costs?: boolean
    integrity?: boolean
    assurance?: boolean
    outcome?: boolean
    uniqueIdentifier?: boolean
    created_at?: boolean
    updated_at?: boolean
    submitter?: boolean | SubmittersDefaultArgs<ExtArgs>
    service?: boolean | ServiceFeedback$serviceArgs<ExtArgs>
    ClientType?: boolean | ServiceFeedback$ClientTypeArgs<ExtArgs>
    Age?: boolean | ServiceFeedback$AgeArgs<ExtArgs>
    serviceKind?: boolean | ServiceFeedback$serviceKindArgs<ExtArgs>
    officeVisited?: boolean | OfficesDefaultArgs<ExtArgs>
    feedbackQuestions?: boolean | ServiceFeedback$feedbackQuestionsArgs<ExtArgs>
    logs?: boolean | ServiceFeedback$logsArgs<ExtArgs>
    _count?: boolean | ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceFeedback"]>

  export type ServiceFeedbackSelectScalar = {
    id?: boolean
    startTime?: boolean
    submitterId?: boolean
    submittername?: boolean
    serviceDesc?: boolean
    serviceId?: boolean
    otherService?: boolean
    typeId?: boolean
    ageBracketId?: boolean
    specificAge?: boolean
    serviceKindId?: boolean
    serviceKindDescription?: boolean
    relatedClientType?: boolean
    ageBracket?: boolean
    officeId?: boolean
    officeName?: boolean
    consent?: boolean
    awareCC?: boolean
    seeCC?: boolean
    useCC?: boolean
    overallComment?: boolean
    averageRating?: boolean
    responsiveness?: boolean
    reliability?: boolean
    accessAndFacilities?: boolean
    communication?: boolean
    costs?: boolean
    integrity?: boolean
    assurance?: boolean
    outcome?: boolean
    uniqueIdentifier?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ServiceFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submitter?: boolean | SubmittersDefaultArgs<ExtArgs>
    service?: boolean | ServiceFeedback$serviceArgs<ExtArgs>
    ClientType?: boolean | ServiceFeedback$ClientTypeArgs<ExtArgs>
    Age?: boolean | ServiceFeedback$AgeArgs<ExtArgs>
    serviceKind?: boolean | ServiceFeedback$serviceKindArgs<ExtArgs>
    officeVisited?: boolean | OfficesDefaultArgs<ExtArgs>
    feedbackQuestions?: boolean | ServiceFeedback$feedbackQuestionsArgs<ExtArgs>
    logs?: boolean | ServiceFeedback$logsArgs<ExtArgs>
    _count?: boolean | ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServiceFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceFeedback"
    objects: {
      submitter: Prisma.$SubmittersPayload<ExtArgs>
      service: Prisma.$ServicesPayload<ExtArgs> | null
      ClientType: Prisma.$ClientTypePayload<ExtArgs> | null
      Age: Prisma.$AgePayload<ExtArgs> | null
      serviceKind: Prisma.$ServiceKindPayload<ExtArgs> | null
      officeVisited: Prisma.$OfficesPayload<ExtArgs>
      feedbackQuestions: Prisma.$FeedbackQuestionPayload<ExtArgs>[]
      logs: Prisma.$LogsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      startTime: Date | null
      submitterId: number
      submittername: string
      serviceDesc: string | null
      serviceId: number
      otherService: string | null
      typeId: number | null
      ageBracketId: number | null
      specificAge: number | null
      serviceKindId: number | null
      serviceKindDescription: string | null
      relatedClientType: string | null
      ageBracket: string | null
      officeId: number
      officeName: string | null
      consent: string | null
      awareCC: string | null
      seeCC: string | null
      useCC: string | null
      overallComment: string | null
      averageRating: number
      responsiveness: number
      reliability: number
      accessAndFacilities: number
      communication: number
      costs: number
      integrity: number
      assurance: number
      outcome: number
      uniqueIdentifier: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["serviceFeedback"]>
    composites: {}
  }


  type ServiceFeedbackGetPayload<S extends boolean | null | undefined | ServiceFeedbackDefaultArgs> = $Result.GetResult<Prisma.$ServiceFeedbackPayload, S>

  type ServiceFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceFeedbackFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServiceFeedbackCountAggregateInputType | true
    }

  export interface ServiceFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceFeedback'], meta: { name: 'ServiceFeedback' } }
    /**
     * Find zero or one ServiceFeedback that matches the filter.
     * @param {ServiceFeedbackFindUniqueArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceFeedbackFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceFeedback that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceFeedbackFindUniqueOrThrowArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceFeedbackFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackFindFirstArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceFeedbackFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackFindFirstOrThrowArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceFeedbackFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceFeedbacks
     * const serviceFeedbacks = await prisma.serviceFeedback.findMany()
     * 
     * // Get first 10 ServiceFeedbacks
     * const serviceFeedbacks = await prisma.serviceFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceFeedbackWithIdOnly = await prisma.serviceFeedback.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceFeedbackFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceFeedback.
     * @param {ServiceFeedbackCreateArgs} args - Arguments to create a ServiceFeedback.
     * @example
     * // Create one ServiceFeedback
     * const ServiceFeedback = await prisma.serviceFeedback.create({
     *   data: {
     *     // ... data to create a ServiceFeedback
     *   }
     * })
     * 
    **/
    create<T extends ServiceFeedbackCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackCreateArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceFeedbacks.
     *     @param {ServiceFeedbackCreateManyArgs} args - Arguments to create many ServiceFeedbacks.
     *     @example
     *     // Create many ServiceFeedbacks
     *     const serviceFeedback = await prisma.serviceFeedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceFeedbackCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceFeedback.
     * @param {ServiceFeedbackDeleteArgs} args - Arguments to delete one ServiceFeedback.
     * @example
     * // Delete one ServiceFeedback
     * const ServiceFeedback = await prisma.serviceFeedback.delete({
     *   where: {
     *     // ... filter to delete one ServiceFeedback
     *   }
     * })
     * 
    **/
    delete<T extends ServiceFeedbackDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackDeleteArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceFeedback.
     * @param {ServiceFeedbackUpdateArgs} args - Arguments to update one ServiceFeedback.
     * @example
     * // Update one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceFeedbackUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackUpdateArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceFeedbacks.
     * @param {ServiceFeedbackDeleteManyArgs} args - Arguments to filter ServiceFeedbacks to delete.
     * @example
     * // Delete a few ServiceFeedbacks
     * const { count } = await prisma.serviceFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceFeedbackDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceFeedbackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceFeedbacks
     * const serviceFeedback = await prisma.serviceFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceFeedbackUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceFeedback.
     * @param {ServiceFeedbackUpsertArgs} args - Arguments to update or create a ServiceFeedback.
     * @example
     * // Update or create a ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.upsert({
     *   create: {
     *     // ... data to create a ServiceFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceFeedback we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceFeedbackUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceFeedbackUpsertArgs<ExtArgs>>
    ): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackCountArgs} args - Arguments to filter ServiceFeedbacks to count.
     * @example
     * // Count the number of ServiceFeedbacks
     * const count = await prisma.serviceFeedback.count({
     *   where: {
     *     // ... the filter for the ServiceFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends ServiceFeedbackCountArgs>(
      args?: Subset<T, ServiceFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceFeedbackAggregateArgs>(args: Subset<T, ServiceFeedbackAggregateArgs>): Prisma.PrismaPromise<GetServiceFeedbackAggregateType<T>>

    /**
     * Group by ServiceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: ServiceFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceFeedback model
   */
  readonly fields: ServiceFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    submitter<T extends SubmittersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmittersDefaultArgs<ExtArgs>>): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    service<T extends ServiceFeedback$serviceArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$serviceArgs<ExtArgs>>): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ClientType<T extends ServiceFeedback$ClientTypeArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$ClientTypeArgs<ExtArgs>>): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Age<T extends ServiceFeedback$AgeArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$AgeArgs<ExtArgs>>): Prisma__AgeClient<$Result.GetResult<Prisma.$AgePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceKind<T extends ServiceFeedback$serviceKindArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$serviceKindArgs<ExtArgs>>): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    officeVisited<T extends OfficesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OfficesDefaultArgs<ExtArgs>>): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    feedbackQuestions<T extends ServiceFeedback$feedbackQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$feedbackQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    logs<T extends ServiceFeedback$logsArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedback$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ServiceFeedback model
   */ 
  interface ServiceFeedbackFieldRefs {
    readonly id: FieldRef<"ServiceFeedback", 'Int'>
    readonly startTime: FieldRef<"ServiceFeedback", 'DateTime'>
    readonly submitterId: FieldRef<"ServiceFeedback", 'Int'>
    readonly submittername: FieldRef<"ServiceFeedback", 'String'>
    readonly serviceDesc: FieldRef<"ServiceFeedback", 'String'>
    readonly serviceId: FieldRef<"ServiceFeedback", 'Int'>
    readonly otherService: FieldRef<"ServiceFeedback", 'String'>
    readonly typeId: FieldRef<"ServiceFeedback", 'Int'>
    readonly ageBracketId: FieldRef<"ServiceFeedback", 'Int'>
    readonly specificAge: FieldRef<"ServiceFeedback", 'Int'>
    readonly serviceKindId: FieldRef<"ServiceFeedback", 'Int'>
    readonly serviceKindDescription: FieldRef<"ServiceFeedback", 'String'>
    readonly relatedClientType: FieldRef<"ServiceFeedback", 'String'>
    readonly ageBracket: FieldRef<"ServiceFeedback", 'String'>
    readonly officeId: FieldRef<"ServiceFeedback", 'Int'>
    readonly officeName: FieldRef<"ServiceFeedback", 'String'>
    readonly consent: FieldRef<"ServiceFeedback", 'String'>
    readonly awareCC: FieldRef<"ServiceFeedback", 'String'>
    readonly seeCC: FieldRef<"ServiceFeedback", 'String'>
    readonly useCC: FieldRef<"ServiceFeedback", 'String'>
    readonly overallComment: FieldRef<"ServiceFeedback", 'String'>
    readonly averageRating: FieldRef<"ServiceFeedback", 'Float'>
    readonly responsiveness: FieldRef<"ServiceFeedback", 'Int'>
    readonly reliability: FieldRef<"ServiceFeedback", 'Int'>
    readonly accessAndFacilities: FieldRef<"ServiceFeedback", 'Int'>
    readonly communication: FieldRef<"ServiceFeedback", 'Int'>
    readonly costs: FieldRef<"ServiceFeedback", 'Int'>
    readonly integrity: FieldRef<"ServiceFeedback", 'Int'>
    readonly assurance: FieldRef<"ServiceFeedback", 'Int'>
    readonly outcome: FieldRef<"ServiceFeedback", 'Int'>
    readonly uniqueIdentifier: FieldRef<"ServiceFeedback", 'String'>
    readonly created_at: FieldRef<"ServiceFeedback", 'DateTime'>
    readonly updated_at: FieldRef<"ServiceFeedback", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ServiceFeedback findUnique
   */
  export type ServiceFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ServiceFeedback to fetch.
     */
    where: ServiceFeedbackWhereUniqueInput
  }


  /**
   * ServiceFeedback findUniqueOrThrow
   */
  export type ServiceFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ServiceFeedback to fetch.
     */
    where: ServiceFeedbackWhereUniqueInput
  }


  /**
   * ServiceFeedback findFirst
   */
  export type ServiceFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ServiceFeedback to fetch.
     */
    where?: ServiceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceFeedbacks to fetch.
     */
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceFeedbacks.
     */
    cursor?: ServiceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceFeedbacks.
     */
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * ServiceFeedback findFirstOrThrow
   */
  export type ServiceFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ServiceFeedback to fetch.
     */
    where?: ServiceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceFeedbacks to fetch.
     */
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceFeedbacks.
     */
    cursor?: ServiceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceFeedbacks.
     */
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * ServiceFeedback findMany
   */
  export type ServiceFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which ServiceFeedbacks to fetch.
     */
    where?: ServiceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceFeedbacks to fetch.
     */
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceFeedbacks.
     */
    cursor?: ServiceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceFeedbacks.
     */
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * ServiceFeedback create
   */
  export type ServiceFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceFeedback.
     */
    data: XOR<ServiceFeedbackCreateInput, ServiceFeedbackUncheckedCreateInput>
  }


  /**
   * ServiceFeedback createMany
   */
  export type ServiceFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceFeedbacks.
     */
    data: ServiceFeedbackCreateManyInput | ServiceFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ServiceFeedback update
   */
  export type ServiceFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceFeedback.
     */
    data: XOR<ServiceFeedbackUpdateInput, ServiceFeedbackUncheckedUpdateInput>
    /**
     * Choose, which ServiceFeedback to update.
     */
    where: ServiceFeedbackWhereUniqueInput
  }


  /**
   * ServiceFeedback updateMany
   */
  export type ServiceFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceFeedbacks.
     */
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which ServiceFeedbacks to update
     */
    where?: ServiceFeedbackWhereInput
  }


  /**
   * ServiceFeedback upsert
   */
  export type ServiceFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceFeedback to update in case it exists.
     */
    where: ServiceFeedbackWhereUniqueInput
    /**
     * In case the ServiceFeedback found by the `where` argument doesn't exist, create a new ServiceFeedback with this data.
     */
    create: XOR<ServiceFeedbackCreateInput, ServiceFeedbackUncheckedCreateInput>
    /**
     * In case the ServiceFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceFeedbackUpdateInput, ServiceFeedbackUncheckedUpdateInput>
  }


  /**
   * ServiceFeedback delete
   */
  export type ServiceFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    /**
     * Filter which ServiceFeedback to delete.
     */
    where: ServiceFeedbackWhereUniqueInput
  }


  /**
   * ServiceFeedback deleteMany
   */
  export type ServiceFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceFeedbacks to delete
     */
    where?: ServiceFeedbackWhereInput
  }


  /**
   * ServiceFeedback.service
   */
  export type ServiceFeedback$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    where?: ServicesWhereInput
  }


  /**
   * ServiceFeedback.ClientType
   */
  export type ServiceFeedback$ClientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    where?: ClientTypeWhereInput
  }


  /**
   * ServiceFeedback.Age
   */
  export type ServiceFeedback$AgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Age
     */
    select?: AgeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AgeInclude<ExtArgs> | null
    where?: AgeWhereInput
  }


  /**
   * ServiceFeedback.serviceKind
   */
  export type ServiceFeedback$serviceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    where?: ServiceKindWhereInput
  }


  /**
   * ServiceFeedback.feedbackQuestions
   */
  export type ServiceFeedback$feedbackQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    where?: FeedbackQuestionWhereInput
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    cursor?: FeedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * ServiceFeedback.logs
   */
  export type ServiceFeedback$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    where?: LogsWhereInput
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    cursor?: LogsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * ServiceFeedback without action
   */
  export type ServiceFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
  }



  /**
   * Model ClientType
   */

  export type AggregateClientType = {
    _count: ClientTypeCountAggregateOutputType | null
    _avg: ClientTypeAvgAggregateOutputType | null
    _sum: ClientTypeSumAggregateOutputType | null
    _min: ClientTypeMinAggregateOutputType | null
    _max: ClientTypeMaxAggregateOutputType | null
  }

  export type ClientTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ClientTypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ClientTypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ClientTypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type ClientTypeAvgAggregateInputType = {
    id?: true
  }

  export type ClientTypeSumAggregateInputType = {
    id?: true
  }

  export type ClientTypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type ClientTypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type ClientTypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type ClientTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientType to aggregate.
     */
    where?: ClientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientTypes to fetch.
     */
    orderBy?: ClientTypeOrderByWithRelationInput | ClientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClientTypes
    **/
    _count?: true | ClientTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientTypeMaxAggregateInputType
  }

  export type GetClientTypeAggregateType<T extends ClientTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateClientType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientType[P]>
      : GetScalarType<T[P], AggregateClientType[P]>
  }




  export type ClientTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClientTypeWhereInput
    orderBy?: ClientTypeOrderByWithAggregationInput | ClientTypeOrderByWithAggregationInput[]
    by: ClientTypeScalarFieldEnum[] | ClientTypeScalarFieldEnum
    having?: ClientTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientTypeCountAggregateInputType | true
    _avg?: ClientTypeAvgAggregateInputType
    _sum?: ClientTypeSumAggregateInputType
    _min?: ClientTypeMinAggregateInputType
    _max?: ClientTypeMaxAggregateInputType
  }

  export type ClientTypeGroupByOutputType = {
    id: number
    type: string
    _count: ClientTypeCountAggregateOutputType | null
    _avg: ClientTypeAvgAggregateOutputType | null
    _sum: ClientTypeSumAggregateOutputType | null
    _min: ClientTypeMinAggregateOutputType | null
    _max: ClientTypeMaxAggregateOutputType | null
  }

  type GetClientTypeGroupByPayload<T extends ClientTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ClientTypeGroupByOutputType[P]>
        }
      >
    >


  export type ClientTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    ServiceFeedback?: boolean | ClientType$ServiceFeedbackArgs<ExtArgs>
    Submitters?: boolean | ClientType$SubmittersArgs<ExtArgs>
    _count?: boolean | ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientType"]>

  export type ClientTypeSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type ClientTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | ClientType$ServiceFeedbackArgs<ExtArgs>
    Submitters?: boolean | ClientType$SubmittersArgs<ExtArgs>
    _count?: boolean | ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ClientTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClientType"
    objects: {
      ServiceFeedback: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
      Submitters: Prisma.$SubmittersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["clientType"]>
    composites: {}
  }


  type ClientTypeGetPayload<S extends boolean | null | undefined | ClientTypeDefaultArgs> = $Result.GetResult<Prisma.$ClientTypePayload, S>

  type ClientTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClientTypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ClientTypeCountAggregateInputType | true
    }

  export interface ClientTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClientType'], meta: { name: 'ClientType' } }
    /**
     * Find zero or one ClientType that matches the filter.
     * @param {ClientTypeFindUniqueArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ClientType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClientTypeFindUniqueOrThrowArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ClientType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeFindFirstArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeFindFirstArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ClientType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeFindFirstOrThrowArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ClientTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientTypes
     * const clientTypes = await prisma.clientType.findMany()
     * 
     * // Get first 10 ClientTypes
     * const clientTypes = await prisma.clientType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientTypeWithIdOnly = await prisma.clientType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ClientType.
     * @param {ClientTypeCreateArgs} args - Arguments to create a ClientType.
     * @example
     * // Create one ClientType
     * const ClientType = await prisma.clientType.create({
     *   data: {
     *     // ... data to create a ClientType
     *   }
     * })
     * 
    **/
    create<T extends ClientTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeCreateArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ClientTypes.
     *     @param {ClientTypeCreateManyArgs} args - Arguments to create many ClientTypes.
     *     @example
     *     // Create many ClientTypes
     *     const clientType = await prisma.clientType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientType.
     * @param {ClientTypeDeleteArgs} args - Arguments to delete one ClientType.
     * @example
     * // Delete one ClientType
     * const ClientType = await prisma.clientType.delete({
     *   where: {
     *     // ... filter to delete one ClientType
     *   }
     * })
     * 
    **/
    delete<T extends ClientTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeDeleteArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ClientType.
     * @param {ClientTypeUpdateArgs} args - Arguments to update one ClientType.
     * @example
     * // Update one ClientType
     * const clientType = await prisma.clientType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeUpdateArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ClientTypes.
     * @param {ClientTypeDeleteManyArgs} args - Arguments to filter ClientTypes to delete.
     * @example
     * // Delete a few ClientTypes
     * const { count } = await prisma.clientType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClientTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientTypes
     * const clientType = await prisma.clientType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientType.
     * @param {ClientTypeUpsertArgs} args - Arguments to update or create a ClientType.
     * @example
     * // Update or create a ClientType
     * const clientType = await prisma.clientType.upsert({
     *   create: {
     *     // ... data to create a ClientType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientType we want to update
     *   }
     * })
    **/
    upsert<T extends ClientTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClientTypeUpsertArgs<ExtArgs>>
    ): Prisma__ClientTypeClient<$Result.GetResult<Prisma.$ClientTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ClientTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeCountArgs} args - Arguments to filter ClientTypes to count.
     * @example
     * // Count the number of ClientTypes
     * const count = await prisma.clientType.count({
     *   where: {
     *     // ... the filter for the ClientTypes we want to count
     *   }
     * })
    **/
    count<T extends ClientTypeCountArgs>(
      args?: Subset<T, ClientTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientTypeAggregateArgs>(args: Subset<T, ClientTypeAggregateArgs>): Prisma.PrismaPromise<GetClientTypeAggregateType<T>>

    /**
     * Group by ClientType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientTypeGroupByArgs['orderBy'] }
        : { orderBy?: ClientTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClientType model
   */
  readonly fields: ClientTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClientType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClientTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ServiceFeedback<T extends ClientType$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, ClientType$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Submitters<T extends ClientType$SubmittersArgs<ExtArgs> = {}>(args?: Subset<T, ClientType$SubmittersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ClientType model
   */ 
  interface ClientTypeFieldRefs {
    readonly id: FieldRef<"ClientType", 'Int'>
    readonly type: FieldRef<"ClientType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ClientType findUnique
   */
  export type ClientTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter, which ClientType to fetch.
     */
    where: ClientTypeWhereUniqueInput
  }


  /**
   * ClientType findUniqueOrThrow
   */
  export type ClientTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter, which ClientType to fetch.
     */
    where: ClientTypeWhereUniqueInput
  }


  /**
   * ClientType findFirst
   */
  export type ClientTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter, which ClientType to fetch.
     */
    where?: ClientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientTypes to fetch.
     */
    orderBy?: ClientTypeOrderByWithRelationInput | ClientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientTypes.
     */
    cursor?: ClientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientTypes.
     */
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * ClientType findFirstOrThrow
   */
  export type ClientTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter, which ClientType to fetch.
     */
    where?: ClientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientTypes to fetch.
     */
    orderBy?: ClientTypeOrderByWithRelationInput | ClientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClientTypes.
     */
    cursor?: ClientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClientTypes.
     */
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * ClientType findMany
   */
  export type ClientTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter, which ClientTypes to fetch.
     */
    where?: ClientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClientTypes to fetch.
     */
    orderBy?: ClientTypeOrderByWithRelationInput | ClientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClientTypes.
     */
    cursor?: ClientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClientTypes.
     */
    skip?: number
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * ClientType create
   */
  export type ClientTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ClientType.
     */
    data: XOR<ClientTypeCreateInput, ClientTypeUncheckedCreateInput>
  }


  /**
   * ClientType createMany
   */
  export type ClientTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClientTypes.
     */
    data: ClientTypeCreateManyInput | ClientTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ClientType update
   */
  export type ClientTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ClientType.
     */
    data: XOR<ClientTypeUpdateInput, ClientTypeUncheckedUpdateInput>
    /**
     * Choose, which ClientType to update.
     */
    where: ClientTypeWhereUniqueInput
  }


  /**
   * ClientType updateMany
   */
  export type ClientTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClientTypes.
     */
    data: XOR<ClientTypeUpdateManyMutationInput, ClientTypeUncheckedUpdateManyInput>
    /**
     * Filter which ClientTypes to update
     */
    where?: ClientTypeWhereInput
  }


  /**
   * ClientType upsert
   */
  export type ClientTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ClientType to update in case it exists.
     */
    where: ClientTypeWhereUniqueInput
    /**
     * In case the ClientType found by the `where` argument doesn't exist, create a new ClientType with this data.
     */
    create: XOR<ClientTypeCreateInput, ClientTypeUncheckedCreateInput>
    /**
     * In case the ClientType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClientTypeUpdateInput, ClientTypeUncheckedUpdateInput>
  }


  /**
   * ClientType delete
   */
  export type ClientTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
    /**
     * Filter which ClientType to delete.
     */
    where: ClientTypeWhereUniqueInput
  }


  /**
   * ClientType deleteMany
   */
  export type ClientTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClientTypes to delete
     */
    where?: ClientTypeWhereInput
  }


  /**
   * ClientType.ServiceFeedback
   */
  export type ClientType$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * ClientType.Submitters
   */
  export type ClientType$SubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submitters
     */
    select?: SubmittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmittersInclude<ExtArgs> | null
    where?: SubmittersWhereInput
    orderBy?: SubmittersOrderByWithRelationInput | SubmittersOrderByWithRelationInput[]
    cursor?: SubmittersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * ClientType without action
   */
  export type ClientTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientType
     */
    select?: ClientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClientTypeInclude<ExtArgs> | null
  }



  /**
   * Model FeedbackQuestion
   */

  export type AggregateFeedbackQuestion = {
    _count: FeedbackQuestionCountAggregateOutputType | null
    _avg: FeedbackQuestionAvgAggregateOutputType | null
    _sum: FeedbackQuestionSumAggregateOutputType | null
    _min: FeedbackQuestionMinAggregateOutputType | null
    _max: FeedbackQuestionMaxAggregateOutputType | null
  }

  export type FeedbackQuestionAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
  }

  export type FeedbackQuestionSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
  }

  export type FeedbackQuestionMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FeedbackQuestionMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FeedbackQuestionCountAggregateOutputType = {
    id: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FeedbackQuestionAvgAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
  }

  export type FeedbackQuestionSumAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
  }

  export type FeedbackQuestionMinAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
  }

  export type FeedbackQuestionMaxAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
  }

  export type FeedbackQuestionCountAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FeedbackQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackQuestion to aggregate.
     */
    where?: FeedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackQuestions to fetch.
     */
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackQuestions
    **/
    _count?: true | FeedbackQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackQuestionMaxAggregateInputType
  }

  export type GetFeedbackQuestionAggregateType<T extends FeedbackQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackQuestion[P]>
      : GetScalarType<T[P], AggregateFeedbackQuestion[P]>
  }




  export type FeedbackQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackQuestionWhereInput
    orderBy?: FeedbackQuestionOrderByWithAggregationInput | FeedbackQuestionOrderByWithAggregationInput[]
    by: FeedbackQuestionScalarFieldEnum[] | FeedbackQuestionScalarFieldEnum
    having?: FeedbackQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackQuestionCountAggregateInputType | true
    _avg?: FeedbackQuestionAvgAggregateInputType
    _sum?: FeedbackQuestionSumAggregateInputType
    _min?: FeedbackQuestionMinAggregateInputType
    _max?: FeedbackQuestionMaxAggregateInputType
  }

  export type FeedbackQuestionGroupByOutputType = {
    id: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at: Date
    updated_at: Date
    _count: FeedbackQuestionCountAggregateOutputType | null
    _avg: FeedbackQuestionAvgAggregateOutputType | null
    _sum: FeedbackQuestionSumAggregateOutputType | null
    _min: FeedbackQuestionMinAggregateOutputType | null
    _max: FeedbackQuestionMaxAggregateOutputType | null
  }

  type GetFeedbackQuestionGroupByPayload<T extends FeedbackQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    questionId?: boolean
    rating?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    updated_at?: boolean
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | ServiceFeedbackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackQuestion"]>

  export type FeedbackQuestionSelectScalar = {
    id?: boolean
    categoryId?: boolean
    questionId?: boolean
    rating?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type FeedbackQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    question?: boolean | QuestionsDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | ServiceFeedbackDefaultArgs<ExtArgs>
  }


  export type $FeedbackQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackQuestion"
    objects: {
      category: Prisma.$CategoriesPayload<ExtArgs>
      question: Prisma.$QuestionsPayload<ExtArgs>
      serviceFeedback: Prisma.$ServiceFeedbackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      questionId: number
      rating: number
      serviceFeedbackId: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["feedbackQuestion"]>
    composites: {}
  }


  type FeedbackQuestionGetPayload<S extends boolean | null | undefined | FeedbackQuestionDefaultArgs> = $Result.GetResult<Prisma.$FeedbackQuestionPayload, S>

  type FeedbackQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackQuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FeedbackQuestionCountAggregateInputType | true
    }

  export interface FeedbackQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackQuestion'], meta: { name: 'FeedbackQuestion' } }
    /**
     * Find zero or one FeedbackQuestion that matches the filter.
     * @param {FeedbackQuestionFindUniqueArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackQuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeedbackQuestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeedbackQuestionFindUniqueOrThrowArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeedbackQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionFindFirstArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackQuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionFindFirstArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeedbackQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionFindFirstOrThrowArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeedbackQuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeedbackQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackQuestions
     * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
     * 
     * // Get first 10 FeedbackQuestions
     * const feedbackQuestions = await prisma.feedbackQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackQuestionWithIdOnly = await prisma.feedbackQuestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeedbackQuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeedbackQuestion.
     * @param {FeedbackQuestionCreateArgs} args - Arguments to create a FeedbackQuestion.
     * @example
     * // Create one FeedbackQuestion
     * const FeedbackQuestion = await prisma.feedbackQuestion.create({
     *   data: {
     *     // ... data to create a FeedbackQuestion
     *   }
     * })
     * 
    **/
    create<T extends FeedbackQuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionCreateArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeedbackQuestions.
     *     @param {FeedbackQuestionCreateManyArgs} args - Arguments to create many FeedbackQuestions.
     *     @example
     *     // Create many FeedbackQuestions
     *     const feedbackQuestion = await prisma.feedbackQuestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackQuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeedbackQuestion.
     * @param {FeedbackQuestionDeleteArgs} args - Arguments to delete one FeedbackQuestion.
     * @example
     * // Delete one FeedbackQuestion
     * const FeedbackQuestion = await prisma.feedbackQuestion.delete({
     *   where: {
     *     // ... filter to delete one FeedbackQuestion
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackQuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionDeleteArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeedbackQuestion.
     * @param {FeedbackQuestionUpdateArgs} args - Arguments to update one FeedbackQuestion.
     * @example
     * // Update one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackQuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionUpdateArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeedbackQuestions.
     * @param {FeedbackQuestionDeleteManyArgs} args - Arguments to filter FeedbackQuestions to delete.
     * @example
     * // Delete a few FeedbackQuestions
     * const { count } = await prisma.feedbackQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackQuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackQuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackQuestions
     * const feedbackQuestion = await prisma.feedbackQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackQuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedbackQuestion.
     * @param {FeedbackQuestionUpsertArgs} args - Arguments to update or create a FeedbackQuestion.
     * @example
     * // Update or create a FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.upsert({
     *   create: {
     *     // ... data to create a FeedbackQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackQuestion we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackQuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackQuestionUpsertArgs<ExtArgs>>
    ): Prisma__FeedbackQuestionClient<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeedbackQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionCountArgs} args - Arguments to filter FeedbackQuestions to count.
     * @example
     * // Count the number of FeedbackQuestions
     * const count = await prisma.feedbackQuestion.count({
     *   where: {
     *     // ... the filter for the FeedbackQuestions we want to count
     *   }
     * })
    **/
    count<T extends FeedbackQuestionCountArgs>(
      args?: Subset<T, FeedbackQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackQuestionAggregateArgs>(args: Subset<T, FeedbackQuestionAggregateArgs>): Prisma.PrismaPromise<GetFeedbackQuestionAggregateType<T>>

    /**
     * Group by FeedbackQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackQuestionGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackQuestion model
   */
  readonly fields: FeedbackQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriesDefaultArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    question<T extends QuestionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionsDefaultArgs<ExtArgs>>): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serviceFeedback<T extends ServiceFeedbackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedbackDefaultArgs<ExtArgs>>): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FeedbackQuestion model
   */ 
  interface FeedbackQuestionFieldRefs {
    readonly id: FieldRef<"FeedbackQuestion", 'Int'>
    readonly categoryId: FieldRef<"FeedbackQuestion", 'Int'>
    readonly questionId: FieldRef<"FeedbackQuestion", 'Int'>
    readonly rating: FieldRef<"FeedbackQuestion", 'Int'>
    readonly serviceFeedbackId: FieldRef<"FeedbackQuestion", 'Int'>
    readonly created_at: FieldRef<"FeedbackQuestion", 'DateTime'>
    readonly updated_at: FieldRef<"FeedbackQuestion", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * FeedbackQuestion findUnique
   */
  export type FeedbackQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackQuestion to fetch.
     */
    where: FeedbackQuestionWhereUniqueInput
  }


  /**
   * FeedbackQuestion findUniqueOrThrow
   */
  export type FeedbackQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackQuestion to fetch.
     */
    where: FeedbackQuestionWhereUniqueInput
  }


  /**
   * FeedbackQuestion findFirst
   */
  export type FeedbackQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackQuestion to fetch.
     */
    where?: FeedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackQuestions to fetch.
     */
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackQuestions.
     */
    cursor?: FeedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackQuestions.
     */
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * FeedbackQuestion findFirstOrThrow
   */
  export type FeedbackQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackQuestion to fetch.
     */
    where?: FeedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackQuestions to fetch.
     */
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackQuestions.
     */
    cursor?: FeedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackQuestions.
     */
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * FeedbackQuestion findMany
   */
  export type FeedbackQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackQuestions to fetch.
     */
    where?: FeedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackQuestions to fetch.
     */
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackQuestions.
     */
    cursor?: FeedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackQuestions.
     */
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * FeedbackQuestion create
   */
  export type FeedbackQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedbackQuestion.
     */
    data: XOR<FeedbackQuestionCreateInput, FeedbackQuestionUncheckedCreateInput>
  }


  /**
   * FeedbackQuestion createMany
   */
  export type FeedbackQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackQuestions.
     */
    data: FeedbackQuestionCreateManyInput | FeedbackQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FeedbackQuestion update
   */
  export type FeedbackQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedbackQuestion.
     */
    data: XOR<FeedbackQuestionUpdateInput, FeedbackQuestionUncheckedUpdateInput>
    /**
     * Choose, which FeedbackQuestion to update.
     */
    where: FeedbackQuestionWhereUniqueInput
  }


  /**
   * FeedbackQuestion updateMany
   */
  export type FeedbackQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackQuestions.
     */
    data: XOR<FeedbackQuestionUpdateManyMutationInput, FeedbackQuestionUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackQuestions to update
     */
    where?: FeedbackQuestionWhereInput
  }


  /**
   * FeedbackQuestion upsert
   */
  export type FeedbackQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedbackQuestion to update in case it exists.
     */
    where: FeedbackQuestionWhereUniqueInput
    /**
     * In case the FeedbackQuestion found by the `where` argument doesn't exist, create a new FeedbackQuestion with this data.
     */
    create: XOR<FeedbackQuestionCreateInput, FeedbackQuestionUncheckedCreateInput>
    /**
     * In case the FeedbackQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackQuestionUpdateInput, FeedbackQuestionUncheckedUpdateInput>
  }


  /**
   * FeedbackQuestion delete
   */
  export type FeedbackQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter which FeedbackQuestion to delete.
     */
    where: FeedbackQuestionWhereUniqueInput
  }


  /**
   * FeedbackQuestion deleteMany
   */
  export type FeedbackQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackQuestions to delete
     */
    where?: FeedbackQuestionWhereInput
  }


  /**
   * FeedbackQuestion without action
   */
  export type FeedbackQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
  }



  /**
   * Model Services
   */

  export type AggregateServices = {
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  export type ServicesAvgAggregateOutputType = {
    id: number | null
    relatedOfficeId: number | null
    serviceKindId: number | null
  }

  export type ServicesSumAggregateOutputType = {
    id: number | null
    relatedOfficeId: number | null
    serviceKindId: number | null
  }

  export type ServicesMinAggregateOutputType = {
    id: number | null
    title: string | null
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicesCountAggregateOutputType = {
    id: number
    title: number
    relatedOfficeId: number
    serviceKindId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServicesAvgAggregateInputType = {
    id?: true
    relatedOfficeId?: true
    serviceKindId?: true
  }

  export type ServicesSumAggregateInputType = {
    id?: true
    relatedOfficeId?: true
    serviceKindId?: true
  }

  export type ServicesMinAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicesMaxAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicesCountAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to aggregate.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicesMaxAggregateInputType
  }

  export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
        [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServices[P]>
      : GetScalarType<T[P], AggregateServices[P]>
  }




  export type ServicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicesWhereInput
    orderBy?: ServicesOrderByWithAggregationInput | ServicesOrderByWithAggregationInput[]
    by: ServicesScalarFieldEnum[] | ServicesScalarFieldEnum
    having?: ServicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicesCountAggregateInputType | true
    _avg?: ServicesAvgAggregateInputType
    _sum?: ServicesSumAggregateInputType
    _min?: ServicesMinAggregateInputType
    _max?: ServicesMaxAggregateInputType
  }

  export type ServicesGroupByOutputType = {
    id: number
    title: string
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date
    updated_at: Date
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  type GetServicesGroupByPayload<T extends ServicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicesGroupByOutputType[P]>
            : GetScalarType<T[P], ServicesGroupByOutputType[P]>
        }
      >
    >


  export type ServicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    relatedOfficeId?: boolean
    serviceKindId?: boolean
    created_at?: boolean
    updated_at?: boolean
    office?: boolean | Services$officeArgs<ExtArgs>
    serviceKind?: boolean | Services$serviceKindArgs<ExtArgs>
    serviceFeedbacks?: boolean | Services$serviceFeedbacksArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["services"]>

  export type ServicesSelectScalar = {
    id?: boolean
    title?: boolean
    relatedOfficeId?: boolean
    serviceKindId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ServicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | Services$officeArgs<ExtArgs>
    serviceKind?: boolean | Services$serviceKindArgs<ExtArgs>
    serviceFeedbacks?: boolean | Services$serviceFeedbacksArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Services"
    objects: {
      office: Prisma.$OfficesPayload<ExtArgs> | null
      serviceKind: Prisma.$ServiceKindPayload<ExtArgs> | null
      serviceFeedbacks: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      relatedOfficeId: number | null
      serviceKindId: number | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["services"]>
    composites: {}
  }


  type ServicesGetPayload<S extends boolean | null | undefined | ServicesDefaultArgs> = $Result.GetResult<Prisma.$ServicesPayload, S>

  type ServicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServicesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServicesCountAggregateInputType | true
    }

  export interface ServicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Services'], meta: { name: 'Services' } }
    /**
     * Find zero or one Services that matches the filter.
     * @param {ServicesFindUniqueArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesFindUniqueArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServicesFindUniqueOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindFirstArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.services.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Services.
     * @param {ServicesCreateArgs} args - Arguments to create a Services.
     * @example
     * // Create one Services
     * const Services = await prisma.services.create({
     *   data: {
     *     // ... data to create a Services
     *   }
     * })
     * 
    **/
    create<T extends ServicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesCreateArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {ServicesCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const services = await prisma.services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Services.
     * @param {ServicesDeleteArgs} args - Arguments to delete one Services.
     * @example
     * // Delete one Services
     * const Services = await prisma.services.delete({
     *   where: {
     *     // ... filter to delete one Services
     *   }
     * })
     * 
    **/
    delete<T extends ServicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesDeleteArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Services.
     * @param {ServicesUpdateArgs} args - Arguments to update one Services.
     * @example
     * // Update one Services
     * const services = await prisma.services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpdateArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServicesDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Services.
     * @param {ServicesUpsertArgs} args - Arguments to update or create a Services.
     * @example
     * // Update or create a Services
     * const services = await prisma.services.upsert({
     *   create: {
     *     // ... data to create a Services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Services we want to update
     *   }
     * })
    **/
    upsert<T extends ServicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpsertArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.services.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServicesCountArgs>(
      args?: Subset<T, ServicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicesAggregateArgs>(args: Subset<T, ServicesAggregateArgs>): Prisma.PrismaPromise<GetServicesAggregateType<T>>

    /**
     * Group by Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicesGroupByArgs['orderBy'] }
        : { orderBy?: ServicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Services model
   */
  readonly fields: ServicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    office<T extends Services$officeArgs<ExtArgs> = {}>(args?: Subset<T, Services$officeArgs<ExtArgs>>): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceKind<T extends Services$serviceKindArgs<ExtArgs> = {}>(args?: Subset<T, Services$serviceKindArgs<ExtArgs>>): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceFeedbacks<T extends Services$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Services$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Services model
   */ 
  interface ServicesFieldRefs {
    readonly id: FieldRef<"Services", 'Int'>
    readonly title: FieldRef<"Services", 'String'>
    readonly relatedOfficeId: FieldRef<"Services", 'Int'>
    readonly serviceKindId: FieldRef<"Services", 'Int'>
    readonly created_at: FieldRef<"Services", 'DateTime'>
    readonly updated_at: FieldRef<"Services", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Services findUnique
   */
  export type ServicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services findUniqueOrThrow
   */
  export type ServicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services findFirst
   */
  export type ServicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services findFirstOrThrow
   */
  export type ServicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services findMany
   */
  export type ServicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services create
   */
  export type ServicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The data needed to create a Services.
     */
    data: XOR<ServicesCreateInput, ServicesUncheckedCreateInput>
  }


  /**
   * Services createMany
   */
  export type ServicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServicesCreateManyInput | ServicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Services update
   */
  export type ServicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The data needed to update a Services.
     */
    data: XOR<ServicesUpdateInput, ServicesUncheckedUpdateInput>
    /**
     * Choose, which Services to update.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services updateMany
   */
  export type ServicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServicesUpdateManyMutationInput, ServicesUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServicesWhereInput
  }


  /**
   * Services upsert
   */
  export type ServicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The filter to search for the Services to update in case it exists.
     */
    where: ServicesWhereUniqueInput
    /**
     * In case the Services found by the `where` argument doesn't exist, create a new Services with this data.
     */
    create: XOR<ServicesCreateInput, ServicesUncheckedCreateInput>
    /**
     * In case the Services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicesUpdateInput, ServicesUncheckedUpdateInput>
  }


  /**
   * Services delete
   */
  export type ServicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter which Services to delete.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services deleteMany
   */
  export type ServicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServicesWhereInput
  }


  /**
   * Services.office
   */
  export type Services$officeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    where?: OfficesWhereInput
  }


  /**
   * Services.serviceKind
   */
  export type Services$serviceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    where?: ServiceKindWhereInput
  }


  /**
   * Services.serviceFeedbacks
   */
  export type Services$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * Services without action
   */
  export type ServicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
  }



  /**
   * Model ServiceKind
   */

  export type AggregateServiceKind = {
    _count: ServiceKindCountAggregateOutputType | null
    _avg: ServiceKindAvgAggregateOutputType | null
    _sum: ServiceKindSumAggregateOutputType | null
    _min: ServiceKindMinAggregateOutputType | null
    _max: ServiceKindMaxAggregateOutputType | null
  }

  export type ServiceKindAvgAggregateOutputType = {
    id: number | null
  }

  export type ServiceKindSumAggregateOutputType = {
    id: number | null
  }

  export type ServiceKindMinAggregateOutputType = {
    id: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceKindMaxAggregateOutputType = {
    id: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceKindCountAggregateOutputType = {
    id: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServiceKindAvgAggregateInputType = {
    id?: true
  }

  export type ServiceKindSumAggregateInputType = {
    id?: true
  }

  export type ServiceKindMinAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceKindMaxAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceKindCountAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServiceKindAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceKind to aggregate.
     */
    where?: ServiceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceKinds to fetch.
     */
    orderBy?: ServiceKindOrderByWithRelationInput | ServiceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServiceKinds
    **/
    _count?: true | ServiceKindCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceKindAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceKindSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceKindMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceKindMaxAggregateInputType
  }

  export type GetServiceKindAggregateType<T extends ServiceKindAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceKind]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceKind[P]>
      : GetScalarType<T[P], AggregateServiceKind[P]>
  }




  export type ServiceKindGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceKindWhereInput
    orderBy?: ServiceKindOrderByWithAggregationInput | ServiceKindOrderByWithAggregationInput[]
    by: ServiceKindScalarFieldEnum[] | ServiceKindScalarFieldEnum
    having?: ServiceKindScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceKindCountAggregateInputType | true
    _avg?: ServiceKindAvgAggregateInputType
    _sum?: ServiceKindSumAggregateInputType
    _min?: ServiceKindMinAggregateInputType
    _max?: ServiceKindMaxAggregateInputType
  }

  export type ServiceKindGroupByOutputType = {
    id: number
    description: string | null
    created_at: Date
    updated_at: Date
    _count: ServiceKindCountAggregateOutputType | null
    _avg: ServiceKindAvgAggregateOutputType | null
    _sum: ServiceKindSumAggregateOutputType | null
    _min: ServiceKindMinAggregateOutputType | null
    _max: ServiceKindMaxAggregateOutputType | null
  }

  type GetServiceKindGroupByPayload<T extends ServiceKindGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceKindGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceKindGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceKindGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceKindGroupByOutputType[P]>
        }
      >
    >


  export type ServiceKindSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    serviceFeedbacks?: boolean | ServiceKind$serviceFeedbacksArgs<ExtArgs>
    Services?: boolean | ServiceKind$ServicesArgs<ExtArgs>
    _count?: boolean | ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceKind"]>

  export type ServiceKindSelectScalar = {
    id?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ServiceKindInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | ServiceKind$serviceFeedbacksArgs<ExtArgs>
    Services?: boolean | ServiceKind$ServicesArgs<ExtArgs>
    _count?: boolean | ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ServiceKindPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServiceKind"
    objects: {
      serviceFeedbacks: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
      Services: Prisma.$ServicesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["serviceKind"]>
    composites: {}
  }


  type ServiceKindGetPayload<S extends boolean | null | undefined | ServiceKindDefaultArgs> = $Result.GetResult<Prisma.$ServiceKindPayload, S>

  type ServiceKindCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ServiceKindFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServiceKindCountAggregateInputType | true
    }

  export interface ServiceKindDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceKind'], meta: { name: 'ServiceKind' } }
    /**
     * Find zero or one ServiceKind that matches the filter.
     * @param {ServiceKindFindUniqueArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServiceKindFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindFindUniqueArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceKind that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServiceKindFindUniqueOrThrowArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServiceKindFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceKind that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindFindFirstArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServiceKindFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindFindFirstArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceKind that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindFindFirstOrThrowArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServiceKindFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceKinds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceKinds
     * const serviceKinds = await prisma.serviceKind.findMany()
     * 
     * // Get first 10 ServiceKinds
     * const serviceKinds = await prisma.serviceKind.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceKindWithIdOnly = await prisma.serviceKind.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServiceKindFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceKind.
     * @param {ServiceKindCreateArgs} args - Arguments to create a ServiceKind.
     * @example
     * // Create one ServiceKind
     * const ServiceKind = await prisma.serviceKind.create({
     *   data: {
     *     // ... data to create a ServiceKind
     *   }
     * })
     * 
    **/
    create<T extends ServiceKindCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindCreateArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceKinds.
     *     @param {ServiceKindCreateManyArgs} args - Arguments to create many ServiceKinds.
     *     @example
     *     // Create many ServiceKinds
     *     const serviceKind = await prisma.serviceKind.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServiceKindCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceKind.
     * @param {ServiceKindDeleteArgs} args - Arguments to delete one ServiceKind.
     * @example
     * // Delete one ServiceKind
     * const ServiceKind = await prisma.serviceKind.delete({
     *   where: {
     *     // ... filter to delete one ServiceKind
     *   }
     * })
     * 
    **/
    delete<T extends ServiceKindDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindDeleteArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceKind.
     * @param {ServiceKindUpdateArgs} args - Arguments to update one ServiceKind.
     * @example
     * // Update one ServiceKind
     * const serviceKind = await prisma.serviceKind.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServiceKindUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindUpdateArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceKinds.
     * @param {ServiceKindDeleteManyArgs} args - Arguments to filter ServiceKinds to delete.
     * @example
     * // Delete a few ServiceKinds
     * const { count } = await prisma.serviceKind.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServiceKindDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServiceKindDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceKinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceKinds
     * const serviceKind = await prisma.serviceKind.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServiceKindUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceKind.
     * @param {ServiceKindUpsertArgs} args - Arguments to update or create a ServiceKind.
     * @example
     * // Update or create a ServiceKind
     * const serviceKind = await prisma.serviceKind.upsert({
     *   create: {
     *     // ... data to create a ServiceKind
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceKind we want to update
     *   }
     * })
    **/
    upsert<T extends ServiceKindUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServiceKindUpsertArgs<ExtArgs>>
    ): Prisma__ServiceKindClient<$Result.GetResult<Prisma.$ServiceKindPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceKinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindCountArgs} args - Arguments to filter ServiceKinds to count.
     * @example
     * // Count the number of ServiceKinds
     * const count = await prisma.serviceKind.count({
     *   where: {
     *     // ... the filter for the ServiceKinds we want to count
     *   }
     * })
    **/
    count<T extends ServiceKindCountArgs>(
      args?: Subset<T, ServiceKindCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceKindCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceKind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceKindAggregateArgs>(args: Subset<T, ServiceKindAggregateArgs>): Prisma.PrismaPromise<GetServiceKindAggregateType<T>>

    /**
     * Group by ServiceKind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceKindGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceKindGroupByArgs['orderBy'] }
        : { orderBy?: ServiceKindGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceKindGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceKindGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServiceKind model
   */
  readonly fields: ServiceKindFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServiceKind.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceKindClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    serviceFeedbacks<T extends ServiceKind$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, ServiceKind$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends ServiceKind$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, ServiceKind$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ServiceKind model
   */ 
  interface ServiceKindFieldRefs {
    readonly id: FieldRef<"ServiceKind", 'Int'>
    readonly description: FieldRef<"ServiceKind", 'String'>
    readonly created_at: FieldRef<"ServiceKind", 'DateTime'>
    readonly updated_at: FieldRef<"ServiceKind", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ServiceKind findUnique
   */
  export type ServiceKindFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter, which ServiceKind to fetch.
     */
    where: ServiceKindWhereUniqueInput
  }


  /**
   * ServiceKind findUniqueOrThrow
   */
  export type ServiceKindFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter, which ServiceKind to fetch.
     */
    where: ServiceKindWhereUniqueInput
  }


  /**
   * ServiceKind findFirst
   */
  export type ServiceKindFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter, which ServiceKind to fetch.
     */
    where?: ServiceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceKinds to fetch.
     */
    orderBy?: ServiceKindOrderByWithRelationInput | ServiceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceKinds.
     */
    cursor?: ServiceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceKinds.
     */
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * ServiceKind findFirstOrThrow
   */
  export type ServiceKindFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter, which ServiceKind to fetch.
     */
    where?: ServiceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceKinds to fetch.
     */
    orderBy?: ServiceKindOrderByWithRelationInput | ServiceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServiceKinds.
     */
    cursor?: ServiceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServiceKinds.
     */
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * ServiceKind findMany
   */
  export type ServiceKindFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter, which ServiceKinds to fetch.
     */
    where?: ServiceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServiceKinds to fetch.
     */
    orderBy?: ServiceKindOrderByWithRelationInput | ServiceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServiceKinds.
     */
    cursor?: ServiceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServiceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServiceKinds.
     */
    skip?: number
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * ServiceKind create
   */
  export type ServiceKindCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * The data needed to create a ServiceKind.
     */
    data: XOR<ServiceKindCreateInput, ServiceKindUncheckedCreateInput>
  }


  /**
   * ServiceKind createMany
   */
  export type ServiceKindCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServiceKinds.
     */
    data: ServiceKindCreateManyInput | ServiceKindCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ServiceKind update
   */
  export type ServiceKindUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * The data needed to update a ServiceKind.
     */
    data: XOR<ServiceKindUpdateInput, ServiceKindUncheckedUpdateInput>
    /**
     * Choose, which ServiceKind to update.
     */
    where: ServiceKindWhereUniqueInput
  }


  /**
   * ServiceKind updateMany
   */
  export type ServiceKindUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServiceKinds.
     */
    data: XOR<ServiceKindUpdateManyMutationInput, ServiceKindUncheckedUpdateManyInput>
    /**
     * Filter which ServiceKinds to update
     */
    where?: ServiceKindWhereInput
  }


  /**
   * ServiceKind upsert
   */
  export type ServiceKindUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * The filter to search for the ServiceKind to update in case it exists.
     */
    where: ServiceKindWhereUniqueInput
    /**
     * In case the ServiceKind found by the `where` argument doesn't exist, create a new ServiceKind with this data.
     */
    create: XOR<ServiceKindCreateInput, ServiceKindUncheckedCreateInput>
    /**
     * In case the ServiceKind was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceKindUpdateInput, ServiceKindUncheckedUpdateInput>
  }


  /**
   * ServiceKind delete
   */
  export type ServiceKindDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
    /**
     * Filter which ServiceKind to delete.
     */
    where: ServiceKindWhereUniqueInput
  }


  /**
   * ServiceKind deleteMany
   */
  export type ServiceKindDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServiceKinds to delete
     */
    where?: ServiceKindWhereInput
  }


  /**
   * ServiceKind.serviceFeedbacks
   */
  export type ServiceKind$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * ServiceKind.Services
   */
  export type ServiceKind$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    where?: ServicesWhereInput
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    cursor?: ServicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * ServiceKind without action
   */
  export type ServiceKindDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKind
     */
    select?: ServiceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceKindInclude<ExtArgs> | null
  }



  /**
   * Model Logs
   */

  export type AggregateLogs = {
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  export type LogsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
  }

  export type LogsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
  }

  export type LogsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
  }

  export type LogsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
  }

  export type LogsCountAggregateOutputType = {
    id: number
    userId: number
    serviceFeedbackId: number
    created_at: number
    _all: number
  }


  export type LogsAvgAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
  }

  export type LogsSumAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
  }

  export type LogsMinAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
  }

  export type LogsMaxAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
  }

  export type LogsCountAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
    _all?: true
  }

  export type LogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to aggregate.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogsMaxAggregateInputType
  }

  export type GetLogsAggregateType<T extends LogsAggregateArgs> = {
        [P in keyof T & keyof AggregateLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogs[P]>
      : GetScalarType<T[P], AggregateLogs[P]>
  }




  export type LogsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LogsWhereInput
    orderBy?: LogsOrderByWithAggregationInput | LogsOrderByWithAggregationInput[]
    by: LogsScalarFieldEnum[] | LogsScalarFieldEnum
    having?: LogsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogsCountAggregateInputType | true
    _avg?: LogsAvgAggregateInputType
    _sum?: LogsSumAggregateInputType
    _min?: LogsMinAggregateInputType
    _max?: LogsMaxAggregateInputType
  }

  export type LogsGroupByOutputType = {
    id: number
    userId: number
    serviceFeedbackId: number
    created_at: Date
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  type GetLogsGroupByPayload<T extends LogsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogsGroupByOutputType[P]>
            : GetScalarType<T[P], LogsGroupByOutputType[P]>
        }
      >
    >


  export type LogsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    user?: boolean | SubmittersDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | ServiceFeedbackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logs"]>

  export type LogsSelectScalar = {
    id?: boolean
    userId?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
  }

  export type LogsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SubmittersDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | ServiceFeedbackDefaultArgs<ExtArgs>
  }


  export type $LogsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Logs"
    objects: {
      user: Prisma.$SubmittersPayload<ExtArgs>
      serviceFeedback: Prisma.$ServiceFeedbackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      serviceFeedbackId: number
      created_at: Date
    }, ExtArgs["result"]["logs"]>
    composites: {}
  }


  type LogsGetPayload<S extends boolean | null | undefined | LogsDefaultArgs> = $Result.GetResult<Prisma.$LogsPayload, S>

  type LogsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LogsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LogsCountAggregateInputType | true
    }

  export interface LogsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Logs'], meta: { name: 'Logs' } }
    /**
     * Find zero or one Logs that matches the filter.
     * @param {LogsFindUniqueArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LogsFindUniqueArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Logs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LogsFindUniqueOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LogsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindFirstArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindFirstArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Logs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindFirstOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LogsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.logs.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.logs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logsWithIdOnly = await prisma.logs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LogsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Logs.
     * @param {LogsCreateArgs} args - Arguments to create a Logs.
     * @example
     * // Create one Logs
     * const Logs = await prisma.logs.create({
     *   data: {
     *     // ... data to create a Logs
     *   }
     * })
     * 
    **/
    create<T extends LogsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LogsCreateArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Logs.
     *     @param {LogsCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const logs = await prisma.logs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LogsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Logs.
     * @param {LogsDeleteArgs} args - Arguments to delete one Logs.
     * @example
     * // Delete one Logs
     * const Logs = await prisma.logs.delete({
     *   where: {
     *     // ... filter to delete one Logs
     *   }
     * })
     * 
    **/
    delete<T extends LogsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LogsDeleteArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Logs.
     * @param {LogsUpdateArgs} args - Arguments to update one Logs.
     * @example
     * // Update one Logs
     * const logs = await prisma.logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpdateArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {LogsDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LogsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const logs = await prisma.logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Logs.
     * @param {LogsUpsertArgs} args - Arguments to update or create a Logs.
     * @example
     * // Update or create a Logs
     * const logs = await prisma.logs.upsert({
     *   create: {
     *     // ... data to create a Logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logs we want to update
     *   }
     * })
    **/
    upsert<T extends LogsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LogsUpsertArgs<ExtArgs>>
    ): Prisma__LogsClient<$Result.GetResult<Prisma.$LogsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.logs.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogsCountArgs>(
      args?: Subset<T, LogsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogsAggregateArgs>(args: Subset<T, LogsAggregateArgs>): Prisma.PrismaPromise<GetLogsAggregateType<T>>

    /**
     * Group by Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogsGroupByArgs['orderBy'] }
        : { orderBy?: LogsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Logs model
   */
  readonly fields: LogsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LogsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends SubmittersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmittersDefaultArgs<ExtArgs>>): Prisma__SubmittersClient<$Result.GetResult<Prisma.$SubmittersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serviceFeedback<T extends ServiceFeedbackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceFeedbackDefaultArgs<ExtArgs>>): Prisma__ServiceFeedbackClient<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Logs model
   */ 
  interface LogsFieldRefs {
    readonly id: FieldRef<"Logs", 'Int'>
    readonly userId: FieldRef<"Logs", 'Int'>
    readonly serviceFeedbackId: FieldRef<"Logs", 'Int'>
    readonly created_at: FieldRef<"Logs", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Logs findUnique
   */
  export type LogsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs findUniqueOrThrow
   */
  export type LogsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs findFirst
   */
  export type LogsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * Logs findFirstOrThrow
   */
  export type LogsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     */
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * Logs findMany
   */
  export type LogsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter, which Logs to fetch.
     */
    where?: LogsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     */
    orderBy?: LogsOrderByWithRelationInput | LogsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     */
    cursor?: LogsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     */
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * Logs create
   */
  export type LogsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * The data needed to create a Logs.
     */
    data: XOR<LogsCreateInput, LogsUncheckedCreateInput>
  }


  /**
   * Logs createMany
   */
  export type LogsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Logs.
     */
    data: LogsCreateManyInput | LogsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Logs update
   */
  export type LogsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * The data needed to update a Logs.
     */
    data: XOR<LogsUpdateInput, LogsUncheckedUpdateInput>
    /**
     * Choose, which Logs to update.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs updateMany
   */
  export type LogsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Logs.
     */
    data: XOR<LogsUpdateManyMutationInput, LogsUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     */
    where?: LogsWhereInput
  }


  /**
   * Logs upsert
   */
  export type LogsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * The filter to search for the Logs to update in case it exists.
     */
    where: LogsWhereUniqueInput
    /**
     * In case the Logs found by the `where` argument doesn't exist, create a new Logs with this data.
     */
    create: XOR<LogsCreateInput, LogsUncheckedCreateInput>
    /**
     * In case the Logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LogsUpdateInput, LogsUncheckedUpdateInput>
  }


  /**
   * Logs delete
   */
  export type LogsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
    /**
     * Filter which Logs to delete.
     */
    where: LogsWhereUniqueInput
  }


  /**
   * Logs deleteMany
   */
  export type LogsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Logs to delete
     */
    where?: LogsWhereInput
  }


  /**
   * Logs without action
   */
  export type LogsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Logs
     */
    select?: LogsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LogsInclude<ExtArgs> | null
  }



  /**
   * Model Categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
    qualityDimension: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    qualityDimension: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    title: number
    qualityDimension: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to aggregate.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type CategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriesWhereInput
    orderBy?: CategoriesOrderByWithAggregationInput | CategoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: CategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    title: string
    qualityDimension: string
    created_at: Date
    updated_at: Date
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends CategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type CategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    qualityDimension?: boolean
    created_at?: boolean
    updated_at?: boolean
    FeedbackQuestion?: boolean | Categories$FeedbackQuestionArgs<ExtArgs>
    Questions?: boolean | Categories$QuestionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type CategoriesSelectScalar = {
    id?: boolean
    title?: boolean
    qualityDimension?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | Categories$FeedbackQuestionArgs<ExtArgs>
    Questions?: boolean | Categories$QuestionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categories"
    objects: {
      FeedbackQuestion: Prisma.$FeedbackQuestionPayload<ExtArgs>[]
      Questions: Prisma.$QuestionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      qualityDimension: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type CategoriesGetPayload<S extends boolean | null | undefined | CategoriesDefaultArgs> = $Result.GetResult<Prisma.$CategoriesPayload, S>

  type CategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface CategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categories'], meta: { name: 'Categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {CategoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {CategoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends CategoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesCreateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {CategoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends CategoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesDeleteArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {CategoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {CategoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends CategoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoriesUpsertArgs<ExtArgs>>
    ): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoriesCountArgs>(
      args?: Subset<T, CategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriesGroupByArgs['orderBy'] }
        : { orderBy?: CategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categories model
   */
  readonly fields: CategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    FeedbackQuestion<T extends Categories$FeedbackQuestionArgs<ExtArgs> = {}>(args?: Subset<T, Categories$FeedbackQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Questions<T extends Categories$QuestionsArgs<ExtArgs> = {}>(args?: Subset<T, Categories$QuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Categories model
   */ 
  interface CategoriesFieldRefs {
    readonly id: FieldRef<"Categories", 'Int'>
    readonly title: FieldRef<"Categories", 'String'>
    readonly qualityDimension: FieldRef<"Categories", 'String'>
    readonly created_at: FieldRef<"Categories", 'DateTime'>
    readonly updated_at: FieldRef<"Categories", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Categories findUnique
   */
  export type CategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findUniqueOrThrow
   */
  export type CategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories findFirst
   */
  export type CategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findFirstOrThrow
   */
  export type CategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories findMany
   */
  export type CategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoriesOrderByWithRelationInput | CategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * Categories create
   */
  export type CategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Categories.
     */
    data: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
  }


  /**
   * Categories createMany
   */
  export type CategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoriesCreateManyInput | CategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Categories update
   */
  export type CategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Categories.
     */
    data: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
    /**
     * Choose, which Categories to update.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories updateMany
   */
  export type CategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoriesUpdateManyMutationInput, CategoriesUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories upsert
   */
  export type CategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Categories to update in case it exists.
     */
    where: CategoriesWhereUniqueInput
    /**
     * In case the Categories found by the `where` argument doesn't exist, create a new Categories with this data.
     */
    create: XOR<CategoriesCreateInput, CategoriesUncheckedCreateInput>
    /**
     * In case the Categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriesUpdateInput, CategoriesUncheckedUpdateInput>
  }


  /**
   * Categories delete
   */
  export type CategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
    /**
     * Filter which Categories to delete.
     */
    where: CategoriesWhereUniqueInput
  }


  /**
   * Categories deleteMany
   */
  export type CategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoriesWhereInput
  }


  /**
   * Categories.FeedbackQuestion
   */
  export type Categories$FeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    where?: FeedbackQuestionWhereInput
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    cursor?: FeedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * Categories.Questions
   */
  export type Categories$QuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    where?: QuestionsWhereInput
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    cursor?: QuestionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * Categories without action
   */
  export type CategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categories
     */
    select?: CategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategoriesInclude<ExtArgs> | null
  }



  /**
   * Model Questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    categoryId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to aggregate.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type QuestionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionsWhereInput
    orderBy?: QuestionsOrderByWithAggregationInput | QuestionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: QuestionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id: number
    title: string | null
    description: string | null
    categoryId: number
    created_at: Date
    updated_at: Date
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends QuestionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type QuestionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    created_at?: boolean
    updated_at?: boolean
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    FeedbackQuestion?: boolean | Questions$FeedbackQuestionArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type QuestionsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type QuestionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoriesDefaultArgs<ExtArgs>
    FeedbackQuestion?: boolean | Questions$FeedbackQuestionArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $QuestionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Questions"
    objects: {
      category: Prisma.$CategoriesPayload<ExtArgs>
      FeedbackQuestion: Prisma.$FeedbackQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string | null
      description: string | null
      categoryId: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }


  type QuestionsGetPayload<S extends boolean | null | undefined | QuestionsDefaultArgs> = $Result.GetResult<Prisma.$QuestionsPayload, S>

  type QuestionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface QuestionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questions'], meta: { name: 'Questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {QuestionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsFindUniqueArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Questions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsFindFirstArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Questions.
     * @param {QuestionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends QuestionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsCreateArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {QuestionsCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const questions = await prisma.questions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuestionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {QuestionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends QuestionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsDeleteArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Questions.
     * @param {QuestionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsUpdateArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {QuestionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends QuestionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuestionsUpsertArgs<ExtArgs>>
    ): Prisma__QuestionsClient<$Result.GetResult<Prisma.$QuestionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionsCountArgs>(
      args?: Subset<T, QuestionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionsGroupByArgs['orderBy'] }
        : { orderBy?: QuestionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Questions model
   */
  readonly fields: QuestionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoriesDefaultArgs<ExtArgs>>): Prisma__CategoriesClient<$Result.GetResult<Prisma.$CategoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    FeedbackQuestion<T extends Questions$FeedbackQuestionArgs<ExtArgs> = {}>(args?: Subset<T, Questions$FeedbackQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Questions model
   */ 
  interface QuestionsFieldRefs {
    readonly id: FieldRef<"Questions", 'Int'>
    readonly title: FieldRef<"Questions", 'String'>
    readonly description: FieldRef<"Questions", 'String'>
    readonly categoryId: FieldRef<"Questions", 'Int'>
    readonly created_at: FieldRef<"Questions", 'DateTime'>
    readonly updated_at: FieldRef<"Questions", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Questions findUnique
   */
  export type QuestionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions findUniqueOrThrow
   */
  export type QuestionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions findFirst
   */
  export type QuestionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * Questions findFirstOrThrow
   */
  export type QuestionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * Questions findMany
   */
  export type QuestionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionsOrderByWithRelationInput | QuestionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * Questions create
   */
  export type QuestionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Questions.
     */
    data: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
  }


  /**
   * Questions createMany
   */
  export type QuestionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionsCreateManyInput | QuestionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Questions update
   */
  export type QuestionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Questions.
     */
    data: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
    /**
     * Choose, which Questions to update.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions updateMany
   */
  export type QuestionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionsUpdateManyMutationInput, QuestionsUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionsWhereInput
  }


  /**
   * Questions upsert
   */
  export type QuestionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Questions to update in case it exists.
     */
    where: QuestionsWhereUniqueInput
    /**
     * In case the Questions found by the `where` argument doesn't exist, create a new Questions with this data.
     */
    create: XOR<QuestionsCreateInput, QuestionsUncheckedCreateInput>
    /**
     * In case the Questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionsUpdateInput, QuestionsUncheckedUpdateInput>
  }


  /**
   * Questions delete
   */
  export type QuestionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
    /**
     * Filter which Questions to delete.
     */
    where: QuestionsWhereUniqueInput
  }


  /**
   * Questions deleteMany
   */
  export type QuestionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionsWhereInput
  }


  /**
   * Questions.FeedbackQuestion
   */
  export type Questions$FeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackQuestion
     */
    select?: FeedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackQuestionInclude<ExtArgs> | null
    where?: FeedbackQuestionWhereInput
    orderBy?: FeedbackQuestionOrderByWithRelationInput | FeedbackQuestionOrderByWithRelationInput[]
    cursor?: FeedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * Questions without action
   */
  export type QuestionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questions
     */
    select?: QuestionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestionsInclude<ExtArgs> | null
  }



  /**
   * Model Offices
   */

  export type AggregateOffices = {
    _count: OfficesCountAggregateOutputType | null
    _avg: OfficesAvgAggregateOutputType | null
    _sum: OfficesSumAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  export type OfficesAvgAggregateOutputType = {
    id: number | null
  }

  export type OfficesSumAggregateOutputType = {
    id: number | null
  }

  export type OfficesMinAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OfficesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OfficesCountAggregateOutputType = {
    id: number
    title: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OfficesAvgAggregateInputType = {
    id?: true
  }

  export type OfficesSumAggregateInputType = {
    id?: true
  }

  export type OfficesMinAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
  }

  export type OfficesMaxAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
  }

  export type OfficesCountAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OfficesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offices to aggregate.
     */
    where?: OfficesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficesOrderByWithRelationInput | OfficesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OfficesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Offices
    **/
    _count?: true | OfficesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfficesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfficesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficesMaxAggregateInputType
  }

  export type GetOfficesAggregateType<T extends OfficesAggregateArgs> = {
        [P in keyof T & keyof AggregateOffices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffices[P]>
      : GetScalarType<T[P], AggregateOffices[P]>
  }




  export type OfficesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OfficesWhereInput
    orderBy?: OfficesOrderByWithAggregationInput | OfficesOrderByWithAggregationInput[]
    by: OfficesScalarFieldEnum[] | OfficesScalarFieldEnum
    having?: OfficesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficesCountAggregateInputType | true
    _avg?: OfficesAvgAggregateInputType
    _sum?: OfficesSumAggregateInputType
    _min?: OfficesMinAggregateInputType
    _max?: OfficesMaxAggregateInputType
  }

  export type OfficesGroupByOutputType = {
    id: number
    title: string
    created_at: Date
    updated_at: Date
    _count: OfficesCountAggregateOutputType | null
    _avg: OfficesAvgAggregateOutputType | null
    _sum: OfficesSumAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  type GetOfficesGroupByPayload<T extends OfficesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfficesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficesGroupByOutputType[P]>
            : GetScalarType<T[P], OfficesGroupByOutputType[P]>
        }
      >
    >


  export type OfficesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    created_at?: boolean
    updated_at?: boolean
    ServiceFeedback?: boolean | Offices$ServiceFeedbackArgs<ExtArgs>
    Services?: boolean | Offices$ServicesArgs<ExtArgs>
    users?: boolean | Offices$usersArgs<ExtArgs>
    _count?: boolean | OfficesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offices"]>

  export type OfficesSelectScalar = {
    id?: boolean
    title?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OfficesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | Offices$ServiceFeedbackArgs<ExtArgs>
    Services?: boolean | Offices$ServicesArgs<ExtArgs>
    users?: boolean | Offices$usersArgs<ExtArgs>
    _count?: boolean | OfficesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OfficesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Offices"
    objects: {
      ServiceFeedback: Prisma.$ServiceFeedbackPayload<ExtArgs>[]
      Services: Prisma.$ServicesPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["offices"]>
    composites: {}
  }


  type OfficesGetPayload<S extends boolean | null | undefined | OfficesDefaultArgs> = $Result.GetResult<Prisma.$OfficesPayload, S>

  type OfficesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OfficesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OfficesCountAggregateInputType | true
    }

  export interface OfficesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Offices'], meta: { name: 'Offices' } }
    /**
     * Find zero or one Offices that matches the filter.
     * @param {OfficesFindUniqueArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OfficesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesFindUniqueArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Offices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OfficesFindUniqueOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OfficesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesFindFirstArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OfficesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesFindFirstArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Offices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesFindFirstOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OfficesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offices
     * const offices = await prisma.offices.findMany()
     * 
     * // Get first 10 Offices
     * const offices = await prisma.offices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const officesWithIdOnly = await prisma.offices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OfficesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Offices.
     * @param {OfficesCreateArgs} args - Arguments to create a Offices.
     * @example
     * // Create one Offices
     * const Offices = await prisma.offices.create({
     *   data: {
     *     // ... data to create a Offices
     *   }
     * })
     * 
    **/
    create<T extends OfficesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesCreateArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Offices.
     *     @param {OfficesCreateManyArgs} args - Arguments to create many Offices.
     *     @example
     *     // Create many Offices
     *     const offices = await prisma.offices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OfficesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Offices.
     * @param {OfficesDeleteArgs} args - Arguments to delete one Offices.
     * @example
     * // Delete one Offices
     * const Offices = await prisma.offices.delete({
     *   where: {
     *     // ... filter to delete one Offices
     *   }
     * })
     * 
    **/
    delete<T extends OfficesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesDeleteArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Offices.
     * @param {OfficesUpdateArgs} args - Arguments to update one Offices.
     * @example
     * // Update one Offices
     * const offices = await prisma.offices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OfficesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesUpdateArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Offices.
     * @param {OfficesDeleteManyArgs} args - Arguments to filter Offices to delete.
     * @example
     * // Delete a few Offices
     * const { count } = await prisma.offices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OfficesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OfficesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offices
     * const offices = await prisma.offices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OfficesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offices.
     * @param {OfficesUpsertArgs} args - Arguments to update or create a Offices.
     * @example
     * // Update or create a Offices
     * const offices = await prisma.offices.upsert({
     *   create: {
     *     // ... data to create a Offices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offices we want to update
     *   }
     * })
    **/
    upsert<T extends OfficesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OfficesUpsertArgs<ExtArgs>>
    ): Prisma__OfficesClient<$Result.GetResult<Prisma.$OfficesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesCountArgs} args - Arguments to filter Offices to count.
     * @example
     * // Count the number of Offices
     * const count = await prisma.offices.count({
     *   where: {
     *     // ... the filter for the Offices we want to count
     *   }
     * })
    **/
    count<T extends OfficesCountArgs>(
      args?: Subset<T, OfficesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficesAggregateArgs>(args: Subset<T, OfficesAggregateArgs>): Prisma.PrismaPromise<GetOfficesAggregateType<T>>

    /**
     * Group by Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OfficesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OfficesGroupByArgs['orderBy'] }
        : { orderBy?: OfficesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OfficesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Offices model
   */
  readonly fields: OfficesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Offices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OfficesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ServiceFeedback<T extends Offices$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, Offices$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServiceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends Offices$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, Offices$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Offices$usersArgs<ExtArgs> = {}>(args?: Subset<T, Offices$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Offices model
   */ 
  interface OfficesFieldRefs {
    readonly id: FieldRef<"Offices", 'Int'>
    readonly title: FieldRef<"Offices", 'String'>
    readonly created_at: FieldRef<"Offices", 'DateTime'>
    readonly updated_at: FieldRef<"Offices", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Offices findUnique
   */
  export type OfficesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where: OfficesWhereUniqueInput
  }


  /**
   * Offices findUniqueOrThrow
   */
  export type OfficesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where: OfficesWhereUniqueInput
  }


  /**
   * Offices findFirst
   */
  export type OfficesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where?: OfficesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficesOrderByWithRelationInput | OfficesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offices.
     */
    cursor?: OfficesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offices.
     */
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * Offices findFirstOrThrow
   */
  export type OfficesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where?: OfficesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficesOrderByWithRelationInput | OfficesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Offices.
     */
    cursor?: OfficesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Offices.
     */
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * Offices findMany
   */
  export type OfficesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter, which Offices to fetch.
     */
    where?: OfficesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Offices to fetch.
     */
    orderBy?: OfficesOrderByWithRelationInput | OfficesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Offices.
     */
    cursor?: OfficesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Offices.
     */
    skip?: number
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * Offices create
   */
  export type OfficesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * The data needed to create a Offices.
     */
    data: XOR<OfficesCreateInput, OfficesUncheckedCreateInput>
  }


  /**
   * Offices createMany
   */
  export type OfficesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Offices.
     */
    data: OfficesCreateManyInput | OfficesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Offices update
   */
  export type OfficesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * The data needed to update a Offices.
     */
    data: XOR<OfficesUpdateInput, OfficesUncheckedUpdateInput>
    /**
     * Choose, which Offices to update.
     */
    where: OfficesWhereUniqueInput
  }


  /**
   * Offices updateMany
   */
  export type OfficesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Offices.
     */
    data: XOR<OfficesUpdateManyMutationInput, OfficesUncheckedUpdateManyInput>
    /**
     * Filter which Offices to update
     */
    where?: OfficesWhereInput
  }


  /**
   * Offices upsert
   */
  export type OfficesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * The filter to search for the Offices to update in case it exists.
     */
    where: OfficesWhereUniqueInput
    /**
     * In case the Offices found by the `where` argument doesn't exist, create a new Offices with this data.
     */
    create: XOR<OfficesCreateInput, OfficesUncheckedCreateInput>
    /**
     * In case the Offices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OfficesUpdateInput, OfficesUncheckedUpdateInput>
  }


  /**
   * Offices delete
   */
  export type OfficesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
    /**
     * Filter which Offices to delete.
     */
    where: OfficesWhereUniqueInput
  }


  /**
   * Offices deleteMany
   */
  export type OfficesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Offices to delete
     */
    where?: OfficesWhereInput
  }


  /**
   * Offices.ServiceFeedback
   */
  export type Offices$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedback
     */
    select?: ServiceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServiceFeedbackInclude<ExtArgs> | null
    where?: ServiceFeedbackWhereInput
    orderBy?: ServiceFeedbackOrderByWithRelationInput | ServiceFeedbackOrderByWithRelationInput[]
    cursor?: ServiceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * Offices.Services
   */
  export type Offices$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    where?: ServicesWhereInput
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    cursor?: ServicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Offices.users
   */
  export type Offices$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Offices without action
   */
  export type OfficesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Offices
     */
    select?: OfficesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OfficesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    uid: 'uid',
    username: 'username',
    password: 'password',
    role: 'role',
    officeName: 'officeName',
    officeId: 'officeId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SubmittersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    ageId: 'ageId',
    specAge: 'specAge',
    clientTypeId: 'clientTypeId',
    sex: 'sex'
  };

  export type SubmittersScalarFieldEnum = (typeof SubmittersScalarFieldEnum)[keyof typeof SubmittersScalarFieldEnum]


  export const AgeScalarFieldEnum: {
    id: 'id',
    description: 'description'
  };

  export type AgeScalarFieldEnum = (typeof AgeScalarFieldEnum)[keyof typeof AgeScalarFieldEnum]


  export const ServiceFeedbackScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    submitterId: 'submitterId',
    submittername: 'submittername',
    serviceDesc: 'serviceDesc',
    serviceId: 'serviceId',
    otherService: 'otherService',
    typeId: 'typeId',
    ageBracketId: 'ageBracketId',
    specificAge: 'specificAge',
    serviceKindId: 'serviceKindId',
    serviceKindDescription: 'serviceKindDescription',
    relatedClientType: 'relatedClientType',
    ageBracket: 'ageBracket',
    officeId: 'officeId',
    officeName: 'officeName',
    consent: 'consent',
    awareCC: 'awareCC',
    seeCC: 'seeCC',
    useCC: 'useCC',
    overallComment: 'overallComment',
    averageRating: 'averageRating',
    responsiveness: 'responsiveness',
    reliability: 'reliability',
    accessAndFacilities: 'accessAndFacilities',
    communication: 'communication',
    costs: 'costs',
    integrity: 'integrity',
    assurance: 'assurance',
    outcome: 'outcome',
    uniqueIdentifier: 'uniqueIdentifier',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServiceFeedbackScalarFieldEnum = (typeof ServiceFeedbackScalarFieldEnum)[keyof typeof ServiceFeedbackScalarFieldEnum]


  export const ClientTypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type ClientTypeScalarFieldEnum = (typeof ClientTypeScalarFieldEnum)[keyof typeof ClientTypeScalarFieldEnum]


  export const FeedbackQuestionScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    questionId: 'questionId',
    rating: 'rating',
    serviceFeedbackId: 'serviceFeedbackId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FeedbackQuestionScalarFieldEnum = (typeof FeedbackQuestionScalarFieldEnum)[keyof typeof FeedbackQuestionScalarFieldEnum]


  export const ServicesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    relatedOfficeId: 'relatedOfficeId',
    serviceKindId: 'serviceKindId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServicesScalarFieldEnum = (typeof ServicesScalarFieldEnum)[keyof typeof ServicesScalarFieldEnum]


  export const ServiceKindScalarFieldEnum: {
    id: 'id',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServiceKindScalarFieldEnum = (typeof ServiceKindScalarFieldEnum)[keyof typeof ServiceKindScalarFieldEnum]


  export const LogsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    serviceFeedbackId: 'serviceFeedbackId',
    created_at: 'created_at'
  };

  export type LogsScalarFieldEnum = (typeof LogsScalarFieldEnum)[keyof typeof LogsScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    qualityDimension: 'qualityDimension',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    categoryId: 'categoryId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const OfficesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OfficesScalarFieldEnum = (typeof OfficesScalarFieldEnum)[keyof typeof OfficesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    uid?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
    office?: XOR<OfficesNullableRelationFilter, OfficesWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrderInput | SortOrder
    officeId?: SortOrderInput | SortOrder
    office?: OfficesOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    uid?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
    office?: XOR<OfficesNullableRelationFilter, OfficesWhereInput> | null
  }, "uid" | "username">

  export type usersOrderByWithAggregationInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrderInput | SortOrder
    officeId?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    uid?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
    officeName?: StringNullableWithAggregatesFilter<"users"> | string | null
    officeId?: IntNullableWithAggregatesFilter<"users"> | number | null
  }

  export type SubmittersWhereInput = {
    AND?: SubmittersWhereInput | SubmittersWhereInput[]
    OR?: SubmittersWhereInput[]
    NOT?: SubmittersWhereInput | SubmittersWhereInput[]
    id?: IntFilter<"Submitters"> | number
    name?: StringNullableFilter<"Submitters"> | string | null
    email?: StringFilter<"Submitters"> | string
    ageId?: IntNullableFilter<"Submitters"> | number | null
    specAge?: IntNullableFilter<"Submitters"> | number | null
    clientTypeId?: IntNullableFilter<"Submitters"> | number | null
    sex?: StringFilter<"Submitters"> | string
    age?: XOR<AgeNullableRelationFilter, AgeWhereInput> | null
    clientType?: XOR<ClientTypeNullableRelationFilter, ClientTypeWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Logs?: LogsListRelationFilter
  }

  export type SubmittersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    ageId?: SortOrderInput | SortOrder
    specAge?: SortOrderInput | SortOrder
    clientTypeId?: SortOrderInput | SortOrder
    sex?: SortOrder
    age?: AgeOrderByWithRelationInput
    clientType?: ClientTypeOrderByWithRelationInput
    serviceFeedbacks?: ServiceFeedbackOrderByRelationAggregateInput
    Logs?: LogsOrderByRelationAggregateInput
  }

  export type SubmittersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubmittersWhereInput | SubmittersWhereInput[]
    OR?: SubmittersWhereInput[]
    NOT?: SubmittersWhereInput | SubmittersWhereInput[]
    name?: StringNullableFilter<"Submitters"> | string | null
    email?: StringFilter<"Submitters"> | string
    ageId?: IntNullableFilter<"Submitters"> | number | null
    specAge?: IntNullableFilter<"Submitters"> | number | null
    clientTypeId?: IntNullableFilter<"Submitters"> | number | null
    sex?: StringFilter<"Submitters"> | string
    age?: XOR<AgeNullableRelationFilter, AgeWhereInput> | null
    clientType?: XOR<ClientTypeNullableRelationFilter, ClientTypeWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Logs?: LogsListRelationFilter
  }, "id">

  export type SubmittersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    ageId?: SortOrderInput | SortOrder
    specAge?: SortOrderInput | SortOrder
    clientTypeId?: SortOrderInput | SortOrder
    sex?: SortOrder
    _count?: SubmittersCountOrderByAggregateInput
    _avg?: SubmittersAvgOrderByAggregateInput
    _max?: SubmittersMaxOrderByAggregateInput
    _min?: SubmittersMinOrderByAggregateInput
    _sum?: SubmittersSumOrderByAggregateInput
  }

  export type SubmittersScalarWhereWithAggregatesInput = {
    AND?: SubmittersScalarWhereWithAggregatesInput | SubmittersScalarWhereWithAggregatesInput[]
    OR?: SubmittersScalarWhereWithAggregatesInput[]
    NOT?: SubmittersScalarWhereWithAggregatesInput | SubmittersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Submitters"> | number
    name?: StringNullableWithAggregatesFilter<"Submitters"> | string | null
    email?: StringWithAggregatesFilter<"Submitters"> | string
    ageId?: IntNullableWithAggregatesFilter<"Submitters"> | number | null
    specAge?: IntNullableWithAggregatesFilter<"Submitters"> | number | null
    clientTypeId?: IntNullableWithAggregatesFilter<"Submitters"> | number | null
    sex?: StringWithAggregatesFilter<"Submitters"> | string
  }

  export type AgeWhereInput = {
    AND?: AgeWhereInput | AgeWhereInput[]
    OR?: AgeWhereInput[]
    NOT?: AgeWhereInput | AgeWhereInput[]
    id?: IntFilter<"Age"> | number
    description?: StringFilter<"Age"> | string
    Submitters?: SubmittersListRelationFilter
    ServiceFeedback?: ServiceFeedbackListRelationFilter
  }

  export type AgeOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    Submitters?: SubmittersOrderByRelationAggregateInput
    ServiceFeedback?: ServiceFeedbackOrderByRelationAggregateInput
  }

  export type AgeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AgeWhereInput | AgeWhereInput[]
    OR?: AgeWhereInput[]
    NOT?: AgeWhereInput | AgeWhereInput[]
    description?: StringFilter<"Age"> | string
    Submitters?: SubmittersListRelationFilter
    ServiceFeedback?: ServiceFeedbackListRelationFilter
  }, "id">

  export type AgeOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    _count?: AgeCountOrderByAggregateInput
    _avg?: AgeAvgOrderByAggregateInput
    _max?: AgeMaxOrderByAggregateInput
    _min?: AgeMinOrderByAggregateInput
    _sum?: AgeSumOrderByAggregateInput
  }

  export type AgeScalarWhereWithAggregatesInput = {
    AND?: AgeScalarWhereWithAggregatesInput | AgeScalarWhereWithAggregatesInput[]
    OR?: AgeScalarWhereWithAggregatesInput[]
    NOT?: AgeScalarWhereWithAggregatesInput | AgeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Age"> | number
    description?: StringWithAggregatesFilter<"Age"> | string
  }

  export type ServiceFeedbackWhereInput = {
    AND?: ServiceFeedbackWhereInput | ServiceFeedbackWhereInput[]
    OR?: ServiceFeedbackWhereInput[]
    NOT?: ServiceFeedbackWhereInput | ServiceFeedbackWhereInput[]
    id?: IntFilter<"ServiceFeedback"> | number
    startTime?: DateTimeNullableFilter<"ServiceFeedback"> | Date | string | null
    submitterId?: IntFilter<"ServiceFeedback"> | number
    submittername?: StringFilter<"ServiceFeedback"> | string
    serviceDesc?: StringNullableFilter<"ServiceFeedback"> | string | null
    serviceId?: IntFilter<"ServiceFeedback"> | number
    otherService?: StringNullableFilter<"ServiceFeedback"> | string | null
    typeId?: IntNullableFilter<"ServiceFeedback"> | number | null
    ageBracketId?: IntNullableFilter<"ServiceFeedback"> | number | null
    specificAge?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"ServiceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"ServiceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"ServiceFeedback"> | string | null
    officeId?: IntFilter<"ServiceFeedback"> | number
    officeName?: StringNullableFilter<"ServiceFeedback"> | string | null
    consent?: StringNullableFilter<"ServiceFeedback"> | string | null
    awareCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    seeCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    useCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    overallComment?: StringNullableFilter<"ServiceFeedback"> | string | null
    averageRating?: FloatFilter<"ServiceFeedback"> | number
    responsiveness?: IntFilter<"ServiceFeedback"> | number
    reliability?: IntFilter<"ServiceFeedback"> | number
    accessAndFacilities?: IntFilter<"ServiceFeedback"> | number
    communication?: IntFilter<"ServiceFeedback"> | number
    costs?: IntFilter<"ServiceFeedback"> | number
    integrity?: IntFilter<"ServiceFeedback"> | number
    assurance?: IntFilter<"ServiceFeedback"> | number
    outcome?: IntFilter<"ServiceFeedback"> | number
    uniqueIdentifier?: StringFilter<"ServiceFeedback"> | string
    created_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
    submitter?: XOR<SubmittersRelationFilter, SubmittersWhereInput>
    service?: XOR<ServicesNullableRelationFilter, ServicesWhereInput> | null
    ClientType?: XOR<ClientTypeNullableRelationFilter, ClientTypeWhereInput> | null
    Age?: XOR<AgeNullableRelationFilter, AgeWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, ServiceKindWhereInput> | null
    officeVisited?: XOR<OfficesRelationFilter, OfficesWhereInput>
    feedbackQuestions?: FeedbackQuestionListRelationFilter
    logs?: LogsListRelationFilter
  }

  export type ServiceFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrderInput | SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    serviceDesc?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    otherService?: SortOrderInput | SortOrder
    typeId?: SortOrderInput | SortOrder
    ageBracketId?: SortOrderInput | SortOrder
    specificAge?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    serviceKindDescription?: SortOrderInput | SortOrder
    relatedClientType?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    officeId?: SortOrder
    officeName?: SortOrderInput | SortOrder
    consent?: SortOrderInput | SortOrder
    awareCC?: SortOrderInput | SortOrder
    seeCC?: SortOrderInput | SortOrder
    useCC?: SortOrderInput | SortOrder
    overallComment?: SortOrderInput | SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    submitter?: SubmittersOrderByWithRelationInput
    service?: ServicesOrderByWithRelationInput
    ClientType?: ClientTypeOrderByWithRelationInput
    Age?: AgeOrderByWithRelationInput
    serviceKind?: ServiceKindOrderByWithRelationInput
    officeVisited?: OfficesOrderByWithRelationInput
    feedbackQuestions?: FeedbackQuestionOrderByRelationAggregateInput
    logs?: LogsOrderByRelationAggregateInput
  }

  export type ServiceFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceFeedbackWhereInput | ServiceFeedbackWhereInput[]
    OR?: ServiceFeedbackWhereInput[]
    NOT?: ServiceFeedbackWhereInput | ServiceFeedbackWhereInput[]
    startTime?: DateTimeNullableFilter<"ServiceFeedback"> | Date | string | null
    submitterId?: IntFilter<"ServiceFeedback"> | number
    submittername?: StringFilter<"ServiceFeedback"> | string
    serviceDesc?: StringNullableFilter<"ServiceFeedback"> | string | null
    serviceId?: IntFilter<"ServiceFeedback"> | number
    otherService?: StringNullableFilter<"ServiceFeedback"> | string | null
    typeId?: IntNullableFilter<"ServiceFeedback"> | number | null
    ageBracketId?: IntNullableFilter<"ServiceFeedback"> | number | null
    specificAge?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"ServiceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"ServiceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"ServiceFeedback"> | string | null
    officeId?: IntFilter<"ServiceFeedback"> | number
    officeName?: StringNullableFilter<"ServiceFeedback"> | string | null
    consent?: StringNullableFilter<"ServiceFeedback"> | string | null
    awareCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    seeCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    useCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    overallComment?: StringNullableFilter<"ServiceFeedback"> | string | null
    averageRating?: FloatFilter<"ServiceFeedback"> | number
    responsiveness?: IntFilter<"ServiceFeedback"> | number
    reliability?: IntFilter<"ServiceFeedback"> | number
    accessAndFacilities?: IntFilter<"ServiceFeedback"> | number
    communication?: IntFilter<"ServiceFeedback"> | number
    costs?: IntFilter<"ServiceFeedback"> | number
    integrity?: IntFilter<"ServiceFeedback"> | number
    assurance?: IntFilter<"ServiceFeedback"> | number
    outcome?: IntFilter<"ServiceFeedback"> | number
    uniqueIdentifier?: StringFilter<"ServiceFeedback"> | string
    created_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
    submitter?: XOR<SubmittersRelationFilter, SubmittersWhereInput>
    service?: XOR<ServicesNullableRelationFilter, ServicesWhereInput> | null
    ClientType?: XOR<ClientTypeNullableRelationFilter, ClientTypeWhereInput> | null
    Age?: XOR<AgeNullableRelationFilter, AgeWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, ServiceKindWhereInput> | null
    officeVisited?: XOR<OfficesRelationFilter, OfficesWhereInput>
    feedbackQuestions?: FeedbackQuestionListRelationFilter
    logs?: LogsListRelationFilter
  }, "id">

  export type ServiceFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrderInput | SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    serviceDesc?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    otherService?: SortOrderInput | SortOrder
    typeId?: SortOrderInput | SortOrder
    ageBracketId?: SortOrderInput | SortOrder
    specificAge?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    serviceKindDescription?: SortOrderInput | SortOrder
    relatedClientType?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    officeId?: SortOrder
    officeName?: SortOrderInput | SortOrder
    consent?: SortOrderInput | SortOrder
    awareCC?: SortOrderInput | SortOrder
    seeCC?: SortOrderInput | SortOrder
    useCC?: SortOrderInput | SortOrder
    overallComment?: SortOrderInput | SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ServiceFeedbackCountOrderByAggregateInput
    _avg?: ServiceFeedbackAvgOrderByAggregateInput
    _max?: ServiceFeedbackMaxOrderByAggregateInput
    _min?: ServiceFeedbackMinOrderByAggregateInput
    _sum?: ServiceFeedbackSumOrderByAggregateInput
  }

  export type ServiceFeedbackScalarWhereWithAggregatesInput = {
    AND?: ServiceFeedbackScalarWhereWithAggregatesInput | ServiceFeedbackScalarWhereWithAggregatesInput[]
    OR?: ServiceFeedbackScalarWhereWithAggregatesInput[]
    NOT?: ServiceFeedbackScalarWhereWithAggregatesInput | ServiceFeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    startTime?: DateTimeNullableWithAggregatesFilter<"ServiceFeedback"> | Date | string | null
    submitterId?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    submittername?: StringWithAggregatesFilter<"ServiceFeedback"> | string
    serviceDesc?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    serviceId?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    otherService?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    typeId?: IntNullableWithAggregatesFilter<"ServiceFeedback"> | number | null
    ageBracketId?: IntNullableWithAggregatesFilter<"ServiceFeedback"> | number | null
    specificAge?: IntNullableWithAggregatesFilter<"ServiceFeedback"> | number | null
    serviceKindId?: IntNullableWithAggregatesFilter<"ServiceFeedback"> | number | null
    serviceKindDescription?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    relatedClientType?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    ageBracket?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    officeId?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    officeName?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    consent?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    awareCC?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    seeCC?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    useCC?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    overallComment?: StringNullableWithAggregatesFilter<"ServiceFeedback"> | string | null
    averageRating?: FloatWithAggregatesFilter<"ServiceFeedback"> | number
    responsiveness?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    reliability?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    accessAndFacilities?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    communication?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    costs?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    integrity?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    assurance?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    outcome?: IntWithAggregatesFilter<"ServiceFeedback"> | number
    uniqueIdentifier?: StringWithAggregatesFilter<"ServiceFeedback"> | string
    created_at?: DateTimeWithAggregatesFilter<"ServiceFeedback"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ServiceFeedback"> | Date | string
  }

  export type ClientTypeWhereInput = {
    AND?: ClientTypeWhereInput | ClientTypeWhereInput[]
    OR?: ClientTypeWhereInput[]
    NOT?: ClientTypeWhereInput | ClientTypeWhereInput[]
    id?: IntFilter<"ClientType"> | number
    type?: StringFilter<"ClientType"> | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Submitters?: SubmittersListRelationFilter
  }

  export type ClientTypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    ServiceFeedback?: ServiceFeedbackOrderByRelationAggregateInput
    Submitters?: SubmittersOrderByRelationAggregateInput
  }

  export type ClientTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ClientTypeWhereInput | ClientTypeWhereInput[]
    OR?: ClientTypeWhereInput[]
    NOT?: ClientTypeWhereInput | ClientTypeWhereInput[]
    type?: StringFilter<"ClientType"> | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Submitters?: SubmittersListRelationFilter
  }, "id">

  export type ClientTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: ClientTypeCountOrderByAggregateInput
    _avg?: ClientTypeAvgOrderByAggregateInput
    _max?: ClientTypeMaxOrderByAggregateInput
    _min?: ClientTypeMinOrderByAggregateInput
    _sum?: ClientTypeSumOrderByAggregateInput
  }

  export type ClientTypeScalarWhereWithAggregatesInput = {
    AND?: ClientTypeScalarWhereWithAggregatesInput | ClientTypeScalarWhereWithAggregatesInput[]
    OR?: ClientTypeScalarWhereWithAggregatesInput[]
    NOT?: ClientTypeScalarWhereWithAggregatesInput | ClientTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ClientType"> | number
    type?: StringWithAggregatesFilter<"ClientType"> | string
  }

  export type FeedbackQuestionWhereInput = {
    AND?: FeedbackQuestionWhereInput | FeedbackQuestionWhereInput[]
    OR?: FeedbackQuestionWhereInput[]
    NOT?: FeedbackQuestionWhereInput | FeedbackQuestionWhereInput[]
    id?: IntFilter<"FeedbackQuestion"> | number
    categoryId?: IntFilter<"FeedbackQuestion"> | number
    questionId?: IntFilter<"FeedbackQuestion"> | number
    rating?: IntFilter<"FeedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"FeedbackQuestion"> | number
    created_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
    category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    question?: XOR<QuestionsRelationFilter, QuestionsWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, ServiceFeedbackWhereInput>
  }

  export type FeedbackQuestionOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category?: CategoriesOrderByWithRelationInput
    question?: QuestionsOrderByWithRelationInput
    serviceFeedback?: ServiceFeedbackOrderByWithRelationInput
  }

  export type FeedbackQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackQuestionWhereInput | FeedbackQuestionWhereInput[]
    OR?: FeedbackQuestionWhereInput[]
    NOT?: FeedbackQuestionWhereInput | FeedbackQuestionWhereInput[]
    categoryId?: IntFilter<"FeedbackQuestion"> | number
    questionId?: IntFilter<"FeedbackQuestion"> | number
    rating?: IntFilter<"FeedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"FeedbackQuestion"> | number
    created_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
    category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    question?: XOR<QuestionsRelationFilter, QuestionsWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, ServiceFeedbackWhereInput>
  }, "id">

  export type FeedbackQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: FeedbackQuestionCountOrderByAggregateInput
    _avg?: FeedbackQuestionAvgOrderByAggregateInput
    _max?: FeedbackQuestionMaxOrderByAggregateInput
    _min?: FeedbackQuestionMinOrderByAggregateInput
    _sum?: FeedbackQuestionSumOrderByAggregateInput
  }

  export type FeedbackQuestionScalarWhereWithAggregatesInput = {
    AND?: FeedbackQuestionScalarWhereWithAggregatesInput | FeedbackQuestionScalarWhereWithAggregatesInput[]
    OR?: FeedbackQuestionScalarWhereWithAggregatesInput[]
    NOT?: FeedbackQuestionScalarWhereWithAggregatesInput | FeedbackQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FeedbackQuestion"> | number
    categoryId?: IntWithAggregatesFilter<"FeedbackQuestion"> | number
    questionId?: IntWithAggregatesFilter<"FeedbackQuestion"> | number
    rating?: IntWithAggregatesFilter<"FeedbackQuestion"> | number
    serviceFeedbackId?: IntWithAggregatesFilter<"FeedbackQuestion"> | number
    created_at?: DateTimeWithAggregatesFilter<"FeedbackQuestion"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"FeedbackQuestion"> | Date | string
  }

  export type ServicesWhereInput = {
    AND?: ServicesWhereInput | ServicesWhereInput[]
    OR?: ServicesWhereInput[]
    NOT?: ServicesWhereInput | ServicesWhereInput[]
    id?: IntFilter<"Services"> | number
    title?: StringFilter<"Services"> | string
    relatedOfficeId?: IntNullableFilter<"Services"> | number | null
    serviceKindId?: IntNullableFilter<"Services"> | number | null
    created_at?: DateTimeFilter<"Services"> | Date | string
    updated_at?: DateTimeFilter<"Services"> | Date | string
    office?: XOR<OfficesNullableRelationFilter, OfficesWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, ServiceKindWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
  }

  export type ServicesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    office?: OfficesOrderByWithRelationInput
    serviceKind?: ServiceKindOrderByWithRelationInput
    serviceFeedbacks?: ServiceFeedbackOrderByRelationAggregateInput
  }

  export type ServicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServicesWhereInput | ServicesWhereInput[]
    OR?: ServicesWhereInput[]
    NOT?: ServicesWhereInput | ServicesWhereInput[]
    title?: StringFilter<"Services"> | string
    relatedOfficeId?: IntNullableFilter<"Services"> | number | null
    serviceKindId?: IntNullableFilter<"Services"> | number | null
    created_at?: DateTimeFilter<"Services"> | Date | string
    updated_at?: DateTimeFilter<"Services"> | Date | string
    office?: XOR<OfficesNullableRelationFilter, OfficesWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, ServiceKindWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
  }, "id">

  export type ServicesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ServicesCountOrderByAggregateInput
    _avg?: ServicesAvgOrderByAggregateInput
    _max?: ServicesMaxOrderByAggregateInput
    _min?: ServicesMinOrderByAggregateInput
    _sum?: ServicesSumOrderByAggregateInput
  }

  export type ServicesScalarWhereWithAggregatesInput = {
    AND?: ServicesScalarWhereWithAggregatesInput | ServicesScalarWhereWithAggregatesInput[]
    OR?: ServicesScalarWhereWithAggregatesInput[]
    NOT?: ServicesScalarWhereWithAggregatesInput | ServicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Services"> | number
    title?: StringWithAggregatesFilter<"Services"> | string
    relatedOfficeId?: IntNullableWithAggregatesFilter<"Services"> | number | null
    serviceKindId?: IntNullableWithAggregatesFilter<"Services"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"Services"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Services"> | Date | string
  }

  export type ServiceKindWhereInput = {
    AND?: ServiceKindWhereInput | ServiceKindWhereInput[]
    OR?: ServiceKindWhereInput[]
    NOT?: ServiceKindWhereInput | ServiceKindWhereInput[]
    id?: IntFilter<"ServiceKind"> | number
    description?: StringNullableFilter<"ServiceKind"> | string | null
    created_at?: DateTimeFilter<"ServiceKind"> | Date | string
    updated_at?: DateTimeFilter<"ServiceKind"> | Date | string
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
  }

  export type ServiceKindOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    serviceFeedbacks?: ServiceFeedbackOrderByRelationAggregateInput
    Services?: ServicesOrderByRelationAggregateInput
  }

  export type ServiceKindWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ServiceKindWhereInput | ServiceKindWhereInput[]
    OR?: ServiceKindWhereInput[]
    NOT?: ServiceKindWhereInput | ServiceKindWhereInput[]
    description?: StringNullableFilter<"ServiceKind"> | string | null
    created_at?: DateTimeFilter<"ServiceKind"> | Date | string
    updated_at?: DateTimeFilter<"ServiceKind"> | Date | string
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
  }, "id">

  export type ServiceKindOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ServiceKindCountOrderByAggregateInput
    _avg?: ServiceKindAvgOrderByAggregateInput
    _max?: ServiceKindMaxOrderByAggregateInput
    _min?: ServiceKindMinOrderByAggregateInput
    _sum?: ServiceKindSumOrderByAggregateInput
  }

  export type ServiceKindScalarWhereWithAggregatesInput = {
    AND?: ServiceKindScalarWhereWithAggregatesInput | ServiceKindScalarWhereWithAggregatesInput[]
    OR?: ServiceKindScalarWhereWithAggregatesInput[]
    NOT?: ServiceKindScalarWhereWithAggregatesInput | ServiceKindScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ServiceKind"> | number
    description?: StringNullableWithAggregatesFilter<"ServiceKind"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"ServiceKind"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"ServiceKind"> | Date | string
  }

  export type LogsWhereInput = {
    AND?: LogsWhereInput | LogsWhereInput[]
    OR?: LogsWhereInput[]
    NOT?: LogsWhereInput | LogsWhereInput[]
    id?: IntFilter<"Logs"> | number
    userId?: IntFilter<"Logs"> | number
    serviceFeedbackId?: IntFilter<"Logs"> | number
    created_at?: DateTimeFilter<"Logs"> | Date | string
    user?: XOR<SubmittersRelationFilter, SubmittersWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, ServiceFeedbackWhereInput>
  }

  export type LogsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    user?: SubmittersOrderByWithRelationInput
    serviceFeedback?: ServiceFeedbackOrderByWithRelationInput
  }

  export type LogsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LogsWhereInput | LogsWhereInput[]
    OR?: LogsWhereInput[]
    NOT?: LogsWhereInput | LogsWhereInput[]
    userId?: IntFilter<"Logs"> | number
    serviceFeedbackId?: IntFilter<"Logs"> | number
    created_at?: DateTimeFilter<"Logs"> | Date | string
    user?: XOR<SubmittersRelationFilter, SubmittersWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, ServiceFeedbackWhereInput>
  }, "id">

  export type LogsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    _count?: LogsCountOrderByAggregateInput
    _avg?: LogsAvgOrderByAggregateInput
    _max?: LogsMaxOrderByAggregateInput
    _min?: LogsMinOrderByAggregateInput
    _sum?: LogsSumOrderByAggregateInput
  }

  export type LogsScalarWhereWithAggregatesInput = {
    AND?: LogsScalarWhereWithAggregatesInput | LogsScalarWhereWithAggregatesInput[]
    OR?: LogsScalarWhereWithAggregatesInput[]
    NOT?: LogsScalarWhereWithAggregatesInput | LogsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Logs"> | number
    userId?: IntWithAggregatesFilter<"Logs"> | number
    serviceFeedbackId?: IntWithAggregatesFilter<"Logs"> | number
    created_at?: DateTimeWithAggregatesFilter<"Logs"> | Date | string
  }

  export type CategoriesWhereInput = {
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    id?: IntFilter<"Categories"> | number
    title?: StringFilter<"Categories"> | string
    qualityDimension?: StringFilter<"Categories"> | string
    created_at?: DateTimeFilter<"Categories"> | Date | string
    updated_at?: DateTimeFilter<"Categories"> | Date | string
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
    Questions?: QuestionsListRelationFilter
  }

  export type CategoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    FeedbackQuestion?: FeedbackQuestionOrderByRelationAggregateInput
    Questions?: QuestionsOrderByRelationAggregateInput
  }

  export type CategoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoriesWhereInput | CategoriesWhereInput[]
    OR?: CategoriesWhereInput[]
    NOT?: CategoriesWhereInput | CategoriesWhereInput[]
    title?: StringFilter<"Categories"> | string
    qualityDimension?: StringFilter<"Categories"> | string
    created_at?: DateTimeFilter<"Categories"> | Date | string
    updated_at?: DateTimeFilter<"Categories"> | Date | string
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
    Questions?: QuestionsListRelationFilter
  }, "id">

  export type CategoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CategoriesCountOrderByAggregateInput
    _avg?: CategoriesAvgOrderByAggregateInput
    _max?: CategoriesMaxOrderByAggregateInput
    _min?: CategoriesMinOrderByAggregateInput
    _sum?: CategoriesSumOrderByAggregateInput
  }

  export type CategoriesScalarWhereWithAggregatesInput = {
    AND?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    OR?: CategoriesScalarWhereWithAggregatesInput[]
    NOT?: CategoriesScalarWhereWithAggregatesInput | CategoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Categories"> | number
    title?: StringWithAggregatesFilter<"Categories"> | string
    qualityDimension?: StringWithAggregatesFilter<"Categories"> | string
    created_at?: DateTimeWithAggregatesFilter<"Categories"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Categories"> | Date | string
  }

  export type QuestionsWhereInput = {
    AND?: QuestionsWhereInput | QuestionsWhereInput[]
    OR?: QuestionsWhereInput[]
    NOT?: QuestionsWhereInput | QuestionsWhereInput[]
    id?: IntFilter<"Questions"> | number
    title?: StringNullableFilter<"Questions"> | string | null
    description?: StringNullableFilter<"Questions"> | string | null
    categoryId?: IntFilter<"Questions"> | number
    created_at?: DateTimeFilter<"Questions"> | Date | string
    updated_at?: DateTimeFilter<"Questions"> | Date | string
    category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
  }

  export type QuestionsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category?: CategoriesOrderByWithRelationInput
    FeedbackQuestion?: FeedbackQuestionOrderByRelationAggregateInput
  }

  export type QuestionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    title?: string
    AND?: QuestionsWhereInput | QuestionsWhereInput[]
    OR?: QuestionsWhereInput[]
    NOT?: QuestionsWhereInput | QuestionsWhereInput[]
    description?: StringNullableFilter<"Questions"> | string | null
    categoryId?: IntFilter<"Questions"> | number
    created_at?: DateTimeFilter<"Questions"> | Date | string
    updated_at?: DateTimeFilter<"Questions"> | Date | string
    category?: XOR<CategoriesRelationFilter, CategoriesWhereInput>
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
  }, "id" | "title">

  export type QuestionsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: QuestionsCountOrderByAggregateInput
    _avg?: QuestionsAvgOrderByAggregateInput
    _max?: QuestionsMaxOrderByAggregateInput
    _min?: QuestionsMinOrderByAggregateInput
    _sum?: QuestionsSumOrderByAggregateInput
  }

  export type QuestionsScalarWhereWithAggregatesInput = {
    AND?: QuestionsScalarWhereWithAggregatesInput | QuestionsScalarWhereWithAggregatesInput[]
    OR?: QuestionsScalarWhereWithAggregatesInput[]
    NOT?: QuestionsScalarWhereWithAggregatesInput | QuestionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Questions"> | number
    title?: StringNullableWithAggregatesFilter<"Questions"> | string | null
    description?: StringNullableWithAggregatesFilter<"Questions"> | string | null
    categoryId?: IntWithAggregatesFilter<"Questions"> | number
    created_at?: DateTimeWithAggregatesFilter<"Questions"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Questions"> | Date | string
  }

  export type OfficesWhereInput = {
    AND?: OfficesWhereInput | OfficesWhereInput[]
    OR?: OfficesWhereInput[]
    NOT?: OfficesWhereInput | OfficesWhereInput[]
    id?: IntFilter<"Offices"> | number
    title?: StringFilter<"Offices"> | string
    created_at?: DateTimeFilter<"Offices"> | Date | string
    updated_at?: DateTimeFilter<"Offices"> | Date | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type OfficesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    ServiceFeedback?: ServiceFeedbackOrderByRelationAggregateInput
    Services?: ServicesOrderByRelationAggregateInput
    users?: usersOrderByRelationAggregateInput
  }

  export type OfficesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OfficesWhereInput | OfficesWhereInput[]
    OR?: OfficesWhereInput[]
    NOT?: OfficesWhereInput | OfficesWhereInput[]
    title?: StringFilter<"Offices"> | string
    created_at?: DateTimeFilter<"Offices"> | Date | string
    updated_at?: DateTimeFilter<"Offices"> | Date | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type OfficesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OfficesCountOrderByAggregateInput
    _avg?: OfficesAvgOrderByAggregateInput
    _max?: OfficesMaxOrderByAggregateInput
    _min?: OfficesMinOrderByAggregateInput
    _sum?: OfficesSumOrderByAggregateInput
  }

  export type OfficesScalarWhereWithAggregatesInput = {
    AND?: OfficesScalarWhereWithAggregatesInput | OfficesScalarWhereWithAggregatesInput[]
    OR?: OfficesScalarWhereWithAggregatesInput[]
    NOT?: OfficesScalarWhereWithAggregatesInput | OfficesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Offices"> | number
    title?: StringWithAggregatesFilter<"Offices"> | string
    created_at?: DateTimeWithAggregatesFilter<"Offices"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Offices"> | Date | string
  }

  export type usersCreateInput = {
    username: string
    password: string
    role: string
    officeName?: string | null
    office?: OfficesCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
    officeId?: number | null
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    office?: OfficesUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersCreateManyInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
    officeId?: number | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubmittersCreateInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    sex: string
    age?: AgeCreateNestedOneWithoutSubmittersInput
    clientType?: ClientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: LogsCreateNestedManyWithoutUserInput
  }

  export type SubmittersUncheckedCreateInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: LogsUncheckedCreateNestedManyWithoutUserInput
  }

  export type SubmittersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: AgeUpdateOneWithoutSubmittersNestedInput
    clientType?: ClientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubmittersCreateManyInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
  }

  export type SubmittersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type SubmittersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type AgeCreateInput = {
    id?: number
    description: string
    Submitters?: SubmittersCreateNestedManyWithoutAgeInput
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutAgeInput
  }

  export type AgeUncheckedCreateInput = {
    id?: number
    description: string
    Submitters?: SubmittersUncheckedCreateNestedManyWithoutAgeInput
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutAgeInput
  }

  export type AgeUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUpdateManyWithoutAgeNestedInput
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutAgeNestedInput
  }

  export type AgeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUncheckedUpdateManyWithoutAgeNestedInput
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type AgeCreateManyInput = {
    id?: number
    description: string
  }

  export type AgeUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type AgeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceFeedbackCreateInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUpdateInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackCreateManyInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServiceFeedbackUpdateManyMutationInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceFeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientTypeCreateInput = {
    id?: number
    type: string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutClientTypeInput
    Submitters?: SubmittersCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeUncheckedCreateInput = {
    id?: number
    type: string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput
    Submitters?: SubmittersUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutClientTypeNestedInput
    Submitters?: SubmittersUpdateManyWithoutClientTypeNestedInput
  }

  export type ClientTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput
    Submitters?: SubmittersUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type ClientTypeCreateManyInput = {
    id?: number
    type: string
  }

  export type ClientTypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ClientTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackQuestionCreateInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoriesCreateNestedOneWithoutFeedbackQuestionInput
    question: QuestionsCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: ServiceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type FeedbackQuestionUncheckedCreateInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    question?: QuestionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: ServiceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type FeedbackQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionCreateManyInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicesCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: OfficesCreateNestedOneWithoutServicesInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type ServicesUncheckedCreateInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServicesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: OfficesUpdateOneWithoutServicesNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServicesCreateManyInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceKindCreateInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutServiceKindInput
    Services?: ServicesCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindUncheckedCreateInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput
    Services?: ServicesUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutServiceKindNestedInput
    Services?: ServicesUpdateManyWithoutServiceKindNestedInput
  }

  export type ServiceKindUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput
    Services?: ServicesUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type ServiceKindCreateManyInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServiceKindUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceKindUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsCreateInput = {
    id?: number
    created_at?: Date | string
    user: SubmittersCreateNestedOneWithoutLogsInput
    serviceFeedback: ServiceFeedbackCreateNestedOneWithoutLogsInput
  }

  export type LogsUncheckedCreateInput = {
    id?: number
    userId: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type LogsUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: SubmittersUpdateOneRequiredWithoutLogsNestedInput
    serviceFeedback?: ServiceFeedbackUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsCreateManyInput = {
    id?: number
    userId: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type LogsUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriesCreateInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionCreateNestedManyWithoutCategoryInput
    Questions?: QuestionsCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput
    Questions?: QuestionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUpdateManyWithoutCategoryNestedInput
    Questions?: QuestionsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput
    Questions?: QuestionsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesCreateManyInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CategoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionsCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoriesCreateNestedOneWithoutQuestionsInput
    FeedbackQuestion?: FeedbackQuestionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUncheckedCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutQuestionsNestedInput
    FeedbackQuestion?: FeedbackQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsCreateManyInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionsUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficesCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    Services?: ServicesCreateNestedManyWithoutOfficeInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type OfficesUncheckedCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    Services?: ServicesUncheckedCreateNestedManyWithoutOfficeInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    Services?: ServicesUpdateManyWithoutOfficeNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type OfficesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    Services?: ServicesUncheckedUpdateManyWithoutOfficeNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type OfficesCreateManyInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type OfficesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OfficesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OfficesNullableRelationFilter = {
    is?: OfficesWhereInput | null
    isNot?: OfficesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersCountOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    uid?: SortOrder
    officeId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    uid?: SortOrder
    officeId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AgeNullableRelationFilter = {
    is?: AgeWhereInput | null
    isNot?: AgeWhereInput | null
  }

  export type ClientTypeNullableRelationFilter = {
    is?: ClientTypeWhereInput | null
    isNot?: ClientTypeWhereInput | null
  }

  export type ServiceFeedbackListRelationFilter = {
    every?: ServiceFeedbackWhereInput
    some?: ServiceFeedbackWhereInput
    none?: ServiceFeedbackWhereInput
  }

  export type LogsListRelationFilter = {
    every?: LogsWhereInput
    some?: LogsWhereInput
    none?: LogsWhereInput
  }

  export type ServiceFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmittersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type SubmittersAvgOrderByAggregateInput = {
    id?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
  }

  export type SubmittersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type SubmittersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type SubmittersSumOrderByAggregateInput = {
    id?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
  }

  export type SubmittersListRelationFilter = {
    every?: SubmittersWhereInput
    some?: SubmittersWhereInput
    none?: SubmittersWhereInput
  }

  export type SubmittersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AgeCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type AgeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AgeMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type AgeMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type AgeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SubmittersRelationFilter = {
    is?: SubmittersWhereInput
    isNot?: SubmittersWhereInput
  }

  export type ServicesNullableRelationFilter = {
    is?: ServicesWhereInput | null
    isNot?: ServicesWhereInput | null
  }

  export type ServiceKindNullableRelationFilter = {
    is?: ServiceKindWhereInput | null
    isNot?: ServiceKindWhereInput | null
  }

  export type OfficesRelationFilter = {
    is?: OfficesWhereInput
    isNot?: OfficesWhereInput
  }

  export type FeedbackQuestionListRelationFilter = {
    every?: FeedbackQuestionWhereInput
    some?: FeedbackQuestionWhereInput
    none?: FeedbackQuestionWhereInput
  }

  export type FeedbackQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceFeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    submitterId?: SortOrder
    serviceId?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    officeId?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
  }

  export type ServiceFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceFeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    submitterId?: SortOrder
    serviceId?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    officeId?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ClientTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type ClientTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ClientTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type ClientTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type ClientTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesRelationFilter = {
    is?: CategoriesWhereInput
    isNot?: CategoriesWhereInput
  }

  export type QuestionsRelationFilter = {
    is?: QuestionsWhereInput
    isNot?: QuestionsWhereInput
  }

  export type ServiceFeedbackRelationFilter = {
    is?: ServiceFeedbackWhereInput
    isNot?: ServiceFeedbackWhereInput
  }

  export type FeedbackQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FeedbackQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type FeedbackQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FeedbackQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FeedbackQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type ServicesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicesAvgOrderByAggregateInput = {
    id?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
  }

  export type ServicesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServicesSumOrderByAggregateInput = {
    id?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
  }

  export type ServicesListRelationFilter = {
    every?: ServicesWhereInput
    some?: ServicesWhereInput
    none?: ServicesWhereInput
  }

  export type ServicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceKindCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceKindAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ServiceKindMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceKindMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ServiceKindSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LogsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type LogsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type LogsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type LogsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type LogsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type QuestionsListRelationFilter = {
    every?: QuestionsWhereInput
    some?: QuestionsWhereInput
    none?: QuestionsWhereInput
  }

  export type QuestionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestionsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionsAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type QuestionsSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OfficesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OfficesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OfficesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OfficesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OfficesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OfficesCreateNestedOneWithoutUsersInput = {
    create?: XOR<OfficesCreateWithoutUsersInput, OfficesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutUsersInput
    connect?: OfficesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OfficesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OfficesCreateWithoutUsersInput, OfficesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutUsersInput
    upsert?: OfficesUpsertWithoutUsersInput
    disconnect?: OfficesWhereInput | boolean
    delete?: OfficesWhereInput | boolean
    connect?: OfficesWhereUniqueInput
    update?: XOR<XOR<OfficesUpdateToOneWithWhereWithoutUsersInput, OfficesUpdateWithoutUsersInput>, OfficesUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AgeCreateNestedOneWithoutSubmittersInput = {
    create?: XOR<AgeCreateWithoutSubmittersInput, AgeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: AgeCreateOrConnectWithoutSubmittersInput
    connect?: AgeWhereUniqueInput
  }

  export type ClientTypeCreateNestedOneWithoutSubmittersInput = {
    create?: XOR<ClientTypeCreateWithoutSubmittersInput, ClientTypeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: ClientTypeCreateOrConnectWithoutSubmittersInput
    connect?: ClientTypeWhereUniqueInput
  }

  export type ServiceFeedbackCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput> | ServiceFeedbackCreateWithoutSubmitterInput[] | ServiceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutSubmitterInput | ServiceFeedbackCreateOrConnectWithoutSubmitterInput[]
    createMany?: ServiceFeedbackCreateManySubmitterInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type LogsCreateNestedManyWithoutUserInput = {
    create?: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput> | LogsCreateWithoutUserInput[] | LogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutUserInput | LogsCreateOrConnectWithoutUserInput[]
    createMany?: LogsCreateManyUserInputEnvelope
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput> | ServiceFeedbackCreateWithoutSubmitterInput[] | ServiceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutSubmitterInput | ServiceFeedbackCreateOrConnectWithoutSubmitterInput[]
    createMany?: ServiceFeedbackCreateManySubmitterInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type LogsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput> | LogsCreateWithoutUserInput[] | LogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutUserInput | LogsCreateOrConnectWithoutUserInput[]
    createMany?: LogsCreateManyUserInputEnvelope
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
  }

  export type AgeUpdateOneWithoutSubmittersNestedInput = {
    create?: XOR<AgeCreateWithoutSubmittersInput, AgeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: AgeCreateOrConnectWithoutSubmittersInput
    upsert?: AgeUpsertWithoutSubmittersInput
    disconnect?: AgeWhereInput | boolean
    delete?: AgeWhereInput | boolean
    connect?: AgeWhereUniqueInput
    update?: XOR<XOR<AgeUpdateToOneWithWhereWithoutSubmittersInput, AgeUpdateWithoutSubmittersInput>, AgeUncheckedUpdateWithoutSubmittersInput>
  }

  export type ClientTypeUpdateOneWithoutSubmittersNestedInput = {
    create?: XOR<ClientTypeCreateWithoutSubmittersInput, ClientTypeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: ClientTypeCreateOrConnectWithoutSubmittersInput
    upsert?: ClientTypeUpsertWithoutSubmittersInput
    disconnect?: ClientTypeWhereInput | boolean
    delete?: ClientTypeWhereInput | boolean
    connect?: ClientTypeWhereUniqueInput
    update?: XOR<XOR<ClientTypeUpdateToOneWithWhereWithoutSubmittersInput, ClientTypeUpdateWithoutSubmittersInput>, ClientTypeUncheckedUpdateWithoutSubmittersInput>
  }

  export type ServiceFeedbackUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput> | ServiceFeedbackCreateWithoutSubmitterInput[] | ServiceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutSubmitterInput | ServiceFeedbackCreateOrConnectWithoutSubmitterInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput | ServiceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: ServiceFeedbackCreateManySubmitterInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput | ServiceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutSubmitterInput | ServiceFeedbackUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type LogsUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput> | LogsCreateWithoutUserInput[] | LogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutUserInput | LogsCreateOrConnectWithoutUserInput[]
    upsert?: LogsUpsertWithWhereUniqueWithoutUserInput | LogsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogsCreateManyUserInputEnvelope
    set?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    disconnect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    delete?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    update?: LogsUpdateWithWhereUniqueWithoutUserInput | LogsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogsUpdateManyWithWhereWithoutUserInput | LogsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogsScalarWhereInput | LogsScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput> | ServiceFeedbackCreateWithoutSubmitterInput[] | ServiceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutSubmitterInput | ServiceFeedbackCreateOrConnectWithoutSubmitterInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput | ServiceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: ServiceFeedbackCreateManySubmitterInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput | ServiceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutSubmitterInput | ServiceFeedbackUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type LogsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput> | LogsCreateWithoutUserInput[] | LogsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutUserInput | LogsCreateOrConnectWithoutUserInput[]
    upsert?: LogsUpsertWithWhereUniqueWithoutUserInput | LogsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LogsCreateManyUserInputEnvelope
    set?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    disconnect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    delete?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    update?: LogsUpdateWithWhereUniqueWithoutUserInput | LogsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LogsUpdateManyWithWhereWithoutUserInput | LogsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LogsScalarWhereInput | LogsScalarWhereInput[]
  }

  export type SubmittersCreateNestedManyWithoutAgeInput = {
    create?: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput> | SubmittersCreateWithoutAgeInput[] | SubmittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutAgeInput | SubmittersCreateOrConnectWithoutAgeInput[]
    createMany?: SubmittersCreateManyAgeInputEnvelope
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
  }

  export type ServiceFeedbackCreateNestedManyWithoutAgeInput = {
    create?: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput> | ServiceFeedbackCreateWithoutAgeInput[] | ServiceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutAgeInput | ServiceFeedbackCreateOrConnectWithoutAgeInput[]
    createMany?: ServiceFeedbackCreateManyAgeInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type SubmittersUncheckedCreateNestedManyWithoutAgeInput = {
    create?: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput> | SubmittersCreateWithoutAgeInput[] | SubmittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutAgeInput | SubmittersCreateOrConnectWithoutAgeInput[]
    createMany?: SubmittersCreateManyAgeInputEnvelope
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutAgeInput = {
    create?: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput> | ServiceFeedbackCreateWithoutAgeInput[] | ServiceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutAgeInput | ServiceFeedbackCreateOrConnectWithoutAgeInput[]
    createMany?: ServiceFeedbackCreateManyAgeInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type SubmittersUpdateManyWithoutAgeNestedInput = {
    create?: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput> | SubmittersCreateWithoutAgeInput[] | SubmittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutAgeInput | SubmittersCreateOrConnectWithoutAgeInput[]
    upsert?: SubmittersUpsertWithWhereUniqueWithoutAgeInput | SubmittersUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: SubmittersCreateManyAgeInputEnvelope
    set?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    disconnect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    delete?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    update?: SubmittersUpdateWithWhereUniqueWithoutAgeInput | SubmittersUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: SubmittersUpdateManyWithWhereWithoutAgeInput | SubmittersUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
  }

  export type ServiceFeedbackUpdateManyWithoutAgeNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput> | ServiceFeedbackCreateWithoutAgeInput[] | ServiceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutAgeInput | ServiceFeedbackCreateOrConnectWithoutAgeInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutAgeInput | ServiceFeedbackUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: ServiceFeedbackCreateManyAgeInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutAgeInput | ServiceFeedbackUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutAgeInput | ServiceFeedbackUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type SubmittersUncheckedUpdateManyWithoutAgeNestedInput = {
    create?: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput> | SubmittersCreateWithoutAgeInput[] | SubmittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutAgeInput | SubmittersCreateOrConnectWithoutAgeInput[]
    upsert?: SubmittersUpsertWithWhereUniqueWithoutAgeInput | SubmittersUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: SubmittersCreateManyAgeInputEnvelope
    set?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    disconnect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    delete?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    update?: SubmittersUpdateWithWhereUniqueWithoutAgeInput | SubmittersUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: SubmittersUpdateManyWithWhereWithoutAgeInput | SubmittersUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutAgeNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput> | ServiceFeedbackCreateWithoutAgeInput[] | ServiceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutAgeInput | ServiceFeedbackCreateOrConnectWithoutAgeInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutAgeInput | ServiceFeedbackUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: ServiceFeedbackCreateManyAgeInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutAgeInput | ServiceFeedbackUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutAgeInput | ServiceFeedbackUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type SubmittersCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<SubmittersCreateWithoutServiceFeedbacksInput, SubmittersUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: SubmittersCreateOrConnectWithoutServiceFeedbacksInput
    connect?: SubmittersWhereUniqueInput
  }

  export type ServicesCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<ServicesCreateWithoutServiceFeedbacksInput, ServicesUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceFeedbacksInput
    connect?: ServicesWhereUniqueInput
  }

  export type ClientTypeCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<ClientTypeCreateWithoutServiceFeedbackInput, ClientTypeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: ClientTypeCreateOrConnectWithoutServiceFeedbackInput
    connect?: ClientTypeWhereUniqueInput
  }

  export type AgeCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<AgeCreateWithoutServiceFeedbackInput, AgeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: AgeCreateOrConnectWithoutServiceFeedbackInput
    connect?: AgeWhereUniqueInput
  }

  export type ServiceKindCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<ServiceKindCreateWithoutServiceFeedbacksInput, ServiceKindUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: ServiceKindCreateOrConnectWithoutServiceFeedbacksInput
    connect?: ServiceKindWhereUniqueInput
  }

  export type OfficesCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<OfficesCreateWithoutServiceFeedbackInput, OfficesUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutServiceFeedbackInput
    connect?: OfficesWhereUniqueInput
  }

  export type FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | FeedbackQuestionCreateWithoutServiceFeedbackInput[] | FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: FeedbackQuestionCreateManyServiceFeedbackInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type LogsCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput> | LogsCreateWithoutServiceFeedbackInput[] | LogsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutServiceFeedbackInput | LogsCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: LogsCreateManyServiceFeedbackInputEnvelope
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
  }

  export type FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | FeedbackQuestionCreateWithoutServiceFeedbackInput[] | FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: FeedbackQuestionCreateManyServiceFeedbackInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput> | LogsCreateWithoutServiceFeedbackInput[] | LogsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutServiceFeedbackInput | LogsCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: LogsCreateManyServiceFeedbackInputEnvelope
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput = {
    create?: XOR<SubmittersCreateWithoutServiceFeedbacksInput, SubmittersUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: SubmittersCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: SubmittersUpsertWithoutServiceFeedbacksInput
    connect?: SubmittersWhereUniqueInput
    update?: XOR<XOR<SubmittersUpdateToOneWithWhereWithoutServiceFeedbacksInput, SubmittersUpdateWithoutServiceFeedbacksInput>, SubmittersUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type ServicesUpdateOneWithoutServiceFeedbacksNestedInput = {
    create?: XOR<ServicesCreateWithoutServiceFeedbacksInput, ServicesUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: ServicesUpsertWithoutServiceFeedbacksInput
    disconnect?: ServicesWhereInput | boolean
    delete?: ServicesWhereInput | boolean
    connect?: ServicesWhereUniqueInput
    update?: XOR<XOR<ServicesUpdateToOneWithWhereWithoutServiceFeedbacksInput, ServicesUpdateWithoutServiceFeedbacksInput>, ServicesUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type ClientTypeUpdateOneWithoutServiceFeedbackNestedInput = {
    create?: XOR<ClientTypeCreateWithoutServiceFeedbackInput, ClientTypeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: ClientTypeCreateOrConnectWithoutServiceFeedbackInput
    upsert?: ClientTypeUpsertWithoutServiceFeedbackInput
    disconnect?: ClientTypeWhereInput | boolean
    delete?: ClientTypeWhereInput | boolean
    connect?: ClientTypeWhereUniqueInput
    update?: XOR<XOR<ClientTypeUpdateToOneWithWhereWithoutServiceFeedbackInput, ClientTypeUpdateWithoutServiceFeedbackInput>, ClientTypeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type AgeUpdateOneWithoutServiceFeedbackNestedInput = {
    create?: XOR<AgeCreateWithoutServiceFeedbackInput, AgeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: AgeCreateOrConnectWithoutServiceFeedbackInput
    upsert?: AgeUpsertWithoutServiceFeedbackInput
    disconnect?: AgeWhereInput | boolean
    delete?: AgeWhereInput | boolean
    connect?: AgeWhereUniqueInput
    update?: XOR<XOR<AgeUpdateToOneWithWhereWithoutServiceFeedbackInput, AgeUpdateWithoutServiceFeedbackInput>, AgeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput = {
    create?: XOR<ServiceKindCreateWithoutServiceFeedbacksInput, ServiceKindUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: ServiceKindCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: ServiceKindUpsertWithoutServiceFeedbacksInput
    disconnect?: ServiceKindWhereInput | boolean
    delete?: ServiceKindWhereInput | boolean
    connect?: ServiceKindWhereUniqueInput
    update?: XOR<XOR<ServiceKindUpdateToOneWithWhereWithoutServiceFeedbacksInput, ServiceKindUpdateWithoutServiceFeedbacksInput>, ServiceKindUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput = {
    create?: XOR<OfficesCreateWithoutServiceFeedbackInput, OfficesUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutServiceFeedbackInput
    upsert?: OfficesUpsertWithoutServiceFeedbackInput
    connect?: OfficesWhereUniqueInput
    update?: XOR<XOR<OfficesUpdateToOneWithWhereWithoutServiceFeedbackInput, OfficesUpdateWithoutServiceFeedbackInput>, OfficesUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | FeedbackQuestionCreateWithoutServiceFeedbackInput[] | FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput | FeedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: FeedbackQuestionCreateManyServiceFeedbackInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput | FeedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput | FeedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type LogsUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput> | LogsCreateWithoutServiceFeedbackInput[] | LogsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutServiceFeedbackInput | LogsCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: LogsUpsertWithWhereUniqueWithoutServiceFeedbackInput | LogsUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: LogsCreateManyServiceFeedbackInputEnvelope
    set?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    disconnect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    delete?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    update?: LogsUpdateWithWhereUniqueWithoutServiceFeedbackInput | LogsUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: LogsUpdateManyWithWhereWithoutServiceFeedbackInput | LogsUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: LogsScalarWhereInput | LogsScalarWhereInput[]
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | FeedbackQuestionCreateWithoutServiceFeedbackInput[] | FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput | FeedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: FeedbackQuestionCreateManyServiceFeedbackInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput | FeedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput | FeedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput> | LogsCreateWithoutServiceFeedbackInput[] | LogsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: LogsCreateOrConnectWithoutServiceFeedbackInput | LogsCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: LogsUpsertWithWhereUniqueWithoutServiceFeedbackInput | LogsUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: LogsCreateManyServiceFeedbackInputEnvelope
    set?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    disconnect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    delete?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    connect?: LogsWhereUniqueInput | LogsWhereUniqueInput[]
    update?: LogsUpdateWithWhereUniqueWithoutServiceFeedbackInput | LogsUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: LogsUpdateManyWithWhereWithoutServiceFeedbackInput | LogsUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: LogsScalarWhereInput | LogsScalarWhereInput[]
  }

  export type ServiceFeedbackCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput> | ServiceFeedbackCreateWithoutClientTypeInput[] | ServiceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutClientTypeInput | ServiceFeedbackCreateOrConnectWithoutClientTypeInput[]
    createMany?: ServiceFeedbackCreateManyClientTypeInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type SubmittersCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput> | SubmittersCreateWithoutClientTypeInput[] | SubmittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutClientTypeInput | SubmittersCreateOrConnectWithoutClientTypeInput[]
    createMany?: SubmittersCreateManyClientTypeInputEnvelope
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput> | ServiceFeedbackCreateWithoutClientTypeInput[] | ServiceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutClientTypeInput | ServiceFeedbackCreateOrConnectWithoutClientTypeInput[]
    createMany?: ServiceFeedbackCreateManyClientTypeInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type SubmittersUncheckedCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput> | SubmittersCreateWithoutClientTypeInput[] | SubmittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutClientTypeInput | SubmittersCreateOrConnectWithoutClientTypeInput[]
    createMany?: SubmittersCreateManyClientTypeInputEnvelope
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
  }

  export type ServiceFeedbackUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput> | ServiceFeedbackCreateWithoutClientTypeInput[] | ServiceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutClientTypeInput | ServiceFeedbackCreateOrConnectWithoutClientTypeInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput | ServiceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: ServiceFeedbackCreateManyClientTypeInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput | ServiceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutClientTypeInput | ServiceFeedbackUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type SubmittersUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput> | SubmittersCreateWithoutClientTypeInput[] | SubmittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutClientTypeInput | SubmittersCreateOrConnectWithoutClientTypeInput[]
    upsert?: SubmittersUpsertWithWhereUniqueWithoutClientTypeInput | SubmittersUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: SubmittersCreateManyClientTypeInputEnvelope
    set?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    disconnect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    delete?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    update?: SubmittersUpdateWithWhereUniqueWithoutClientTypeInput | SubmittersUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: SubmittersUpdateManyWithWhereWithoutClientTypeInput | SubmittersUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput> | ServiceFeedbackCreateWithoutClientTypeInput[] | ServiceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutClientTypeInput | ServiceFeedbackCreateOrConnectWithoutClientTypeInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput | ServiceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: ServiceFeedbackCreateManyClientTypeInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput | ServiceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutClientTypeInput | ServiceFeedbackUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type SubmittersUncheckedUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput> | SubmittersCreateWithoutClientTypeInput[] | SubmittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: SubmittersCreateOrConnectWithoutClientTypeInput | SubmittersCreateOrConnectWithoutClientTypeInput[]
    upsert?: SubmittersUpsertWithWhereUniqueWithoutClientTypeInput | SubmittersUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: SubmittersCreateManyClientTypeInputEnvelope
    set?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    disconnect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    delete?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    connect?: SubmittersWhereUniqueInput | SubmittersWhereUniqueInput[]
    update?: SubmittersUpdateWithWhereUniqueWithoutClientTypeInput | SubmittersUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: SubmittersUpdateManyWithWhereWithoutClientTypeInput | SubmittersUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
  }

  export type CategoriesCreateNestedOneWithoutFeedbackQuestionInput = {
    create?: XOR<CategoriesCreateWithoutFeedbackQuestionInput, CategoriesUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutFeedbackQuestionInput
    connect?: CategoriesWhereUniqueInput
  }

  export type QuestionsCreateNestedOneWithoutFeedbackQuestionInput = {
    create?: XOR<QuestionsCreateWithoutFeedbackQuestionInput, QuestionsUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: QuestionsCreateOrConnectWithoutFeedbackQuestionInput
    connect?: QuestionsWhereUniqueInput
  }

  export type ServiceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput = {
    create?: XOR<ServiceFeedbackCreateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput
    connect?: ServiceFeedbackWhereUniqueInput
  }

  export type CategoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput = {
    create?: XOR<CategoriesCreateWithoutFeedbackQuestionInput, CategoriesUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutFeedbackQuestionInput
    upsert?: CategoriesUpsertWithoutFeedbackQuestionInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<XOR<CategoriesUpdateToOneWithWhereWithoutFeedbackQuestionInput, CategoriesUpdateWithoutFeedbackQuestionInput>, CategoriesUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type QuestionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput = {
    create?: XOR<QuestionsCreateWithoutFeedbackQuestionInput, QuestionsUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: QuestionsCreateOrConnectWithoutFeedbackQuestionInput
    upsert?: QuestionsUpsertWithoutFeedbackQuestionInput
    connect?: QuestionsWhereUniqueInput
    update?: XOR<XOR<QuestionsUpdateToOneWithWhereWithoutFeedbackQuestionInput, QuestionsUpdateWithoutFeedbackQuestionInput>, QuestionsUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type ServiceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput
    upsert?: ServiceFeedbackUpsertWithoutFeedbackQuestionsInput
    connect?: ServiceFeedbackWhereUniqueInput
    update?: XOR<XOR<ServiceFeedbackUpdateToOneWithWhereWithoutFeedbackQuestionsInput, ServiceFeedbackUpdateWithoutFeedbackQuestionsInput>, ServiceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
  }

  export type OfficesCreateNestedOneWithoutServicesInput = {
    create?: XOR<OfficesCreateWithoutServicesInput, OfficesUncheckedCreateWithoutServicesInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutServicesInput
    connect?: OfficesWhereUniqueInput
  }

  export type ServiceKindCreateNestedOneWithoutServicesInput = {
    create?: XOR<ServiceKindCreateWithoutServicesInput, ServiceKindUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceKindCreateOrConnectWithoutServicesInput
    connect?: ServiceKindWhereUniqueInput
  }

  export type ServiceFeedbackCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput> | ServiceFeedbackCreateWithoutServiceInput[] | ServiceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceInput | ServiceFeedbackCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceFeedbackCreateManyServiceInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput> | ServiceFeedbackCreateWithoutServiceInput[] | ServiceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceInput | ServiceFeedbackCreateOrConnectWithoutServiceInput[]
    createMany?: ServiceFeedbackCreateManyServiceInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type OfficesUpdateOneWithoutServicesNestedInput = {
    create?: XOR<OfficesCreateWithoutServicesInput, OfficesUncheckedCreateWithoutServicesInput>
    connectOrCreate?: OfficesCreateOrConnectWithoutServicesInput
    upsert?: OfficesUpsertWithoutServicesInput
    disconnect?: OfficesWhereInput | boolean
    delete?: OfficesWhereInput | boolean
    connect?: OfficesWhereUniqueInput
    update?: XOR<XOR<OfficesUpdateToOneWithWhereWithoutServicesInput, OfficesUpdateWithoutServicesInput>, OfficesUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceKindUpdateOneWithoutServicesNestedInput = {
    create?: XOR<ServiceKindCreateWithoutServicesInput, ServiceKindUncheckedCreateWithoutServicesInput>
    connectOrCreate?: ServiceKindCreateOrConnectWithoutServicesInput
    upsert?: ServiceKindUpsertWithoutServicesInput
    disconnect?: ServiceKindWhereInput | boolean
    delete?: ServiceKindWhereInput | boolean
    connect?: ServiceKindWhereUniqueInput
    update?: XOR<XOR<ServiceKindUpdateToOneWithWhereWithoutServicesInput, ServiceKindUpdateWithoutServicesInput>, ServiceKindUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceFeedbackUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput> | ServiceFeedbackCreateWithoutServiceInput[] | ServiceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceInput | ServiceFeedbackCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutServiceInput | ServiceFeedbackUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceFeedbackCreateManyServiceInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutServiceInput | ServiceFeedbackUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutServiceInput | ServiceFeedbackUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput> | ServiceFeedbackCreateWithoutServiceInput[] | ServiceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceInput | ServiceFeedbackCreateOrConnectWithoutServiceInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutServiceInput | ServiceFeedbackUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: ServiceFeedbackCreateManyServiceInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutServiceInput | ServiceFeedbackUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutServiceInput | ServiceFeedbackUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServiceFeedbackCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput> | ServiceFeedbackCreateWithoutServiceKindInput[] | ServiceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceKindInput | ServiceFeedbackCreateOrConnectWithoutServiceKindInput[]
    createMany?: ServiceFeedbackCreateManyServiceKindInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type ServicesCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput> | ServicesCreateWithoutServiceKindInput[] | ServicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceKindInput | ServicesCreateOrConnectWithoutServiceKindInput[]
    createMany?: ServicesCreateManyServiceKindInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput> | ServiceFeedbackCreateWithoutServiceKindInput[] | ServiceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceKindInput | ServiceFeedbackCreateOrConnectWithoutServiceKindInput[]
    createMany?: ServiceFeedbackCreateManyServiceKindInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type ServicesUncheckedCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput> | ServicesCreateWithoutServiceKindInput[] | ServicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceKindInput | ServicesCreateOrConnectWithoutServiceKindInput[]
    createMany?: ServicesCreateManyServiceKindInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type ServiceFeedbackUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput> | ServiceFeedbackCreateWithoutServiceKindInput[] | ServiceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceKindInput | ServiceFeedbackCreateOrConnectWithoutServiceKindInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput | ServiceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: ServiceFeedbackCreateManyServiceKindInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput | ServiceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutServiceKindInput | ServiceFeedbackUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServicesUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput> | ServicesCreateWithoutServiceKindInput[] | ServicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceKindInput | ServicesCreateOrConnectWithoutServiceKindInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutServiceKindInput | ServicesUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: ServicesCreateManyServiceKindInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutServiceKindInput | ServicesUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutServiceKindInput | ServicesUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput> | ServiceFeedbackCreateWithoutServiceKindInput[] | ServiceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutServiceKindInput | ServiceFeedbackCreateOrConnectWithoutServiceKindInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput | ServiceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: ServiceFeedbackCreateManyServiceKindInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput | ServiceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutServiceKindInput | ServiceFeedbackUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServicesUncheckedUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput> | ServicesCreateWithoutServiceKindInput[] | ServicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutServiceKindInput | ServicesCreateOrConnectWithoutServiceKindInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutServiceKindInput | ServicesUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: ServicesCreateManyServiceKindInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutServiceKindInput | ServicesUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutServiceKindInput | ServicesUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type SubmittersCreateNestedOneWithoutLogsInput = {
    create?: XOR<SubmittersCreateWithoutLogsInput, SubmittersUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SubmittersCreateOrConnectWithoutLogsInput
    connect?: SubmittersWhereUniqueInput
  }

  export type ServiceFeedbackCreateNestedOneWithoutLogsInput = {
    create?: XOR<ServiceFeedbackCreateWithoutLogsInput, ServiceFeedbackUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutLogsInput
    connect?: ServiceFeedbackWhereUniqueInput
  }

  export type SubmittersUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<SubmittersCreateWithoutLogsInput, SubmittersUncheckedCreateWithoutLogsInput>
    connectOrCreate?: SubmittersCreateOrConnectWithoutLogsInput
    upsert?: SubmittersUpsertWithoutLogsInput
    connect?: SubmittersWhereUniqueInput
    update?: XOR<XOR<SubmittersUpdateToOneWithWhereWithoutLogsInput, SubmittersUpdateWithoutLogsInput>, SubmittersUncheckedUpdateWithoutLogsInput>
  }

  export type ServiceFeedbackUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutLogsInput, ServiceFeedbackUncheckedCreateWithoutLogsInput>
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutLogsInput
    upsert?: ServiceFeedbackUpsertWithoutLogsInput
    connect?: ServiceFeedbackWhereUniqueInput
    update?: XOR<XOR<ServiceFeedbackUpdateToOneWithWhereWithoutLogsInput, ServiceFeedbackUpdateWithoutLogsInput>, ServiceFeedbackUncheckedUpdateWithoutLogsInput>
  }

  export type FeedbackQuestionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput> | FeedbackQuestionCreateWithoutCategoryInput[] | FeedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutCategoryInput | FeedbackQuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: FeedbackQuestionCreateManyCategoryInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type QuestionsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput> | QuestionsCreateWithoutCategoryInput[] | QuestionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutCategoryInput | QuestionsCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionsCreateManyCategoryInputEnvelope
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
  }

  export type FeedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput> | FeedbackQuestionCreateWithoutCategoryInput[] | FeedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutCategoryInput | FeedbackQuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: FeedbackQuestionCreateManyCategoryInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type QuestionsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput> | QuestionsCreateWithoutCategoryInput[] | QuestionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutCategoryInput | QuestionsCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionsCreateManyCategoryInputEnvelope
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
  }

  export type FeedbackQuestionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput> | FeedbackQuestionCreateWithoutCategoryInput[] | FeedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutCategoryInput | FeedbackQuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput | FeedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FeedbackQuestionCreateManyCategoryInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput | FeedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutCategoryInput | FeedbackQuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type QuestionsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput> | QuestionsCreateWithoutCategoryInput[] | QuestionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutCategoryInput | QuestionsCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionsUpsertWithWhereUniqueWithoutCategoryInput | QuestionsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionsCreateManyCategoryInputEnvelope
    set?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    disconnect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    delete?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    update?: QuestionsUpdateWithWhereUniqueWithoutCategoryInput | QuestionsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionsUpdateManyWithWhereWithoutCategoryInput | QuestionsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput> | FeedbackQuestionCreateWithoutCategoryInput[] | FeedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutCategoryInput | FeedbackQuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput | FeedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: FeedbackQuestionCreateManyCategoryInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput | FeedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutCategoryInput | FeedbackQuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type QuestionsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput> | QuestionsCreateWithoutCategoryInput[] | QuestionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionsCreateOrConnectWithoutCategoryInput | QuestionsCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionsUpsertWithWhereUniqueWithoutCategoryInput | QuestionsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionsCreateManyCategoryInputEnvelope
    set?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    disconnect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    delete?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    connect?: QuestionsWhereUniqueInput | QuestionsWhereUniqueInput[]
    update?: QuestionsUpdateWithWhereUniqueWithoutCategoryInput | QuestionsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionsUpdateManyWithWhereWithoutCategoryInput | QuestionsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
  }

  export type CategoriesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<CategoriesCreateWithoutQuestionsInput, CategoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutQuestionsInput
    connect?: CategoriesWhereUniqueInput
  }

  export type FeedbackQuestionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput> | FeedbackQuestionCreateWithoutQuestionInput[] | FeedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutQuestionInput | FeedbackQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: FeedbackQuestionCreateManyQuestionInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type FeedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput> | FeedbackQuestionCreateWithoutQuestionInput[] | FeedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutQuestionInput | FeedbackQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: FeedbackQuestionCreateManyQuestionInputEnvelope
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
  }

  export type CategoriesUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<CategoriesCreateWithoutQuestionsInput, CategoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CategoriesCreateOrConnectWithoutQuestionsInput
    upsert?: CategoriesUpsertWithoutQuestionsInput
    connect?: CategoriesWhereUniqueInput
    update?: XOR<XOR<CategoriesUpdateToOneWithWhereWithoutQuestionsInput, CategoriesUpdateWithoutQuestionsInput>, CategoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type FeedbackQuestionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput> | FeedbackQuestionCreateWithoutQuestionInput[] | FeedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutQuestionInput | FeedbackQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput | FeedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: FeedbackQuestionCreateManyQuestionInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput | FeedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutQuestionInput | FeedbackQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput> | FeedbackQuestionCreateWithoutQuestionInput[] | FeedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: FeedbackQuestionCreateOrConnectWithoutQuestionInput | FeedbackQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: FeedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput | FeedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: FeedbackQuestionCreateManyQuestionInputEnvelope
    set?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    disconnect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    delete?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    connect?: FeedbackQuestionWhereUniqueInput | FeedbackQuestionWhereUniqueInput[]
    update?: FeedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput | FeedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: FeedbackQuestionUpdateManyWithWhereWithoutQuestionInput | FeedbackQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
  }

  export type ServiceFeedbackCreateNestedManyWithoutOfficeVisitedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | ServiceFeedbackCreateWithoutOfficeVisitedInput[] | ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput | ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    createMany?: ServiceFeedbackCreateManyOfficeVisitedInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type ServicesCreateNestedManyWithoutOfficeInput = {
    create?: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput> | ServicesCreateWithoutOfficeInput[] | ServicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutOfficeInput | ServicesCreateOrConnectWithoutOfficeInput[]
    createMany?: ServicesCreateManyOfficeInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutOfficeInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type ServiceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | ServiceFeedbackCreateWithoutOfficeVisitedInput[] | ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput | ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    createMany?: ServiceFeedbackCreateManyOfficeVisitedInputEnvelope
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
  }

  export type ServicesUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput> | ServicesCreateWithoutOfficeInput[] | ServicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutOfficeInput | ServicesCreateOrConnectWithoutOfficeInput[]
    createMany?: ServicesCreateManyOfficeInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type ServiceFeedbackUpdateManyWithoutOfficeVisitedNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | ServiceFeedbackCreateWithoutOfficeVisitedInput[] | ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput | ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput | ServiceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput[]
    createMany?: ServiceFeedbackCreateManyOfficeVisitedInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput | ServiceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput | ServiceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServicesUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput> | ServicesCreateWithoutOfficeInput[] | ServicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutOfficeInput | ServicesCreateOrConnectWithoutOfficeInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutOfficeInput | ServicesUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: ServicesCreateManyOfficeInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutOfficeInput | ServicesUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutOfficeInput | ServicesUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type usersUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutOfficeInput | usersUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutOfficeInput | usersUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: usersUpdateManyWithWhereWithoutOfficeInput | usersUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput = {
    create?: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | ServiceFeedbackCreateWithoutOfficeVisitedInput[] | ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput | ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    upsert?: ServiceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput | ServiceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput[]
    createMany?: ServiceFeedbackCreateManyOfficeVisitedInputEnvelope
    set?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    disconnect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    delete?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    connect?: ServiceFeedbackWhereUniqueInput | ServiceFeedbackWhereUniqueInput[]
    update?: ServiceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput | ServiceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput[]
    updateMany?: ServiceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput | ServiceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput[]
    deleteMany?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
  }

  export type ServicesUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput> | ServicesCreateWithoutOfficeInput[] | ServicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutOfficeInput | ServicesCreateOrConnectWithoutOfficeInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutOfficeInput | ServicesUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: ServicesCreateManyOfficeInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutOfficeInput | ServicesUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutOfficeInput | ServicesUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutOfficeInput | usersUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutOfficeInput | usersUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: usersUpdateManyWithWhereWithoutOfficeInput | usersUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type OfficesCreateWithoutUsersInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    Services?: ServicesCreateNestedManyWithoutOfficeInput
  }

  export type OfficesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    Services?: ServicesUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficesCreateOrConnectWithoutUsersInput = {
    where: OfficesWhereUniqueInput
    create: XOR<OfficesCreateWithoutUsersInput, OfficesUncheckedCreateWithoutUsersInput>
  }

  export type OfficesUpsertWithoutUsersInput = {
    update: XOR<OfficesUpdateWithoutUsersInput, OfficesUncheckedUpdateWithoutUsersInput>
    create: XOR<OfficesCreateWithoutUsersInput, OfficesUncheckedCreateWithoutUsersInput>
    where?: OfficesWhereInput
  }

  export type OfficesUpdateToOneWithWhereWithoutUsersInput = {
    where?: OfficesWhereInput
    data: XOR<OfficesUpdateWithoutUsersInput, OfficesUncheckedUpdateWithoutUsersInput>
  }

  export type OfficesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    Services?: ServicesUpdateManyWithoutOfficeNestedInput
  }

  export type OfficesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    Services?: ServicesUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type AgeCreateWithoutSubmittersInput = {
    id?: number
    description: string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutAgeInput
  }

  export type AgeUncheckedCreateWithoutSubmittersInput = {
    id?: number
    description: string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutAgeInput
  }

  export type AgeCreateOrConnectWithoutSubmittersInput = {
    where: AgeWhereUniqueInput
    create: XOR<AgeCreateWithoutSubmittersInput, AgeUncheckedCreateWithoutSubmittersInput>
  }

  export type ClientTypeCreateWithoutSubmittersInput = {
    id?: number
    type: string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeUncheckedCreateWithoutSubmittersInput = {
    id?: number
    type: string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeCreateOrConnectWithoutSubmittersInput = {
    where: ClientTypeWhereUniqueInput
    create: XOR<ClientTypeCreateWithoutSubmittersInput, ClientTypeUncheckedCreateWithoutSubmittersInput>
  }

  export type ServiceFeedbackCreateWithoutSubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutSubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutSubmitterInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput>
  }

  export type ServiceFeedbackCreateManySubmitterInputEnvelope = {
    data: ServiceFeedbackCreateManySubmitterInput | ServiceFeedbackCreateManySubmitterInput[]
    skipDuplicates?: boolean
  }

  export type LogsCreateWithoutUserInput = {
    id?: number
    created_at?: Date | string
    serviceFeedback: ServiceFeedbackCreateNestedOneWithoutLogsInput
  }

  export type LogsUncheckedCreateWithoutUserInput = {
    id?: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type LogsCreateOrConnectWithoutUserInput = {
    where: LogsWhereUniqueInput
    create: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput>
  }

  export type LogsCreateManyUserInputEnvelope = {
    data: LogsCreateManyUserInput | LogsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AgeUpsertWithoutSubmittersInput = {
    update: XOR<AgeUpdateWithoutSubmittersInput, AgeUncheckedUpdateWithoutSubmittersInput>
    create: XOR<AgeCreateWithoutSubmittersInput, AgeUncheckedCreateWithoutSubmittersInput>
    where?: AgeWhereInput
  }

  export type AgeUpdateToOneWithWhereWithoutSubmittersInput = {
    where?: AgeWhereInput
    data: XOR<AgeUpdateWithoutSubmittersInput, AgeUncheckedUpdateWithoutSubmittersInput>
  }

  export type AgeUpdateWithoutSubmittersInput = {
    description?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutAgeNestedInput
  }

  export type AgeUncheckedUpdateWithoutSubmittersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type ClientTypeUpsertWithoutSubmittersInput = {
    update: XOR<ClientTypeUpdateWithoutSubmittersInput, ClientTypeUncheckedUpdateWithoutSubmittersInput>
    create: XOR<ClientTypeCreateWithoutSubmittersInput, ClientTypeUncheckedCreateWithoutSubmittersInput>
    where?: ClientTypeWhereInput
  }

  export type ClientTypeUpdateToOneWithWhereWithoutSubmittersInput = {
    where?: ClientTypeWhereInput
    data: XOR<ClientTypeUpdateWithoutSubmittersInput, ClientTypeUncheckedUpdateWithoutSubmittersInput>
  }

  export type ClientTypeUpdateWithoutSubmittersInput = {
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutClientTypeNestedInput
  }

  export type ClientTypeUncheckedUpdateWithoutSubmittersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutSubmitterInput, ServiceFeedbackUncheckedUpdateWithoutSubmitterInput>
    create: XOR<ServiceFeedbackCreateWithoutSubmitterInput, ServiceFeedbackUncheckedCreateWithoutSubmitterInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutSubmitterInput, ServiceFeedbackUncheckedUpdateWithoutSubmitterInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutSubmitterInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutSubmitterInput>
  }

  export type ServiceFeedbackScalarWhereInput = {
    AND?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
    OR?: ServiceFeedbackScalarWhereInput[]
    NOT?: ServiceFeedbackScalarWhereInput | ServiceFeedbackScalarWhereInput[]
    id?: IntFilter<"ServiceFeedback"> | number
    startTime?: DateTimeNullableFilter<"ServiceFeedback"> | Date | string | null
    submitterId?: IntFilter<"ServiceFeedback"> | number
    submittername?: StringFilter<"ServiceFeedback"> | string
    serviceDesc?: StringNullableFilter<"ServiceFeedback"> | string | null
    serviceId?: IntFilter<"ServiceFeedback"> | number
    otherService?: StringNullableFilter<"ServiceFeedback"> | string | null
    typeId?: IntNullableFilter<"ServiceFeedback"> | number | null
    ageBracketId?: IntNullableFilter<"ServiceFeedback"> | number | null
    specificAge?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"ServiceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"ServiceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"ServiceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"ServiceFeedback"> | string | null
    officeId?: IntFilter<"ServiceFeedback"> | number
    officeName?: StringNullableFilter<"ServiceFeedback"> | string | null
    consent?: StringNullableFilter<"ServiceFeedback"> | string | null
    awareCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    seeCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    useCC?: StringNullableFilter<"ServiceFeedback"> | string | null
    overallComment?: StringNullableFilter<"ServiceFeedback"> | string | null
    averageRating?: FloatFilter<"ServiceFeedback"> | number
    responsiveness?: IntFilter<"ServiceFeedback"> | number
    reliability?: IntFilter<"ServiceFeedback"> | number
    accessAndFacilities?: IntFilter<"ServiceFeedback"> | number
    communication?: IntFilter<"ServiceFeedback"> | number
    costs?: IntFilter<"ServiceFeedback"> | number
    integrity?: IntFilter<"ServiceFeedback"> | number
    assurance?: IntFilter<"ServiceFeedback"> | number
    outcome?: IntFilter<"ServiceFeedback"> | number
    uniqueIdentifier?: StringFilter<"ServiceFeedback"> | string
    created_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"ServiceFeedback"> | Date | string
  }

  export type LogsUpsertWithWhereUniqueWithoutUserInput = {
    where: LogsWhereUniqueInput
    update: XOR<LogsUpdateWithoutUserInput, LogsUncheckedUpdateWithoutUserInput>
    create: XOR<LogsCreateWithoutUserInput, LogsUncheckedCreateWithoutUserInput>
  }

  export type LogsUpdateWithWhereUniqueWithoutUserInput = {
    where: LogsWhereUniqueInput
    data: XOR<LogsUpdateWithoutUserInput, LogsUncheckedUpdateWithoutUserInput>
  }

  export type LogsUpdateManyWithWhereWithoutUserInput = {
    where: LogsScalarWhereInput
    data: XOR<LogsUpdateManyMutationInput, LogsUncheckedUpdateManyWithoutUserInput>
  }

  export type LogsScalarWhereInput = {
    AND?: LogsScalarWhereInput | LogsScalarWhereInput[]
    OR?: LogsScalarWhereInput[]
    NOT?: LogsScalarWhereInput | LogsScalarWhereInput[]
    id?: IntFilter<"Logs"> | number
    userId?: IntFilter<"Logs"> | number
    serviceFeedbackId?: IntFilter<"Logs"> | number
    created_at?: DateTimeFilter<"Logs"> | Date | string
  }

  export type SubmittersCreateWithoutAgeInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    sex: string
    clientType?: ClientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: LogsCreateNestedManyWithoutUserInput
  }

  export type SubmittersUncheckedCreateWithoutAgeInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: LogsUncheckedCreateNestedManyWithoutUserInput
  }

  export type SubmittersCreateOrConnectWithoutAgeInput = {
    where: SubmittersWhereUniqueInput
    create: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput>
  }

  export type SubmittersCreateManyAgeInputEnvelope = {
    data: SubmittersCreateManyAgeInput | SubmittersCreateManyAgeInput[]
    skipDuplicates?: boolean
  }

  export type ServiceFeedbackCreateWithoutAgeInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutAgeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutAgeInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput>
  }

  export type ServiceFeedbackCreateManyAgeInputEnvelope = {
    data: ServiceFeedbackCreateManyAgeInput | ServiceFeedbackCreateManyAgeInput[]
    skipDuplicates?: boolean
  }

  export type SubmittersUpsertWithWhereUniqueWithoutAgeInput = {
    where: SubmittersWhereUniqueInput
    update: XOR<SubmittersUpdateWithoutAgeInput, SubmittersUncheckedUpdateWithoutAgeInput>
    create: XOR<SubmittersCreateWithoutAgeInput, SubmittersUncheckedCreateWithoutAgeInput>
  }

  export type SubmittersUpdateWithWhereUniqueWithoutAgeInput = {
    where: SubmittersWhereUniqueInput
    data: XOR<SubmittersUpdateWithoutAgeInput, SubmittersUncheckedUpdateWithoutAgeInput>
  }

  export type SubmittersUpdateManyWithWhereWithoutAgeInput = {
    where: SubmittersScalarWhereInput
    data: XOR<SubmittersUpdateManyMutationInput, SubmittersUncheckedUpdateManyWithoutAgeInput>
  }

  export type SubmittersScalarWhereInput = {
    AND?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
    OR?: SubmittersScalarWhereInput[]
    NOT?: SubmittersScalarWhereInput | SubmittersScalarWhereInput[]
    id?: IntFilter<"Submitters"> | number
    name?: StringNullableFilter<"Submitters"> | string | null
    email?: StringFilter<"Submitters"> | string
    ageId?: IntNullableFilter<"Submitters"> | number | null
    specAge?: IntNullableFilter<"Submitters"> | number | null
    clientTypeId?: IntNullableFilter<"Submitters"> | number | null
    sex?: StringFilter<"Submitters"> | string
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutAgeInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutAgeInput, ServiceFeedbackUncheckedUpdateWithoutAgeInput>
    create: XOR<ServiceFeedbackCreateWithoutAgeInput, ServiceFeedbackUncheckedCreateWithoutAgeInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutAgeInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutAgeInput, ServiceFeedbackUncheckedUpdateWithoutAgeInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutAgeInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutAgeInput>
  }

  export type SubmittersCreateWithoutServiceFeedbacksInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    sex: string
    age?: AgeCreateNestedOneWithoutSubmittersInput
    clientType?: ClientTypeCreateNestedOneWithoutSubmittersInput
    Logs?: LogsCreateNestedManyWithoutUserInput
  }

  export type SubmittersUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    Logs?: LogsUncheckedCreateNestedManyWithoutUserInput
  }

  export type SubmittersCreateOrConnectWithoutServiceFeedbacksInput = {
    where: SubmittersWhereUniqueInput
    create: XOR<SubmittersCreateWithoutServiceFeedbacksInput, SubmittersUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type ServicesCreateWithoutServiceFeedbacksInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: OfficesCreateNestedOneWithoutServicesInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServicesInput
  }

  export type ServicesUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicesCreateOrConnectWithoutServiceFeedbacksInput = {
    where: ServicesWhereUniqueInput
    create: XOR<ServicesCreateWithoutServiceFeedbacksInput, ServicesUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type ClientTypeCreateWithoutServiceFeedbackInput = {
    id?: number
    type: string
    Submitters?: SubmittersCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    type: string
    Submitters?: SubmittersUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type ClientTypeCreateOrConnectWithoutServiceFeedbackInput = {
    where: ClientTypeWhereUniqueInput
    create: XOR<ClientTypeCreateWithoutServiceFeedbackInput, ClientTypeUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type AgeCreateWithoutServiceFeedbackInput = {
    id?: number
    description: string
    Submitters?: SubmittersCreateNestedManyWithoutAgeInput
  }

  export type AgeUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    description: string
    Submitters?: SubmittersUncheckedCreateNestedManyWithoutAgeInput
  }

  export type AgeCreateOrConnectWithoutServiceFeedbackInput = {
    where: AgeWhereUniqueInput
    create: XOR<AgeCreateWithoutServiceFeedbackInput, AgeUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type ServiceKindCreateWithoutServiceFeedbacksInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    Services?: ServicesCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    Services?: ServicesUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindCreateOrConnectWithoutServiceFeedbacksInput = {
    where: ServiceKindWhereUniqueInput
    create: XOR<ServiceKindCreateWithoutServiceFeedbacksInput, ServiceKindUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type OfficesCreateWithoutServiceFeedbackInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    Services?: ServicesCreateNestedManyWithoutOfficeInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type OfficesUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    Services?: ServicesUncheckedCreateNestedManyWithoutOfficeInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficesCreateOrConnectWithoutServiceFeedbackInput = {
    where: OfficesWhereUniqueInput
    create: XOR<OfficesCreateWithoutServiceFeedbackInput, OfficesUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionCreateWithoutServiceFeedbackInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoriesCreateNestedOneWithoutFeedbackQuestionInput
    question: QuestionsCreateNestedOneWithoutFeedbackQuestionInput
  }

  export type FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionCreateOrConnectWithoutServiceFeedbackInput = {
    where: FeedbackQuestionWhereUniqueInput
    create: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionCreateManyServiceFeedbackInputEnvelope = {
    data: FeedbackQuestionCreateManyServiceFeedbackInput | FeedbackQuestionCreateManyServiceFeedbackInput[]
    skipDuplicates?: boolean
  }

  export type LogsCreateWithoutServiceFeedbackInput = {
    id?: number
    created_at?: Date | string
    user: SubmittersCreateNestedOneWithoutLogsInput
  }

  export type LogsUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    userId: number
    created_at?: Date | string
  }

  export type LogsCreateOrConnectWithoutServiceFeedbackInput = {
    where: LogsWhereUniqueInput
    create: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type LogsCreateManyServiceFeedbackInputEnvelope = {
    data: LogsCreateManyServiceFeedbackInput | LogsCreateManyServiceFeedbackInput[]
    skipDuplicates?: boolean
  }

  export type SubmittersUpsertWithoutServiceFeedbacksInput = {
    update: XOR<SubmittersUpdateWithoutServiceFeedbacksInput, SubmittersUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<SubmittersCreateWithoutServiceFeedbacksInput, SubmittersUncheckedCreateWithoutServiceFeedbacksInput>
    where?: SubmittersWhereInput
  }

  export type SubmittersUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: SubmittersWhereInput
    data: XOR<SubmittersUpdateWithoutServiceFeedbacksInput, SubmittersUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type SubmittersUpdateWithoutServiceFeedbacksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: AgeUpdateOneWithoutSubmittersNestedInput
    clientType?: ClientTypeUpdateOneWithoutSubmittersNestedInput
    Logs?: LogsUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    Logs?: LogsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ServicesUpsertWithoutServiceFeedbacksInput = {
    update: XOR<ServicesUpdateWithoutServiceFeedbacksInput, ServicesUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<ServicesCreateWithoutServiceFeedbacksInput, ServicesUncheckedCreateWithoutServiceFeedbacksInput>
    where?: ServicesWhereInput
  }

  export type ServicesUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: ServicesWhereInput
    data: XOR<ServicesUpdateWithoutServiceFeedbacksInput, ServicesUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type ServicesUpdateWithoutServiceFeedbacksInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: OfficesUpdateOneWithoutServicesNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServicesNestedInput
  }

  export type ServicesUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClientTypeUpsertWithoutServiceFeedbackInput = {
    update: XOR<ClientTypeUpdateWithoutServiceFeedbackInput, ClientTypeUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<ClientTypeCreateWithoutServiceFeedbackInput, ClientTypeUncheckedCreateWithoutServiceFeedbackInput>
    where?: ClientTypeWhereInput
  }

  export type ClientTypeUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: ClientTypeWhereInput
    data: XOR<ClientTypeUpdateWithoutServiceFeedbackInput, ClientTypeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type ClientTypeUpdateWithoutServiceFeedbackInput = {
    type?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUpdateManyWithoutClientTypeNestedInput
  }

  export type ClientTypeUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type AgeUpsertWithoutServiceFeedbackInput = {
    update: XOR<AgeUpdateWithoutServiceFeedbackInput, AgeUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<AgeCreateWithoutServiceFeedbackInput, AgeUncheckedCreateWithoutServiceFeedbackInput>
    where?: AgeWhereInput
  }

  export type AgeUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: AgeWhereInput
    data: XOR<AgeUpdateWithoutServiceFeedbackInput, AgeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type AgeUpdateWithoutServiceFeedbackInput = {
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUpdateManyWithoutAgeNestedInput
  }

  export type AgeUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: SubmittersUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type ServiceKindUpsertWithoutServiceFeedbacksInput = {
    update: XOR<ServiceKindUpdateWithoutServiceFeedbacksInput, ServiceKindUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<ServiceKindCreateWithoutServiceFeedbacksInput, ServiceKindUncheckedCreateWithoutServiceFeedbacksInput>
    where?: ServiceKindWhereInput
  }

  export type ServiceKindUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: ServiceKindWhereInput
    data: XOR<ServiceKindUpdateWithoutServiceFeedbacksInput, ServiceKindUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type ServiceKindUpdateWithoutServiceFeedbacksInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: ServicesUpdateManyWithoutServiceKindNestedInput
  }

  export type ServiceKindUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: ServicesUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type OfficesUpsertWithoutServiceFeedbackInput = {
    update: XOR<OfficesUpdateWithoutServiceFeedbackInput, OfficesUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<OfficesCreateWithoutServiceFeedbackInput, OfficesUncheckedCreateWithoutServiceFeedbackInput>
    where?: OfficesWhereInput
  }

  export type OfficesUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: OfficesWhereInput
    data: XOR<OfficesUpdateWithoutServiceFeedbackInput, OfficesUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type OfficesUpdateWithoutServiceFeedbackInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: ServicesUpdateManyWithoutOfficeNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type OfficesUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: ServicesUncheckedUpdateManyWithoutOfficeNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type FeedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput = {
    where: FeedbackQuestionWhereUniqueInput
    update: XOR<FeedbackQuestionUpdateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<FeedbackQuestionCreateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput = {
    where: FeedbackQuestionWhereUniqueInput
    data: XOR<FeedbackQuestionUpdateWithoutServiceFeedbackInput, FeedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput = {
    where: FeedbackQuestionScalarWhereInput
    data: XOR<FeedbackQuestionUpdateManyMutationInput, FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackInput>
  }

  export type FeedbackQuestionScalarWhereInput = {
    AND?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
    OR?: FeedbackQuestionScalarWhereInput[]
    NOT?: FeedbackQuestionScalarWhereInput | FeedbackQuestionScalarWhereInput[]
    id?: IntFilter<"FeedbackQuestion"> | number
    categoryId?: IntFilter<"FeedbackQuestion"> | number
    questionId?: IntFilter<"FeedbackQuestion"> | number
    rating?: IntFilter<"FeedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"FeedbackQuestion"> | number
    created_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"FeedbackQuestion"> | Date | string
  }

  export type LogsUpsertWithWhereUniqueWithoutServiceFeedbackInput = {
    where: LogsWhereUniqueInput
    update: XOR<LogsUpdateWithoutServiceFeedbackInput, LogsUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<LogsCreateWithoutServiceFeedbackInput, LogsUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type LogsUpdateWithWhereUniqueWithoutServiceFeedbackInput = {
    where: LogsWhereUniqueInput
    data: XOR<LogsUpdateWithoutServiceFeedbackInput, LogsUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type LogsUpdateManyWithWhereWithoutServiceFeedbackInput = {
    where: LogsScalarWhereInput
    data: XOR<LogsUpdateManyMutationInput, LogsUncheckedUpdateManyWithoutServiceFeedbackInput>
  }

  export type ServiceFeedbackCreateWithoutClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutClientTypeInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput>
  }

  export type ServiceFeedbackCreateManyClientTypeInputEnvelope = {
    data: ServiceFeedbackCreateManyClientTypeInput | ServiceFeedbackCreateManyClientTypeInput[]
    skipDuplicates?: boolean
  }

  export type SubmittersCreateWithoutClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    sex: string
    age?: AgeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: LogsCreateNestedManyWithoutUserInput
  }

  export type SubmittersUncheckedCreateWithoutClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    sex: string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: LogsUncheckedCreateNestedManyWithoutUserInput
  }

  export type SubmittersCreateOrConnectWithoutClientTypeInput = {
    where: SubmittersWhereUniqueInput
    create: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput>
  }

  export type SubmittersCreateManyClientTypeInputEnvelope = {
    data: SubmittersCreateManyClientTypeInput | SubmittersCreateManyClientTypeInput[]
    skipDuplicates?: boolean
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutClientTypeInput, ServiceFeedbackUncheckedUpdateWithoutClientTypeInput>
    create: XOR<ServiceFeedbackCreateWithoutClientTypeInput, ServiceFeedbackUncheckedCreateWithoutClientTypeInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutClientTypeInput, ServiceFeedbackUncheckedUpdateWithoutClientTypeInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutClientTypeInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutClientTypeInput>
  }

  export type SubmittersUpsertWithWhereUniqueWithoutClientTypeInput = {
    where: SubmittersWhereUniqueInput
    update: XOR<SubmittersUpdateWithoutClientTypeInput, SubmittersUncheckedUpdateWithoutClientTypeInput>
    create: XOR<SubmittersCreateWithoutClientTypeInput, SubmittersUncheckedCreateWithoutClientTypeInput>
  }

  export type SubmittersUpdateWithWhereUniqueWithoutClientTypeInput = {
    where: SubmittersWhereUniqueInput
    data: XOR<SubmittersUpdateWithoutClientTypeInput, SubmittersUncheckedUpdateWithoutClientTypeInput>
  }

  export type SubmittersUpdateManyWithWhereWithoutClientTypeInput = {
    where: SubmittersScalarWhereInput
    data: XOR<SubmittersUpdateManyMutationInput, SubmittersUncheckedUpdateManyWithoutClientTypeInput>
  }

  export type CategoriesCreateWithoutFeedbackQuestionInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    Questions?: QuestionsCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateWithoutFeedbackQuestionInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    Questions?: QuestionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesCreateOrConnectWithoutFeedbackQuestionInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutFeedbackQuestionInput, CategoriesUncheckedCreateWithoutFeedbackQuestionInput>
  }

  export type QuestionsCreateWithoutFeedbackQuestionInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoriesCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionsUncheckedCreateWithoutFeedbackQuestionInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionsCreateOrConnectWithoutFeedbackQuestionInput = {
    where: QuestionsWhereUniqueInput
    create: XOR<QuestionsCreateWithoutFeedbackQuestionInput, QuestionsUncheckedCreateWithoutFeedbackQuestionInput>
  }

  export type ServiceFeedbackCreateWithoutFeedbackQuestionsInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
  }

  export type CategoriesUpsertWithoutFeedbackQuestionInput = {
    update: XOR<CategoriesUpdateWithoutFeedbackQuestionInput, CategoriesUncheckedUpdateWithoutFeedbackQuestionInput>
    create: XOR<CategoriesCreateWithoutFeedbackQuestionInput, CategoriesUncheckedCreateWithoutFeedbackQuestionInput>
    where?: CategoriesWhereInput
  }

  export type CategoriesUpdateToOneWithWhereWithoutFeedbackQuestionInput = {
    where?: CategoriesWhereInput
    data: XOR<CategoriesUpdateWithoutFeedbackQuestionInput, CategoriesUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type CategoriesUpdateWithoutFeedbackQuestionInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Questions?: QuestionsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateWithoutFeedbackQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Questions?: QuestionsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type QuestionsUpsertWithoutFeedbackQuestionInput = {
    update: XOR<QuestionsUpdateWithoutFeedbackQuestionInput, QuestionsUncheckedUpdateWithoutFeedbackQuestionInput>
    create: XOR<QuestionsCreateWithoutFeedbackQuestionInput, QuestionsUncheckedCreateWithoutFeedbackQuestionInput>
    where?: QuestionsWhereInput
  }

  export type QuestionsUpdateToOneWithWhereWithoutFeedbackQuestionInput = {
    where?: QuestionsWhereInput
    data: XOR<QuestionsUpdateWithoutFeedbackQuestionInput, QuestionsUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type QuestionsUpdateWithoutFeedbackQuestionInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionsUncheckedUpdateWithoutFeedbackQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceFeedbackUpsertWithoutFeedbackQuestionsInput = {
    update: XOR<ServiceFeedbackUpdateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
    create: XOR<ServiceFeedbackCreateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    where?: ServiceFeedbackWhereInput
  }

  export type ServiceFeedbackUpdateToOneWithWhereWithoutFeedbackQuestionsInput = {
    where?: ServiceFeedbackWhereInput
    data: XOR<ServiceFeedbackUpdateWithoutFeedbackQuestionsInput, ServiceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
  }

  export type ServiceFeedbackUpdateWithoutFeedbackQuestionsInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type OfficesCreateWithoutServicesInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type OfficesUncheckedCreateWithoutServicesInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type OfficesCreateOrConnectWithoutServicesInput = {
    where: OfficesWhereUniqueInput
    create: XOR<OfficesCreateWithoutServicesInput, OfficesUncheckedCreateWithoutServicesInput>
  }

  export type ServiceKindCreateWithoutServicesInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindUncheckedCreateWithoutServicesInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type ServiceKindCreateOrConnectWithoutServicesInput = {
    where: ServiceKindWhereUniqueInput
    create: XOR<ServiceKindCreateWithoutServicesInput, ServiceKindUncheckedCreateWithoutServicesInput>
  }

  export type ServiceFeedbackCreateWithoutServiceInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutServiceInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutServiceInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput>
  }

  export type ServiceFeedbackCreateManyServiceInputEnvelope = {
    data: ServiceFeedbackCreateManyServiceInput | ServiceFeedbackCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type OfficesUpsertWithoutServicesInput = {
    update: XOR<OfficesUpdateWithoutServicesInput, OfficesUncheckedUpdateWithoutServicesInput>
    create: XOR<OfficesCreateWithoutServicesInput, OfficesUncheckedCreateWithoutServicesInput>
    where?: OfficesWhereInput
  }

  export type OfficesUpdateToOneWithWhereWithoutServicesInput = {
    where?: OfficesWhereInput
    data: XOR<OfficesUpdateWithoutServicesInput, OfficesUncheckedUpdateWithoutServicesInput>
  }

  export type OfficesUpdateWithoutServicesInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type OfficesUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type ServiceKindUpsertWithoutServicesInput = {
    update: XOR<ServiceKindUpdateWithoutServicesInput, ServiceKindUncheckedUpdateWithoutServicesInput>
    create: XOR<ServiceKindCreateWithoutServicesInput, ServiceKindUncheckedCreateWithoutServicesInput>
    where?: ServiceKindWhereInput
  }

  export type ServiceKindUpdateToOneWithWhereWithoutServicesInput = {
    where?: ServiceKindWhereInput
    data: XOR<ServiceKindUpdateWithoutServicesInput, ServiceKindUncheckedUpdateWithoutServicesInput>
  }

  export type ServiceKindUpdateWithoutServicesInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutServiceKindNestedInput
  }

  export type ServiceKindUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutServiceInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutServiceInput, ServiceFeedbackUncheckedUpdateWithoutServiceInput>
    create: XOR<ServiceFeedbackCreateWithoutServiceInput, ServiceFeedbackUncheckedCreateWithoutServiceInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutServiceInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutServiceInput, ServiceFeedbackUncheckedUpdateWithoutServiceInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutServiceInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutServiceInput>
  }

  export type ServiceFeedbackCreateWithoutServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutServiceKindInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput>
  }

  export type ServiceFeedbackCreateManyServiceKindInputEnvelope = {
    data: ServiceFeedbackCreateManyServiceKindInput | ServiceFeedbackCreateManyServiceKindInput[]
    skipDuplicates?: boolean
  }

  export type ServicesCreateWithoutServiceKindInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: OfficesCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type ServicesUncheckedCreateWithoutServiceKindInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServicesCreateOrConnectWithoutServiceKindInput = {
    where: ServicesWhereUniqueInput
    create: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput>
  }

  export type ServicesCreateManyServiceKindInputEnvelope = {
    data: ServicesCreateManyServiceKindInput | ServicesCreateManyServiceKindInput[]
    skipDuplicates?: boolean
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutServiceKindInput, ServiceFeedbackUncheckedUpdateWithoutServiceKindInput>
    create: XOR<ServiceFeedbackCreateWithoutServiceKindInput, ServiceFeedbackUncheckedCreateWithoutServiceKindInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutServiceKindInput, ServiceFeedbackUncheckedUpdateWithoutServiceKindInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutServiceKindInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutServiceKindInput>
  }

  export type ServicesUpsertWithWhereUniqueWithoutServiceKindInput = {
    where: ServicesWhereUniqueInput
    update: XOR<ServicesUpdateWithoutServiceKindInput, ServicesUncheckedUpdateWithoutServiceKindInput>
    create: XOR<ServicesCreateWithoutServiceKindInput, ServicesUncheckedCreateWithoutServiceKindInput>
  }

  export type ServicesUpdateWithWhereUniqueWithoutServiceKindInput = {
    where: ServicesWhereUniqueInput
    data: XOR<ServicesUpdateWithoutServiceKindInput, ServicesUncheckedUpdateWithoutServiceKindInput>
  }

  export type ServicesUpdateManyWithWhereWithoutServiceKindInput = {
    where: ServicesScalarWhereInput
    data: XOR<ServicesUpdateManyMutationInput, ServicesUncheckedUpdateManyWithoutServiceKindInput>
  }

  export type ServicesScalarWhereInput = {
    AND?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
    OR?: ServicesScalarWhereInput[]
    NOT?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
    id?: IntFilter<"Services"> | number
    title?: StringFilter<"Services"> | string
    relatedOfficeId?: IntNullableFilter<"Services"> | number | null
    serviceKindId?: IntNullableFilter<"Services"> | number | null
    created_at?: DateTimeFilter<"Services"> | Date | string
    updated_at?: DateTimeFilter<"Services"> | Date | string
  }

  export type SubmittersCreateWithoutLogsInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    sex: string
    age?: AgeCreateNestedOneWithoutSubmittersInput
    clientType?: ClientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutSubmitterInput
  }

  export type SubmittersUncheckedCreateWithoutLogsInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
  }

  export type SubmittersCreateOrConnectWithoutLogsInput = {
    where: SubmittersWhereUniqueInput
    create: XOR<SubmittersCreateWithoutLogsInput, SubmittersUncheckedCreateWithoutLogsInput>
  }

  export type ServiceFeedbackCreateWithoutLogsInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: OfficesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutLogsInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutLogsInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutLogsInput, ServiceFeedbackUncheckedCreateWithoutLogsInput>
  }

  export type SubmittersUpsertWithoutLogsInput = {
    update: XOR<SubmittersUpdateWithoutLogsInput, SubmittersUncheckedUpdateWithoutLogsInput>
    create: XOR<SubmittersCreateWithoutLogsInput, SubmittersUncheckedCreateWithoutLogsInput>
    where?: SubmittersWhereInput
  }

  export type SubmittersUpdateToOneWithWhereWithoutLogsInput = {
    where?: SubmittersWhereInput
    data: XOR<SubmittersUpdateWithoutLogsInput, SubmittersUncheckedUpdateWithoutLogsInput>
  }

  export type SubmittersUpdateWithoutLogsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: AgeUpdateOneWithoutSubmittersNestedInput
    clientType?: ClientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutSubmitterNestedInput
  }

  export type SubmittersUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
  }

  export type ServiceFeedbackUpsertWithoutLogsInput = {
    update: XOR<ServiceFeedbackUpdateWithoutLogsInput, ServiceFeedbackUncheckedUpdateWithoutLogsInput>
    create: XOR<ServiceFeedbackCreateWithoutLogsInput, ServiceFeedbackUncheckedCreateWithoutLogsInput>
    where?: ServiceFeedbackWhereInput
  }

  export type ServiceFeedbackUpdateToOneWithWhereWithoutLogsInput = {
    where?: ServiceFeedbackWhereInput
    data: XOR<ServiceFeedbackUpdateWithoutLogsInput, ServiceFeedbackUncheckedUpdateWithoutLogsInput>
  }

  export type ServiceFeedbackUpdateWithoutLogsInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type FeedbackQuestionCreateWithoutCategoryInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    question: QuestionsCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: ServiceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type FeedbackQuestionUncheckedCreateWithoutCategoryInput = {
    id?: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionCreateOrConnectWithoutCategoryInput = {
    where: FeedbackQuestionWhereUniqueInput
    create: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput>
  }

  export type FeedbackQuestionCreateManyCategoryInputEnvelope = {
    data: FeedbackQuestionCreateManyCategoryInput | FeedbackQuestionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type QuestionsCreateWithoutCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsUncheckedCreateWithoutCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionsCreateOrConnectWithoutCategoryInput = {
    where: QuestionsWhereUniqueInput
    create: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionsCreateManyCategoryInputEnvelope = {
    data: QuestionsCreateManyCategoryInput | QuestionsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: FeedbackQuestionWhereUniqueInput
    update: XOR<FeedbackQuestionUpdateWithoutCategoryInput, FeedbackQuestionUncheckedUpdateWithoutCategoryInput>
    create: XOR<FeedbackQuestionCreateWithoutCategoryInput, FeedbackQuestionUncheckedCreateWithoutCategoryInput>
  }

  export type FeedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: FeedbackQuestionWhereUniqueInput
    data: XOR<FeedbackQuestionUpdateWithoutCategoryInput, FeedbackQuestionUncheckedUpdateWithoutCategoryInput>
  }

  export type FeedbackQuestionUpdateManyWithWhereWithoutCategoryInput = {
    where: FeedbackQuestionScalarWhereInput
    data: XOR<FeedbackQuestionUpdateManyMutationInput, FeedbackQuestionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type QuestionsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: QuestionsWhereUniqueInput
    update: XOR<QuestionsUpdateWithoutCategoryInput, QuestionsUncheckedUpdateWithoutCategoryInput>
    create: XOR<QuestionsCreateWithoutCategoryInput, QuestionsUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: QuestionsWhereUniqueInput
    data: XOR<QuestionsUpdateWithoutCategoryInput, QuestionsUncheckedUpdateWithoutCategoryInput>
  }

  export type QuestionsUpdateManyWithWhereWithoutCategoryInput = {
    where: QuestionsScalarWhereInput
    data: XOR<QuestionsUpdateManyMutationInput, QuestionsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type QuestionsScalarWhereInput = {
    AND?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
    OR?: QuestionsScalarWhereInput[]
    NOT?: QuestionsScalarWhereInput | QuestionsScalarWhereInput[]
    id?: IntFilter<"Questions"> | number
    title?: StringNullableFilter<"Questions"> | string | null
    description?: StringNullableFilter<"Questions"> | string | null
    categoryId?: IntFilter<"Questions"> | number
    created_at?: DateTimeFilter<"Questions"> | Date | string
    updated_at?: DateTimeFilter<"Questions"> | Date | string
  }

  export type CategoriesCreateWithoutQuestionsInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesUncheckedCreateWithoutQuestionsInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoriesCreateOrConnectWithoutQuestionsInput = {
    where: CategoriesWhereUniqueInput
    create: XOR<CategoriesCreateWithoutQuestionsInput, CategoriesUncheckedCreateWithoutQuestionsInput>
  }

  export type FeedbackQuestionCreateWithoutQuestionInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: CategoriesCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: ServiceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type FeedbackQuestionUncheckedCreateWithoutQuestionInput = {
    id?: number
    categoryId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionCreateOrConnectWithoutQuestionInput = {
    where: FeedbackQuestionWhereUniqueInput
    create: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type FeedbackQuestionCreateManyQuestionInputEnvelope = {
    data: FeedbackQuestionCreateManyQuestionInput | FeedbackQuestionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type CategoriesUpsertWithoutQuestionsInput = {
    update: XOR<CategoriesUpdateWithoutQuestionsInput, CategoriesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<CategoriesCreateWithoutQuestionsInput, CategoriesUncheckedCreateWithoutQuestionsInput>
    where?: CategoriesWhereInput
  }

  export type CategoriesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: CategoriesWhereInput
    data: XOR<CategoriesUpdateWithoutQuestionsInput, CategoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type CategoriesUpdateWithoutQuestionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUpdateManyWithoutCategoryNestedInput
  }

  export type CategoriesUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type FeedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: FeedbackQuestionWhereUniqueInput
    update: XOR<FeedbackQuestionUpdateWithoutQuestionInput, FeedbackQuestionUncheckedUpdateWithoutQuestionInput>
    create: XOR<FeedbackQuestionCreateWithoutQuestionInput, FeedbackQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type FeedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: FeedbackQuestionWhereUniqueInput
    data: XOR<FeedbackQuestionUpdateWithoutQuestionInput, FeedbackQuestionUncheckedUpdateWithoutQuestionInput>
  }

  export type FeedbackQuestionUpdateManyWithWhereWithoutQuestionInput = {
    where: FeedbackQuestionScalarWhereInput
    data: XOR<FeedbackQuestionUpdateManyMutationInput, FeedbackQuestionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type ServiceFeedbackCreateWithoutOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: SubmittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: ServicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: ClientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: AgeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: ServiceKindCreateNestedOneWithoutServiceFeedbacksInput
    feedbackQuestions?: FeedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: LogsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type ServiceFeedbackCreateOrConnectWithoutOfficeVisitedInput = {
    where: ServiceFeedbackWhereUniqueInput
    create: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput>
  }

  export type ServiceFeedbackCreateManyOfficeVisitedInputEnvelope = {
    data: ServiceFeedbackCreateManyOfficeVisitedInput | ServiceFeedbackCreateManyOfficeVisitedInput[]
    skipDuplicates?: boolean
  }

  export type ServicesCreateWithoutOfficeInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    serviceKind?: ServiceKindCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: ServiceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type ServicesUncheckedCreateWithoutOfficeInput = {
    id?: number
    title: string
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServicesCreateOrConnectWithoutOfficeInput = {
    where: ServicesWhereUniqueInput
    create: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput>
  }

  export type ServicesCreateManyOfficeInputEnvelope = {
    data: ServicesCreateManyOfficeInput | ServicesCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutOfficeInput = {
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type usersUncheckedCreateWithoutOfficeInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type usersCreateOrConnectWithoutOfficeInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput>
  }

  export type usersCreateManyOfficeInputEnvelope = {
    data: usersCreateManyOfficeInput | usersCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type ServiceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput = {
    where: ServiceFeedbackWhereUniqueInput
    update: XOR<ServiceFeedbackUpdateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedUpdateWithoutOfficeVisitedInput>
    create: XOR<ServiceFeedbackCreateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedCreateWithoutOfficeVisitedInput>
  }

  export type ServiceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput = {
    where: ServiceFeedbackWhereUniqueInput
    data: XOR<ServiceFeedbackUpdateWithoutOfficeVisitedInput, ServiceFeedbackUncheckedUpdateWithoutOfficeVisitedInput>
  }

  export type ServiceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput = {
    where: ServiceFeedbackScalarWhereInput
    data: XOR<ServiceFeedbackUpdateManyMutationInput, ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedInput>
  }

  export type ServicesUpsertWithWhereUniqueWithoutOfficeInput = {
    where: ServicesWhereUniqueInput
    update: XOR<ServicesUpdateWithoutOfficeInput, ServicesUncheckedUpdateWithoutOfficeInput>
    create: XOR<ServicesCreateWithoutOfficeInput, ServicesUncheckedCreateWithoutOfficeInput>
  }

  export type ServicesUpdateWithWhereUniqueWithoutOfficeInput = {
    where: ServicesWhereUniqueInput
    data: XOR<ServicesUpdateWithoutOfficeInput, ServicesUncheckedUpdateWithoutOfficeInput>
  }

  export type ServicesUpdateManyWithWhereWithoutOfficeInput = {
    where: ServicesScalarWhereInput
    data: XOR<ServicesUpdateManyMutationInput, ServicesUncheckedUpdateManyWithoutOfficeInput>
  }

  export type usersUpsertWithWhereUniqueWithoutOfficeInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutOfficeInput, usersUncheckedUpdateWithoutOfficeInput>
    create: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput>
  }

  export type usersUpdateWithWhereUniqueWithoutOfficeInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutOfficeInput, usersUncheckedUpdateWithoutOfficeInput>
  }

  export type usersUpdateManyWithWhereWithoutOfficeInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutOfficeInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    uid?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
  }

  export type ServiceFeedbackCreateManySubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LogsCreateManyUserInput = {
    id?: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type ServiceFeedbackUpdateWithoutSubmitterInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedback?: ServiceFeedbackUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmittersCreateManyAgeInput = {
    id?: number
    name?: string | null
    email: string
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
  }

  export type ServiceFeedbackCreateManyAgeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubmittersUpdateWithoutAgeInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    clientType?: ClientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateManyWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceFeedbackUpdateWithoutAgeInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionCreateManyServiceFeedbackInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type LogsCreateManyServiceFeedbackInput = {
    id?: number
    userId: number
    created_at?: Date | string
  }

  export type FeedbackQuestionUpdateWithoutServiceFeedbackInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    question?: QuestionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
  }

  export type FeedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsUpdateWithoutServiceFeedbackInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: SubmittersUpdateOneRequiredWithoutLogsNestedInput
  }

  export type LogsUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogsUncheckedUpdateManyWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceFeedbackCreateManyClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SubmittersCreateManyClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    specAge?: number | null
    sex: string
  }

  export type ServiceFeedbackUpdateWithoutClientTypeInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmittersUpdateWithoutClientTypeInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: AgeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: LogsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubmittersUncheckedUpdateManyWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type ServiceFeedbackCreateManyServiceInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServiceFeedbackUpdateWithoutServiceInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceFeedbackCreateManyServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicesCreateManyServiceKindInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServiceFeedbackUpdateWithoutServiceKindInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    officeVisited?: OfficesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicesUpdateWithoutServiceKindInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: OfficesUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateManyWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionCreateManyCategoryInput = {
    id?: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type QuestionsCreateManyCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionUpdateWithoutCategoryInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: ServiceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type FeedbackQuestionUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionsUpdateWithoutCategoryInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: FeedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionsUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionCreateManyQuestionInput = {
    id?: number
    categoryId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type FeedbackQuestionUpdateWithoutQuestionInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: CategoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: ServiceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type FeedbackQuestionUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackQuestionUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceFeedbackCreateManyOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type ServicesCreateManyOfficeInput = {
    id?: number
    title: string
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersCreateManyOfficeInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type ServiceFeedbackUpdateWithoutOfficeVisitedInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: SubmittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: ServicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: ClientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: AgeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: ServiceKindUpdateOneWithoutServiceFeedbacksNestedInput
    feedbackQuestions?: FeedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateWithoutOfficeVisitedInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: FeedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: LogsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type ServiceFeedbackUncheckedUpdateManyWithoutOfficeVisitedInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicesUpdateWithoutOfficeInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceKind?: ServiceKindUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: ServiceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: ServiceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateManyWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutOfficeInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateWithoutOfficeInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyWithoutOfficeInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SubmittersCountOutputTypeDefaultArgs instead
     */
    export type SubmittersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmittersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgeCountOutputTypeDefaultArgs instead
     */
    export type AgeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceFeedbackCountOutputTypeDefaultArgs instead
     */
    export type ServiceFeedbackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientTypeCountOutputTypeDefaultArgs instead
     */
    export type ClientTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicesCountOutputTypeDefaultArgs instead
     */
    export type ServicesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceKindCountOutputTypeDefaultArgs instead
     */
    export type ServiceKindCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionsCountOutputTypeDefaultArgs instead
     */
    export type QuestionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OfficesCountOutputTypeDefaultArgs instead
     */
    export type OfficesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OfficesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubmittersDefaultArgs instead
     */
    export type SubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmittersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgeDefaultArgs instead
     */
    export type AgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceFeedbackDefaultArgs instead
     */
    export type ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceFeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientTypeDefaultArgs instead
     */
    export type ClientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackQuestionDefaultArgs instead
     */
    export type FeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicesDefaultArgs instead
     */
    export type ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceKindDefaultArgs instead
     */
    export type ServiceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceKindDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LogsDefaultArgs instead
     */
    export type LogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LogsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesDefaultArgs instead
     */
    export type CategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionsDefaultArgs instead
     */
    export type QuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OfficesDefaultArgs instead
     */
    export type OfficesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OfficesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}