
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model submitters
 * 
 */
export type submitters = $Result.DefaultSelection<Prisma.$submittersPayload>
/**
 * Model age
 * 
 */
export type age = $Result.DefaultSelection<Prisma.$agePayload>
/**
 * Model serviceFeedback
 * 
 */
export type serviceFeedback = $Result.DefaultSelection<Prisma.$serviceFeedbackPayload>
/**
 * Model clientType
 * 
 */
export type clientType = $Result.DefaultSelection<Prisma.$clientTypePayload>
/**
 * Model feedbackQuestion
 * 
 */
export type feedbackQuestion = $Result.DefaultSelection<Prisma.$feedbackQuestionPayload>
/**
 * Model services
 * 
 */
export type services = $Result.DefaultSelection<Prisma.$servicesPayload>
/**
 * Model serviceKind
 * 
 */
export type serviceKind = $Result.DefaultSelection<Prisma.$serviceKindPayload>
/**
 * Model logs
 * 
 */
export type logs = $Result.DefaultSelection<Prisma.$logsPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model questions
 * 
 */
export type questions = $Result.DefaultSelection<Prisma.$questionsPayload>
/**
 * Model offices
 * 
 */
export type offices = $Result.DefaultSelection<Prisma.$officesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.submitters`: Exposes CRUD operations for the **submitters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submitters
    * const submitters = await prisma.submitters.findMany()
    * ```
    */
  get submitters(): Prisma.submittersDelegate<ExtArgs>;

  /**
   * `prisma.age`: Exposes CRUD operations for the **age** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ages
    * const ages = await prisma.age.findMany()
    * ```
    */
  get age(): Prisma.ageDelegate<ExtArgs>;

  /**
   * `prisma.serviceFeedback`: Exposes CRUD operations for the **serviceFeedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceFeedbacks
    * const serviceFeedbacks = await prisma.serviceFeedback.findMany()
    * ```
    */
  get serviceFeedback(): Prisma.serviceFeedbackDelegate<ExtArgs>;

  /**
   * `prisma.clientType`: Exposes CRUD operations for the **clientType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClientTypes
    * const clientTypes = await prisma.clientType.findMany()
    * ```
    */
  get clientType(): Prisma.clientTypeDelegate<ExtArgs>;

  /**
   * `prisma.feedbackQuestion`: Exposes CRUD operations for the **feedbackQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackQuestions
    * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
    * ```
    */
  get feedbackQuestion(): Prisma.feedbackQuestionDelegate<ExtArgs>;

  /**
   * `prisma.services`: Exposes CRUD operations for the **services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.services.findMany()
    * ```
    */
  get services(): Prisma.servicesDelegate<ExtArgs>;

  /**
   * `prisma.serviceKind`: Exposes CRUD operations for the **serviceKind** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServiceKinds
    * const serviceKinds = await prisma.serviceKind.findMany()
    * ```
    */
  get serviceKind(): Prisma.serviceKindDelegate<ExtArgs>;

  /**
   * `prisma.logs`: Exposes CRUD operations for the **logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.logs.findMany()
    * ```
    */
  get logs(): Prisma.logsDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.questions`: Exposes CRUD operations for the **questions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.questions.findMany()
    * ```
    */
  get questions(): Prisma.questionsDelegate<ExtArgs>;

  /**
   * `prisma.offices`: Exposes CRUD operations for the **offices** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Offices
    * const offices = await prisma.offices.findMany()
    * ```
    */
  get offices(): Prisma.officesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.7.1
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    submitters: 'submitters',
    age: 'age',
    serviceFeedback: 'serviceFeedback',
    clientType: 'clientType',
    feedbackQuestion: 'feedbackQuestion',
    services: 'services',
    serviceKind: 'serviceKind',
    logs: 'logs',
    categories: 'categories',
    questions: 'questions',
    offices: 'offices'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'submitters' | 'age' | 'serviceFeedback' | 'clientType' | 'feedbackQuestion' | 'services' | 'serviceKind' | 'logs' | 'categories' | 'questions' | 'offices'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      submitters: {
        payload: Prisma.$submittersPayload<ExtArgs>
        fields: Prisma.submittersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.submittersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.submittersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          findFirst: {
            args: Prisma.submittersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.submittersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          findMany: {
            args: Prisma.submittersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>[]
          }
          create: {
            args: Prisma.submittersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          createMany: {
            args: Prisma.submittersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.submittersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          update: {
            args: Prisma.submittersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          deleteMany: {
            args: Prisma.submittersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.submittersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.submittersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$submittersPayload>
          }
          aggregate: {
            args: Prisma.SubmittersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubmitters>
          }
          groupBy: {
            args: Prisma.submittersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubmittersGroupByOutputType>[]
          }
          count: {
            args: Prisma.submittersCountArgs<ExtArgs>,
            result: $Utils.Optional<SubmittersCountAggregateOutputType> | number
          }
        }
      }
      age: {
        payload: Prisma.$agePayload<ExtArgs>
        fields: Prisma.ageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          findFirst: {
            args: Prisma.ageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          findMany: {
            args: Prisma.ageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>[]
          }
          create: {
            args: Prisma.ageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          createMany: {
            args: Prisma.ageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          update: {
            args: Prisma.ageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          deleteMany: {
            args: Prisma.ageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$agePayload>
          }
          aggregate: {
            args: Prisma.AgeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAge>
          }
          groupBy: {
            args: Prisma.ageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AgeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ageCountArgs<ExtArgs>,
            result: $Utils.Optional<AgeCountAggregateOutputType> | number
          }
        }
      }
      serviceFeedback: {
        payload: Prisma.$serviceFeedbackPayload<ExtArgs>
        fields: Prisma.serviceFeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviceFeedbackFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviceFeedbackFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          findFirst: {
            args: Prisma.serviceFeedbackFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviceFeedbackFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          findMany: {
            args: Prisma.serviceFeedbackFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>[]
          }
          create: {
            args: Prisma.serviceFeedbackCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          createMany: {
            args: Prisma.serviceFeedbackCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.serviceFeedbackDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          update: {
            args: Prisma.serviceFeedbackUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          deleteMany: {
            args: Prisma.serviceFeedbackDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.serviceFeedbackUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.serviceFeedbackUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceFeedbackPayload>
          }
          aggregate: {
            args: Prisma.ServiceFeedbackAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceFeedback>
          }
          groupBy: {
            args: Prisma.serviceFeedbackGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceFeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviceFeedbackCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceFeedbackCountAggregateOutputType> | number
          }
        }
      }
      clientType: {
        payload: Prisma.$clientTypePayload<ExtArgs>
        fields: Prisma.clientTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          findFirst: {
            args: Prisma.clientTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          findMany: {
            args: Prisma.clientTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>[]
          }
          create: {
            args: Prisma.clientTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          createMany: {
            args: Prisma.clientTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.clientTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          update: {
            args: Prisma.clientTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          deleteMany: {
            args: Prisma.clientTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.clientTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.clientTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$clientTypePayload>
          }
          aggregate: {
            args: Prisma.ClientTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClientType>
          }
          groupBy: {
            args: Prisma.clientTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClientTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ClientTypeCountAggregateOutputType> | number
          }
        }
      }
      feedbackQuestion: {
        payload: Prisma.$feedbackQuestionPayload<ExtArgs>
        fields: Prisma.feedbackQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.feedbackQuestionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.feedbackQuestionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          findFirst: {
            args: Prisma.feedbackQuestionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.feedbackQuestionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          findMany: {
            args: Prisma.feedbackQuestionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>[]
          }
          create: {
            args: Prisma.feedbackQuestionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          createMany: {
            args: Prisma.feedbackQuestionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.feedbackQuestionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          update: {
            args: Prisma.feedbackQuestionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          deleteMany: {
            args: Prisma.feedbackQuestionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.feedbackQuestionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.feedbackQuestionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$feedbackQuestionPayload>
          }
          aggregate: {
            args: Prisma.FeedbackQuestionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedbackQuestion>
          }
          groupBy: {
            args: Prisma.feedbackQuestionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.feedbackQuestionCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackQuestionCountAggregateOutputType> | number
          }
        }
      }
      services: {
        payload: Prisma.$servicesPayload<ExtArgs>
        fields: Prisma.servicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.servicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.servicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          findFirst: {
            args: Prisma.servicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.servicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          findMany: {
            args: Prisma.servicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>[]
          }
          create: {
            args: Prisma.servicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          createMany: {
            args: Prisma.servicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.servicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          update: {
            args: Prisma.servicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          deleteMany: {
            args: Prisma.servicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.servicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.servicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$servicesPayload>
          }
          aggregate: {
            args: Prisma.ServicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServices>
          }
          groupBy: {
            args: Prisma.servicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.servicesCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicesCountAggregateOutputType> | number
          }
        }
      }
      serviceKind: {
        payload: Prisma.$serviceKindPayload<ExtArgs>
        fields: Prisma.serviceKindFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviceKindFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviceKindFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          findFirst: {
            args: Prisma.serviceKindFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviceKindFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          findMany: {
            args: Prisma.serviceKindFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>[]
          }
          create: {
            args: Prisma.serviceKindCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          createMany: {
            args: Prisma.serviceKindCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.serviceKindDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          update: {
            args: Prisma.serviceKindUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          deleteMany: {
            args: Prisma.serviceKindDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.serviceKindUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.serviceKindUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$serviceKindPayload>
          }
          aggregate: {
            args: Prisma.ServiceKindAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServiceKind>
          }
          groupBy: {
            args: Prisma.serviceKindGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServiceKindGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviceKindCountArgs<ExtArgs>,
            result: $Utils.Optional<ServiceKindCountAggregateOutputType> | number
          }
        }
      }
      logs: {
        payload: Prisma.$logsPayload<ExtArgs>
        fields: Prisma.logsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.logsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.logsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          findFirst: {
            args: Prisma.logsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.logsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          findMany: {
            args: Prisma.logsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>[]
          }
          create: {
            args: Prisma.logsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          createMany: {
            args: Prisma.logsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.logsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          update: {
            args: Prisma.logsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          deleteMany: {
            args: Prisma.logsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.logsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.logsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$logsPayload>
          }
          aggregate: {
            args: Prisma.LogsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLogs>
          }
          groupBy: {
            args: Prisma.logsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LogsGroupByOutputType>[]
          }
          count: {
            args: Prisma.logsCountArgs<ExtArgs>,
            result: $Utils.Optional<LogsCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      questions: {
        payload: Prisma.$questionsPayload<ExtArgs>
        fields: Prisma.questionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.questionsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.questionsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findFirst: {
            args: Prisma.questionsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.questionsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          findMany: {
            args: Prisma.questionsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>[]
          }
          create: {
            args: Prisma.questionsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          createMany: {
            args: Prisma.questionsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.questionsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          update: {
            args: Prisma.questionsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          deleteMany: {
            args: Prisma.questionsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.questionsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.questionsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$questionsPayload>
          }
          aggregate: {
            args: Prisma.QuestionsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestions>
          }
          groupBy: {
            args: Prisma.questionsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.questionsCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestionsCountAggregateOutputType> | number
          }
        }
      }
      offices: {
        payload: Prisma.$officesPayload<ExtArgs>
        fields: Prisma.officesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.officesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.officesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          findFirst: {
            args: Prisma.officesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.officesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          findMany: {
            args: Prisma.officesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>[]
          }
          create: {
            args: Prisma.officesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          createMany: {
            args: Prisma.officesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.officesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          update: {
            args: Prisma.officesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          deleteMany: {
            args: Prisma.officesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.officesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.officesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$officesPayload>
          }
          aggregate: {
            args: Prisma.OfficesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOffices>
          }
          groupBy: {
            args: Prisma.officesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OfficesGroupByOutputType>[]
          }
          count: {
            args: Prisma.officesCountArgs<ExtArgs>,
            result: $Utils.Optional<OfficesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SubmittersCountOutputType
   */

  export type SubmittersCountOutputType = {
    serviceFeedbacks: number
    Logs: number
  }

  export type SubmittersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | SubmittersCountOutputTypeCountServiceFeedbacksArgs
    Logs?: boolean | SubmittersCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes

  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmittersCountOutputType
     */
    select?: SubmittersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }


  /**
   * SubmittersCountOutputType without action
   */
  export type SubmittersCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logsWhereInput
  }



  /**
   * Count Type AgeCountOutputType
   */

  export type AgeCountOutputType = {
    Submitters: number
    ServiceFeedback: number
  }

  export type AgeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Submitters?: boolean | AgeCountOutputTypeCountSubmittersArgs
    ServiceFeedback?: boolean | AgeCountOutputTypeCountServiceFeedbackArgs
  }

  // Custom InputTypes

  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AgeCountOutputType
     */
    select?: AgeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeCountSubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submittersWhereInput
  }


  /**
   * AgeCountOutputType without action
   */
  export type AgeCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }



  /**
   * Count Type ServiceFeedbackCountOutputType
   */

  export type ServiceFeedbackCountOutputType = {
    feedbackQuestions: number
    logs: number
  }

  export type ServiceFeedbackCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbackQuestions?: boolean | ServiceFeedbackCountOutputTypeCountFeedbackQuestionsArgs
    logs?: boolean | ServiceFeedbackCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes

  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceFeedbackCountOutputType
     */
    select?: ServiceFeedbackCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeCountFeedbackQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedbackQuestionWhereInput
  }


  /**
   * ServiceFeedbackCountOutputType without action
   */
  export type ServiceFeedbackCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logsWhereInput
  }



  /**
   * Count Type ClientTypeCountOutputType
   */

  export type ClientTypeCountOutputType = {
    ServiceFeedback: number
    Submitters: number
  }

  export type ClientTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | ClientTypeCountOutputTypeCountServiceFeedbackArgs
    Submitters?: boolean | ClientTypeCountOutputTypeCountSubmittersArgs
  }

  // Custom InputTypes

  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientTypeCountOutputType
     */
    select?: ClientTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }


  /**
   * ClientTypeCountOutputType without action
   */
  export type ClientTypeCountOutputTypeCountSubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submittersWhereInput
  }



  /**
   * Count Type ServicesCountOutputType
   */

  export type ServicesCountOutputType = {
    serviceFeedbacks: number
  }

  export type ServicesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | ServicesCountOutputTypeCountServiceFeedbacksArgs
  }

  // Custom InputTypes

  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicesCountOutputType
     */
    select?: ServicesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServicesCountOutputType without action
   */
  export type ServicesCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }



  /**
   * Count Type ServiceKindCountOutputType
   */

  export type ServiceKindCountOutputType = {
    serviceFeedbacks: number
    Services: number
  }

  export type ServiceKindCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | ServiceKindCountOutputTypeCountServiceFeedbacksArgs
    Services?: boolean | ServiceKindCountOutputTypeCountServicesArgs
  }

  // Custom InputTypes

  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceKindCountOutputType
     */
    select?: ServiceKindCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeCountServiceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }


  /**
   * ServiceKindCountOutputType without action
   */
  export type ServiceKindCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: servicesWhereInput
  }



  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    FeedbackQuestion: number
    Questions: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | CategoriesCountOutputTypeCountFeedbackQuestionArgs
    Questions?: boolean | CategoriesCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountFeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedbackQuestionWhereInput
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
  }



  /**
   * Count Type QuestionsCountOutputType
   */

  export type QuestionsCountOutputType = {
    FeedbackQuestion: number
  }

  export type QuestionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | QuestionsCountOutputTypeCountFeedbackQuestionArgs
  }

  // Custom InputTypes

  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionsCountOutputType
     */
    select?: QuestionsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestionsCountOutputType without action
   */
  export type QuestionsCountOutputTypeCountFeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedbackQuestionWhereInput
  }



  /**
   * Count Type OfficesCountOutputType
   */

  export type OfficesCountOutputType = {
    ServiceFeedback: number
    Services: number
    users: number
  }

  export type OfficesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | OfficesCountOutputTypeCountServiceFeedbackArgs
    Services?: boolean | OfficesCountOutputTypeCountServicesArgs
    users?: boolean | OfficesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OfficesCountOutputType
     */
    select?: OfficesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: servicesWhereInput
  }


  /**
   * OfficesCountOutputType without action
   */
  export type OfficesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }



  /**
   * Models
   */

  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    uid: number | null
    officeId: number | null
  }

  export type UsersSumAggregateOutputType = {
    uid: number | null
    officeId: number | null
  }

  export type UsersMinAggregateOutputType = {
    uid: number | null
    username: string | null
    password: string | null
    role: string | null
    officeName: string | null
    officeId: number | null
  }

  export type UsersMaxAggregateOutputType = {
    uid: number | null
    username: string | null
    password: string | null
    role: string | null
    officeName: string | null
    officeId: number | null
  }

  export type UsersCountAggregateOutputType = {
    uid: number
    username: number
    password: number
    role: number
    officeName: number
    officeId: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    uid?: true
    officeId?: true
  }

  export type UsersSumAggregateInputType = {
    uid?: true
    officeId?: true
  }

  export type UsersMinAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
  }

  export type UsersMaxAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
  }

  export type UsersCountAggregateInputType = {
    uid?: true
    username?: true
    password?: true
    role?: true
    officeName?: true
    officeId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    uid: number
    username: string
    password: string
    role: string
    officeName: string | null
    officeId: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uid?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    officeName?: boolean
    officeId?: boolean
    office?: boolean | users$officeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    uid?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    officeName?: boolean
    officeId?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | users$officeArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      office: Prisma.$officesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      uid: number
      username: string
      password: string
      role: string
      officeName: string | null
      officeId: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const usersWithUidOnly = await prisma.users.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    office<T extends users$officeArgs<ExtArgs> = {}>(args?: Subset<T, users$officeArgs<ExtArgs>>): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly uid: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
    readonly officeName: FieldRef<"users", 'String'>
    readonly officeId: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users.office
   */
  export type users$officeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    where?: officesWhereInput
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model submitters
   */

  export type AggregateSubmitters = {
    _count: SubmittersCountAggregateOutputType | null
    _avg: SubmittersAvgAggregateOutputType | null
    _sum: SubmittersSumAggregateOutputType | null
    _min: SubmittersMinAggregateOutputType | null
    _max: SubmittersMaxAggregateOutputType | null
  }

  export type SubmittersAvgAggregateOutputType = {
    id: number | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
  }

  export type SubmittersSumAggregateOutputType = {
    id: number | null
    ageId: number | null
    specAge: number | null
    clientTypeId: number | null
  }

  export type SubmittersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    ageId: number | null
    ageBracket: string | null
    specAge: number | null
    clientTypeId: number | null
    sex: string | null
  }

  export type SubmittersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    ageId: number | null
    ageBracket: string | null
    specAge: number | null
    clientTypeId: number | null
    sex: string | null
  }

  export type SubmittersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    ageId: number
    ageBracket: number
    specAge: number
    clientTypeId: number
    sex: number
    _all: number
  }


  export type SubmittersAvgAggregateInputType = {
    id?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
  }

  export type SubmittersSumAggregateInputType = {
    id?: true
    ageId?: true
    specAge?: true
    clientTypeId?: true
  }

  export type SubmittersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    ageBracket?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
  }

  export type SubmittersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    ageBracket?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
  }

  export type SubmittersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    ageId?: true
    ageBracket?: true
    specAge?: true
    clientTypeId?: true
    sex?: true
    _all?: true
  }

  export type SubmittersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submitters to aggregate.
     */
    where?: submittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submitters to fetch.
     */
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: submittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned submitters
    **/
    _count?: true | SubmittersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmittersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmittersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmittersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmittersMaxAggregateInputType
  }

  export type GetSubmittersAggregateType<T extends SubmittersAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmitters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmitters[P]>
      : GetScalarType<T[P], AggregateSubmitters[P]>
  }




  export type submittersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: submittersWhereInput
    orderBy?: submittersOrderByWithAggregationInput | submittersOrderByWithAggregationInput[]
    by: SubmittersScalarFieldEnum[] | SubmittersScalarFieldEnum
    having?: submittersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmittersCountAggregateInputType | true
    _avg?: SubmittersAvgAggregateInputType
    _sum?: SubmittersSumAggregateInputType
    _min?: SubmittersMinAggregateInputType
    _max?: SubmittersMaxAggregateInputType
  }

  export type SubmittersGroupByOutputType = {
    id: number
    name: string | null
    email: string
    ageId: number | null
    ageBracket: string | null
    specAge: number | null
    clientTypeId: number | null
    sex: string
    _count: SubmittersCountAggregateOutputType | null
    _avg: SubmittersAvgAggregateOutputType | null
    _sum: SubmittersSumAggregateOutputType | null
    _min: SubmittersMinAggregateOutputType | null
    _max: SubmittersMaxAggregateOutputType | null
  }

  type GetSubmittersGroupByPayload<T extends submittersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmittersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmittersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmittersGroupByOutputType[P]>
            : GetScalarType<T[P], SubmittersGroupByOutputType[P]>
        }
      >
    >


  export type submittersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    ageId?: boolean
    ageBracket?: boolean
    specAge?: boolean
    clientTypeId?: boolean
    sex?: boolean
    age?: boolean | submitters$ageArgs<ExtArgs>
    clientType?: boolean | submitters$clientTypeArgs<ExtArgs>
    serviceFeedbacks?: boolean | submitters$serviceFeedbacksArgs<ExtArgs>
    Logs?: boolean | submitters$LogsArgs<ExtArgs>
    _count?: boolean | SubmittersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submitters"]>

  export type submittersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    ageId?: boolean
    ageBracket?: boolean
    specAge?: boolean
    clientTypeId?: boolean
    sex?: boolean
  }

  export type submittersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    age?: boolean | submitters$ageArgs<ExtArgs>
    clientType?: boolean | submitters$clientTypeArgs<ExtArgs>
    serviceFeedbacks?: boolean | submitters$serviceFeedbacksArgs<ExtArgs>
    Logs?: boolean | submitters$LogsArgs<ExtArgs>
    _count?: boolean | SubmittersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $submittersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "submitters"
    objects: {
      age: Prisma.$agePayload<ExtArgs> | null
      clientType: Prisma.$clientTypePayload<ExtArgs> | null
      serviceFeedbacks: Prisma.$serviceFeedbackPayload<ExtArgs>[]
      Logs: Prisma.$logsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      email: string
      ageId: number | null
      ageBracket: string | null
      specAge: number | null
      clientTypeId: number | null
      sex: string
    }, ExtArgs["result"]["submitters"]>
    composites: {}
  }


  type submittersGetPayload<S extends boolean | null | undefined | submittersDefaultArgs> = $Result.GetResult<Prisma.$submittersPayload, S>

  type submittersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<submittersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SubmittersCountAggregateInputType | true
    }

  export interface submittersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['submitters'], meta: { name: 'submitters' } }
    /**
     * Find zero or one Submitters that matches the filter.
     * @param {submittersFindUniqueArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends submittersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, submittersFindUniqueArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Submitters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {submittersFindUniqueOrThrowArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends submittersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Submitters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersFindFirstArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends submittersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersFindFirstArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Submitters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersFindFirstOrThrowArgs} args - Arguments to find a Submitters
     * @example
     * // Get one Submitters
     * const submitters = await prisma.submitters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends submittersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Submitters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submitters
     * const submitters = await prisma.submitters.findMany()
     * 
     * // Get first 10 Submitters
     * const submitters = await prisma.submitters.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const submittersWithIdOnly = await prisma.submitters.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends submittersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Submitters.
     * @param {submittersCreateArgs} args - Arguments to create a Submitters.
     * @example
     * // Create one Submitters
     * const Submitters = await prisma.submitters.create({
     *   data: {
     *     // ... data to create a Submitters
     *   }
     * })
     * 
    **/
    create<T extends submittersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, submittersCreateArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Submitters.
     *     @param {submittersCreateManyArgs} args - Arguments to create many Submitters.
     *     @example
     *     // Create many Submitters
     *     const submitters = await prisma.submitters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends submittersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Submitters.
     * @param {submittersDeleteArgs} args - Arguments to delete one Submitters.
     * @example
     * // Delete one Submitters
     * const Submitters = await prisma.submitters.delete({
     *   where: {
     *     // ... filter to delete one Submitters
     *   }
     * })
     * 
    **/
    delete<T extends submittersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, submittersDeleteArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Submitters.
     * @param {submittersUpdateArgs} args - Arguments to update one Submitters.
     * @example
     * // Update one Submitters
     * const submitters = await prisma.submitters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends submittersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, submittersUpdateArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Submitters.
     * @param {submittersDeleteManyArgs} args - Arguments to filter Submitters to delete.
     * @example
     * // Delete a few Submitters
     * const { count } = await prisma.submitters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends submittersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, submittersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submitters
     * const submitters = await prisma.submitters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends submittersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, submittersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submitters.
     * @param {submittersUpsertArgs} args - Arguments to update or create a Submitters.
     * @example
     * // Update or create a Submitters
     * const submitters = await prisma.submitters.upsert({
     *   create: {
     *     // ... data to create a Submitters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submitters we want to update
     *   }
     * })
    **/
    upsert<T extends submittersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, submittersUpsertArgs<ExtArgs>>
    ): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersCountArgs} args - Arguments to filter Submitters to count.
     * @example
     * // Count the number of Submitters
     * const count = await prisma.submitters.count({
     *   where: {
     *     // ... the filter for the Submitters we want to count
     *   }
     * })
    **/
    count<T extends submittersCountArgs>(
      args?: Subset<T, submittersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmittersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmittersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmittersAggregateArgs>(args: Subset<T, SubmittersAggregateArgs>): Prisma.PrismaPromise<GetSubmittersAggregateType<T>>

    /**
     * Group by Submitters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {submittersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends submittersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: submittersGroupByArgs['orderBy'] }
        : { orderBy?: submittersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, submittersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmittersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the submitters model
   */
  readonly fields: submittersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for submitters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__submittersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    age<T extends submitters$ageArgs<ExtArgs> = {}>(args?: Subset<T, submitters$ageArgs<ExtArgs>>): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    clientType<T extends submitters$clientTypeArgs<ExtArgs> = {}>(args?: Subset<T, submitters$clientTypeArgs<ExtArgs>>): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceFeedbacks<T extends submitters$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, submitters$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Logs<T extends submitters$LogsArgs<ExtArgs> = {}>(args?: Subset<T, submitters$LogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the submitters model
   */ 
  interface submittersFieldRefs {
    readonly id: FieldRef<"submitters", 'Int'>
    readonly name: FieldRef<"submitters", 'String'>
    readonly email: FieldRef<"submitters", 'String'>
    readonly ageId: FieldRef<"submitters", 'Int'>
    readonly ageBracket: FieldRef<"submitters", 'String'>
    readonly specAge: FieldRef<"submitters", 'Int'>
    readonly clientTypeId: FieldRef<"submitters", 'Int'>
    readonly sex: FieldRef<"submitters", 'String'>
  }
    

  // Custom InputTypes

  /**
   * submitters findUnique
   */
  export type submittersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter, which submitters to fetch.
     */
    where: submittersWhereUniqueInput
  }


  /**
   * submitters findUniqueOrThrow
   */
  export type submittersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter, which submitters to fetch.
     */
    where: submittersWhereUniqueInput
  }


  /**
   * submitters findFirst
   */
  export type submittersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter, which submitters to fetch.
     */
    where?: submittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submitters to fetch.
     */
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submitters.
     */
    cursor?: submittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submitters.
     */
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * submitters findFirstOrThrow
   */
  export type submittersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter, which submitters to fetch.
     */
    where?: submittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submitters to fetch.
     */
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for submitters.
     */
    cursor?: submittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submitters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of submitters.
     */
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * submitters findMany
   */
  export type submittersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter, which submitters to fetch.
     */
    where?: submittersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of submitters to fetch.
     */
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing submitters.
     */
    cursor?: submittersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` submitters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` submitters.
     */
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * submitters create
   */
  export type submittersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * The data needed to create a submitters.
     */
    data: XOR<submittersCreateInput, submittersUncheckedCreateInput>
  }


  /**
   * submitters createMany
   */
  export type submittersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many submitters.
     */
    data: submittersCreateManyInput | submittersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * submitters update
   */
  export type submittersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * The data needed to update a submitters.
     */
    data: XOR<submittersUpdateInput, submittersUncheckedUpdateInput>
    /**
     * Choose, which submitters to update.
     */
    where: submittersWhereUniqueInput
  }


  /**
   * submitters updateMany
   */
  export type submittersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update submitters.
     */
    data: XOR<submittersUpdateManyMutationInput, submittersUncheckedUpdateManyInput>
    /**
     * Filter which submitters to update
     */
    where?: submittersWhereInput
  }


  /**
   * submitters upsert
   */
  export type submittersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * The filter to search for the submitters to update in case it exists.
     */
    where: submittersWhereUniqueInput
    /**
     * In case the submitters found by the `where` argument doesn't exist, create a new submitters with this data.
     */
    create: XOR<submittersCreateInput, submittersUncheckedCreateInput>
    /**
     * In case the submitters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<submittersUpdateInput, submittersUncheckedUpdateInput>
  }


  /**
   * submitters delete
   */
  export type submittersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    /**
     * Filter which submitters to delete.
     */
    where: submittersWhereUniqueInput
  }


  /**
   * submitters deleteMany
   */
  export type submittersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which submitters to delete
     */
    where?: submittersWhereInput
  }


  /**
   * submitters.age
   */
  export type submitters$ageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    where?: ageWhereInput
  }


  /**
   * submitters.clientType
   */
  export type submitters$clientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    where?: clientTypeWhereInput
  }


  /**
   * submitters.serviceFeedbacks
   */
  export type submitters$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * submitters.Logs
   */
  export type submitters$LogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    where?: logsWhereInput
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    cursor?: logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * submitters without action
   */
  export type submittersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
  }



  /**
   * Model age
   */

  export type AggregateAge = {
    _count: AgeCountAggregateOutputType | null
    _avg: AgeAvgAggregateOutputType | null
    _sum: AgeSumAggregateOutputType | null
    _min: AgeMinAggregateOutputType | null
    _max: AgeMaxAggregateOutputType | null
  }

  export type AgeAvgAggregateOutputType = {
    id: number | null
  }

  export type AgeSumAggregateOutputType = {
    id: number | null
  }

  export type AgeMinAggregateOutputType = {
    id: number | null
    description: string | null
  }

  export type AgeMaxAggregateOutputType = {
    id: number | null
    description: string | null
  }

  export type AgeCountAggregateOutputType = {
    id: number
    description: number
    _all: number
  }


  export type AgeAvgAggregateInputType = {
    id?: true
  }

  export type AgeSumAggregateInputType = {
    id?: true
  }

  export type AgeMinAggregateInputType = {
    id?: true
    description?: true
  }

  export type AgeMaxAggregateInputType = {
    id?: true
    description?: true
  }

  export type AgeCountAggregateInputType = {
    id?: true
    description?: true
    _all?: true
  }

  export type AgeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which age to aggregate.
     */
    where?: ageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ages to fetch.
     */
    orderBy?: ageOrderByWithRelationInput | ageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ages
    **/
    _count?: true | AgeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AgeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AgeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AgeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AgeMaxAggregateInputType
  }

  export type GetAgeAggregateType<T extends AgeAggregateArgs> = {
        [P in keyof T & keyof AggregateAge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAge[P]>
      : GetScalarType<T[P], AggregateAge[P]>
  }




  export type ageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ageWhereInput
    orderBy?: ageOrderByWithAggregationInput | ageOrderByWithAggregationInput[]
    by: AgeScalarFieldEnum[] | AgeScalarFieldEnum
    having?: ageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AgeCountAggregateInputType | true
    _avg?: AgeAvgAggregateInputType
    _sum?: AgeSumAggregateInputType
    _min?: AgeMinAggregateInputType
    _max?: AgeMaxAggregateInputType
  }

  export type AgeGroupByOutputType = {
    id: number
    description: string
    _count: AgeCountAggregateOutputType | null
    _avg: AgeAvgAggregateOutputType | null
    _sum: AgeSumAggregateOutputType | null
    _min: AgeMinAggregateOutputType | null
    _max: AgeMaxAggregateOutputType | null
  }

  type GetAgeGroupByPayload<T extends ageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AgeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AgeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AgeGroupByOutputType[P]>
            : GetScalarType<T[P], AgeGroupByOutputType[P]>
        }
      >
    >


  export type ageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    Submitters?: boolean | age$SubmittersArgs<ExtArgs>
    ServiceFeedback?: boolean | age$ServiceFeedbackArgs<ExtArgs>
    _count?: boolean | AgeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["age"]>

  export type ageSelectScalar = {
    id?: boolean
    description?: boolean
  }

  export type ageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Submitters?: boolean | age$SubmittersArgs<ExtArgs>
    ServiceFeedback?: boolean | age$ServiceFeedbackArgs<ExtArgs>
    _count?: boolean | AgeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $agePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "age"
    objects: {
      Submitters: Prisma.$submittersPayload<ExtArgs>[]
      ServiceFeedback: Prisma.$serviceFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
    }, ExtArgs["result"]["age"]>
    composites: {}
  }


  type ageGetPayload<S extends boolean | null | undefined | ageDefaultArgs> = $Result.GetResult<Prisma.$agePayload, S>

  type ageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ageFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: AgeCountAggregateInputType | true
    }

  export interface ageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['age'], meta: { name: 'age' } }
    /**
     * Find zero or one Age that matches the filter.
     * @param {ageFindUniqueArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ageFindUniqueArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Age that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ageFindUniqueOrThrowArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Age that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageFindFirstArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ageFindFirstArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Age that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageFindFirstOrThrowArgs} args - Arguments to find a Age
     * @example
     * // Get one Age
     * const age = await prisma.age.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ages
     * const ages = await prisma.age.findMany()
     * 
     * // Get first 10 Ages
     * const ages = await prisma.age.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ageWithIdOnly = await prisma.age.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Age.
     * @param {ageCreateArgs} args - Arguments to create a Age.
     * @example
     * // Create one Age
     * const Age = await prisma.age.create({
     *   data: {
     *     // ... data to create a Age
     *   }
     * })
     * 
    **/
    create<T extends ageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ageCreateArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ages.
     *     @param {ageCreateManyArgs} args - Arguments to create many Ages.
     *     @example
     *     // Create many Ages
     *     const age = await prisma.age.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Age.
     * @param {ageDeleteArgs} args - Arguments to delete one Age.
     * @example
     * // Delete one Age
     * const Age = await prisma.age.delete({
     *   where: {
     *     // ... filter to delete one Age
     *   }
     * })
     * 
    **/
    delete<T extends ageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ageDeleteArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Age.
     * @param {ageUpdateArgs} args - Arguments to update one Age.
     * @example
     * // Update one Age
     * const age = await prisma.age.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ageUpdateArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ages.
     * @param {ageDeleteManyArgs} args - Arguments to filter Ages to delete.
     * @example
     * // Delete a few Ages
     * const { count } = await prisma.age.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ages
     * const age = await prisma.age.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Age.
     * @param {ageUpsertArgs} args - Arguments to update or create a Age.
     * @example
     * // Update or create a Age
     * const age = await prisma.age.upsert({
     *   create: {
     *     // ... data to create a Age
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Age we want to update
     *   }
     * })
    **/
    upsert<T extends ageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ageUpsertArgs<ExtArgs>>
    ): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageCountArgs} args - Arguments to filter Ages to count.
     * @example
     * // Count the number of Ages
     * const count = await prisma.age.count({
     *   where: {
     *     // ... the filter for the Ages we want to count
     *   }
     * })
    **/
    count<T extends ageCountArgs>(
      args?: Subset<T, ageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AgeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Age.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AgeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AgeAggregateArgs>(args: Subset<T, AgeAggregateArgs>): Prisma.PrismaPromise<GetAgeAggregateType<T>>

    /**
     * Group by Age.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ageGroupByArgs['orderBy'] }
        : { orderBy?: ageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAgeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the age model
   */
  readonly fields: ageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for age.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Submitters<T extends age$SubmittersArgs<ExtArgs> = {}>(args?: Subset<T, age$SubmittersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findMany'> | Null>;

    ServiceFeedback<T extends age$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, age$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the age model
   */ 
  interface ageFieldRefs {
    readonly id: FieldRef<"age", 'Int'>
    readonly description: FieldRef<"age", 'String'>
  }
    

  // Custom InputTypes

  /**
   * age findUnique
   */
  export type ageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter, which age to fetch.
     */
    where: ageWhereUniqueInput
  }


  /**
   * age findUniqueOrThrow
   */
  export type ageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter, which age to fetch.
     */
    where: ageWhereUniqueInput
  }


  /**
   * age findFirst
   */
  export type ageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter, which age to fetch.
     */
    where?: ageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ages to fetch.
     */
    orderBy?: ageOrderByWithRelationInput | ageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ages.
     */
    cursor?: ageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ages.
     */
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * age findFirstOrThrow
   */
  export type ageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter, which age to fetch.
     */
    where?: ageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ages to fetch.
     */
    orderBy?: ageOrderByWithRelationInput | ageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ages.
     */
    cursor?: ageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ages.
     */
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * age findMany
   */
  export type ageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter, which ages to fetch.
     */
    where?: ageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ages to fetch.
     */
    orderBy?: ageOrderByWithRelationInput | ageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ages.
     */
    cursor?: ageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ages.
     */
    skip?: number
    distinct?: AgeScalarFieldEnum | AgeScalarFieldEnum[]
  }


  /**
   * age create
   */
  export type ageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * The data needed to create a age.
     */
    data: XOR<ageCreateInput, ageUncheckedCreateInput>
  }


  /**
   * age createMany
   */
  export type ageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ages.
     */
    data: ageCreateManyInput | ageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * age update
   */
  export type ageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * The data needed to update a age.
     */
    data: XOR<ageUpdateInput, ageUncheckedUpdateInput>
    /**
     * Choose, which age to update.
     */
    where: ageWhereUniqueInput
  }


  /**
   * age updateMany
   */
  export type ageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ages.
     */
    data: XOR<ageUpdateManyMutationInput, ageUncheckedUpdateManyInput>
    /**
     * Filter which ages to update
     */
    where?: ageWhereInput
  }


  /**
   * age upsert
   */
  export type ageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * The filter to search for the age to update in case it exists.
     */
    where: ageWhereUniqueInput
    /**
     * In case the age found by the `where` argument doesn't exist, create a new age with this data.
     */
    create: XOR<ageCreateInput, ageUncheckedCreateInput>
    /**
     * In case the age was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ageUpdateInput, ageUncheckedUpdateInput>
  }


  /**
   * age delete
   */
  export type ageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    /**
     * Filter which age to delete.
     */
    where: ageWhereUniqueInput
  }


  /**
   * age deleteMany
   */
  export type ageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ages to delete
     */
    where?: ageWhereInput
  }


  /**
   * age.Submitters
   */
  export type age$SubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    where?: submittersWhereInput
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    cursor?: submittersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * age.ServiceFeedback
   */
  export type age$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * age without action
   */
  export type ageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
  }



  /**
   * Model serviceFeedback
   */

  export type AggregateServiceFeedback = {
    _count: ServiceFeedbackCountAggregateOutputType | null
    _avg: ServiceFeedbackAvgAggregateOutputType | null
    _sum: ServiceFeedbackSumAggregateOutputType | null
    _min: ServiceFeedbackMinAggregateOutputType | null
    _max: ServiceFeedbackMaxAggregateOutputType | null
  }

  export type ServiceFeedbackAvgAggregateOutputType = {
    id: number | null
    submitterId: number | null
    serviceId: number | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    officeId: number | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
  }

  export type ServiceFeedbackSumAggregateOutputType = {
    id: number | null
    submitterId: number | null
    serviceId: number | null
    typeId: number | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    officeId: number | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
  }

  export type ServiceFeedbackMinAggregateOutputType = {
    id: number | null
    startTime: Date | null
    submitterId: number | null
    submittername: string | null
    email: string | null
    language: string | null
    serviceDesc: string | null
    serviceId: number | null
    otherService: string | null
    typeId: number | null
    sex: string | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number | null
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
    uniqueIdentifier: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceFeedbackMaxAggregateOutputType = {
    id: number | null
    startTime: Date | null
    submitterId: number | null
    submittername: string | null
    email: string | null
    language: string | null
    serviceDesc: string | null
    serviceId: number | null
    otherService: string | null
    typeId: number | null
    sex: string | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number | null
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number | null
    responsiveness: number | null
    reliability: number | null
    accessAndFacilities: number | null
    communication: number | null
    costs: number | null
    integrity: number | null
    assurance: number | null
    outcome: number | null
    uniqueIdentifier: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceFeedbackCountAggregateOutputType = {
    id: number
    startTime: number
    submitterId: number
    submittername: number
    email: number
    language: number
    serviceDesc: number
    serviceId: number
    otherService: number
    typeId: number
    sex: number
    ageBracketId: number
    specificAge: number
    serviceKindId: number
    serviceKindDescription: number
    relatedClientType: number
    ageBracket: number
    officeId: number
    officeName: number
    consent: number
    awareCC: number
    seeCC: number
    useCC: number
    overallComment: number
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServiceFeedbackAvgAggregateInputType = {
    id?: true
    submitterId?: true
    serviceId?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    officeId?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
  }

  export type ServiceFeedbackSumAggregateInputType = {
    id?: true
    submitterId?: true
    serviceId?: true
    typeId?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    officeId?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
  }

  export type ServiceFeedbackMinAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    email?: true
    language?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    sex?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceFeedbackMaxAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    email?: true
    language?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    sex?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceFeedbackCountAggregateInputType = {
    id?: true
    startTime?: true
    submitterId?: true
    submittername?: true
    email?: true
    language?: true
    serviceDesc?: true
    serviceId?: true
    otherService?: true
    typeId?: true
    sex?: true
    ageBracketId?: true
    specificAge?: true
    serviceKindId?: true
    serviceKindDescription?: true
    relatedClientType?: true
    ageBracket?: true
    officeId?: true
    officeName?: true
    consent?: true
    awareCC?: true
    seeCC?: true
    useCC?: true
    overallComment?: true
    averageRating?: true
    responsiveness?: true
    reliability?: true
    accessAndFacilities?: true
    communication?: true
    costs?: true
    integrity?: true
    assurance?: true
    outcome?: true
    uniqueIdentifier?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServiceFeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceFeedback to aggregate.
     */
    where?: serviceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceFeedbacks to fetch.
     */
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned serviceFeedbacks
    **/
    _count?: true | ServiceFeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceFeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceFeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceFeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceFeedbackMaxAggregateInputType
  }

  export type GetServiceFeedbackAggregateType<T extends ServiceFeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceFeedback[P]>
      : GetScalarType<T[P], AggregateServiceFeedback[P]>
  }




  export type serviceFeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithAggregationInput | serviceFeedbackOrderByWithAggregationInput[]
    by: ServiceFeedbackScalarFieldEnum[] | ServiceFeedbackScalarFieldEnum
    having?: serviceFeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceFeedbackCountAggregateInputType | true
    _avg?: ServiceFeedbackAvgAggregateInputType
    _sum?: ServiceFeedbackSumAggregateInputType
    _min?: ServiceFeedbackMinAggregateInputType
    _max?: ServiceFeedbackMaxAggregateInputType
  }

  export type ServiceFeedbackGroupByOutputType = {
    id: number
    startTime: Date | null
    submitterId: number
    submittername: string
    email: string | null
    language: string | null
    serviceDesc: string | null
    serviceId: number
    otherService: string | null
    typeId: number | null
    sex: string | null
    ageBracketId: number | null
    specificAge: number | null
    serviceKindId: number | null
    serviceKindDescription: string | null
    relatedClientType: string | null
    ageBracket: string | null
    officeId: number
    officeName: string | null
    consent: string | null
    awareCC: string | null
    seeCC: string | null
    useCC: string | null
    overallComment: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at: Date
    updated_at: Date
    _count: ServiceFeedbackCountAggregateOutputType | null
    _avg: ServiceFeedbackAvgAggregateOutputType | null
    _sum: ServiceFeedbackSumAggregateOutputType | null
    _min: ServiceFeedbackMinAggregateOutputType | null
    _max: ServiceFeedbackMaxAggregateOutputType | null
  }

  type GetServiceFeedbackGroupByPayload<T extends serviceFeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceFeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceFeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceFeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceFeedbackGroupByOutputType[P]>
        }
      >
    >


  export type serviceFeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    startTime?: boolean
    submitterId?: boolean
    submittername?: boolean
    email?: boolean
    language?: boolean
    serviceDesc?: boolean
    serviceId?: boolean
    otherService?: boolean
    typeId?: boolean
    sex?: boolean
    ageBracketId?: boolean
    specificAge?: boolean
    serviceKindId?: boolean
    serviceKindDescription?: boolean
    relatedClientType?: boolean
    ageBracket?: boolean
    officeId?: boolean
    officeName?: boolean
    consent?: boolean
    awareCC?: boolean
    seeCC?: boolean
    useCC?: boolean
    overallComment?: boolean
    averageRating?: boolean
    responsiveness?: boolean
    reliability?: boolean
    accessAndFacilities?: boolean
    communication?: boolean
    costs?: boolean
    integrity?: boolean
    assurance?: boolean
    outcome?: boolean
    uniqueIdentifier?: boolean
    created_at?: boolean
    updated_at?: boolean
    submitter?: boolean | submittersDefaultArgs<ExtArgs>
    service?: boolean | serviceFeedback$serviceArgs<ExtArgs>
    ClientType?: boolean | serviceFeedback$ClientTypeArgs<ExtArgs>
    Age?: boolean | serviceFeedback$AgeArgs<ExtArgs>
    serviceKind?: boolean | serviceFeedback$serviceKindArgs<ExtArgs>
    officeVisited?: boolean | officesDefaultArgs<ExtArgs>
    feedbackQuestions?: boolean | serviceFeedback$feedbackQuestionsArgs<ExtArgs>
    logs?: boolean | serviceFeedback$logsArgs<ExtArgs>
    _count?: boolean | ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceFeedback"]>

  export type serviceFeedbackSelectScalar = {
    id?: boolean
    startTime?: boolean
    submitterId?: boolean
    submittername?: boolean
    email?: boolean
    language?: boolean
    serviceDesc?: boolean
    serviceId?: boolean
    otherService?: boolean
    typeId?: boolean
    sex?: boolean
    ageBracketId?: boolean
    specificAge?: boolean
    serviceKindId?: boolean
    serviceKindDescription?: boolean
    relatedClientType?: boolean
    ageBracket?: boolean
    officeId?: boolean
    officeName?: boolean
    consent?: boolean
    awareCC?: boolean
    seeCC?: boolean
    useCC?: boolean
    overallComment?: boolean
    averageRating?: boolean
    responsiveness?: boolean
    reliability?: boolean
    accessAndFacilities?: boolean
    communication?: boolean
    costs?: boolean
    integrity?: boolean
    assurance?: boolean
    outcome?: boolean
    uniqueIdentifier?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type serviceFeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submitter?: boolean | submittersDefaultArgs<ExtArgs>
    service?: boolean | serviceFeedback$serviceArgs<ExtArgs>
    ClientType?: boolean | serviceFeedback$ClientTypeArgs<ExtArgs>
    Age?: boolean | serviceFeedback$AgeArgs<ExtArgs>
    serviceKind?: boolean | serviceFeedback$serviceKindArgs<ExtArgs>
    officeVisited?: boolean | officesDefaultArgs<ExtArgs>
    feedbackQuestions?: boolean | serviceFeedback$feedbackQuestionsArgs<ExtArgs>
    logs?: boolean | serviceFeedback$logsArgs<ExtArgs>
    _count?: boolean | ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $serviceFeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "serviceFeedback"
    objects: {
      submitter: Prisma.$submittersPayload<ExtArgs>
      service: Prisma.$servicesPayload<ExtArgs> | null
      ClientType: Prisma.$clientTypePayload<ExtArgs> | null
      Age: Prisma.$agePayload<ExtArgs> | null
      serviceKind: Prisma.$serviceKindPayload<ExtArgs> | null
      officeVisited: Prisma.$officesPayload<ExtArgs>
      feedbackQuestions: Prisma.$feedbackQuestionPayload<ExtArgs>[]
      logs: Prisma.$logsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      startTime: Date | null
      submitterId: number
      submittername: string
      email: string | null
      language: string | null
      serviceDesc: string | null
      serviceId: number
      otherService: string | null
      typeId: number | null
      sex: string | null
      ageBracketId: number | null
      specificAge: number | null
      serviceKindId: number | null
      serviceKindDescription: string | null
      relatedClientType: string | null
      ageBracket: string | null
      officeId: number
      officeName: string | null
      consent: string | null
      awareCC: string | null
      seeCC: string | null
      useCC: string | null
      overallComment: string | null
      averageRating: number
      responsiveness: number
      reliability: number
      accessAndFacilities: number
      communication: number
      costs: number
      integrity: number
      assurance: number
      outcome: number
      uniqueIdentifier: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["serviceFeedback"]>
    composites: {}
  }


  type serviceFeedbackGetPayload<S extends boolean | null | undefined | serviceFeedbackDefaultArgs> = $Result.GetResult<Prisma.$serviceFeedbackPayload, S>

  type serviceFeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<serviceFeedbackFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServiceFeedbackCountAggregateInputType | true
    }

  export interface serviceFeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['serviceFeedback'], meta: { name: 'serviceFeedback' } }
    /**
     * Find zero or one ServiceFeedback that matches the filter.
     * @param {serviceFeedbackFindUniqueArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends serviceFeedbackFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackFindUniqueArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceFeedback that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {serviceFeedbackFindUniqueOrThrowArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends serviceFeedbackFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceFeedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackFindFirstArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends serviceFeedbackFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackFindFirstArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceFeedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackFindFirstOrThrowArgs} args - Arguments to find a ServiceFeedback
     * @example
     * // Get one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends serviceFeedbackFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceFeedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceFeedbacks
     * const serviceFeedbacks = await prisma.serviceFeedback.findMany()
     * 
     * // Get first 10 ServiceFeedbacks
     * const serviceFeedbacks = await prisma.serviceFeedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceFeedbackWithIdOnly = await prisma.serviceFeedback.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends serviceFeedbackFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceFeedback.
     * @param {serviceFeedbackCreateArgs} args - Arguments to create a ServiceFeedback.
     * @example
     * // Create one ServiceFeedback
     * const ServiceFeedback = await prisma.serviceFeedback.create({
     *   data: {
     *     // ... data to create a ServiceFeedback
     *   }
     * })
     * 
    **/
    create<T extends serviceFeedbackCreateArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackCreateArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceFeedbacks.
     *     @param {serviceFeedbackCreateManyArgs} args - Arguments to create many ServiceFeedbacks.
     *     @example
     *     // Create many ServiceFeedbacks
     *     const serviceFeedback = await prisma.serviceFeedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends serviceFeedbackCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceFeedback.
     * @param {serviceFeedbackDeleteArgs} args - Arguments to delete one ServiceFeedback.
     * @example
     * // Delete one ServiceFeedback
     * const ServiceFeedback = await prisma.serviceFeedback.delete({
     *   where: {
     *     // ... filter to delete one ServiceFeedback
     *   }
     * })
     * 
    **/
    delete<T extends serviceFeedbackDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackDeleteArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceFeedback.
     * @param {serviceFeedbackUpdateArgs} args - Arguments to update one ServiceFeedback.
     * @example
     * // Update one ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends serviceFeedbackUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackUpdateArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceFeedbacks.
     * @param {serviceFeedbackDeleteManyArgs} args - Arguments to filter ServiceFeedbacks to delete.
     * @example
     * // Delete a few ServiceFeedbacks
     * const { count } = await prisma.serviceFeedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends serviceFeedbackDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceFeedbackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceFeedbacks
     * const serviceFeedback = await prisma.serviceFeedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends serviceFeedbackUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceFeedback.
     * @param {serviceFeedbackUpsertArgs} args - Arguments to update or create a ServiceFeedback.
     * @example
     * // Update or create a ServiceFeedback
     * const serviceFeedback = await prisma.serviceFeedback.upsert({
     *   create: {
     *     // ... data to create a ServiceFeedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceFeedback we want to update
     *   }
     * })
    **/
    upsert<T extends serviceFeedbackUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, serviceFeedbackUpsertArgs<ExtArgs>>
    ): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceFeedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackCountArgs} args - Arguments to filter ServiceFeedbacks to count.
     * @example
     * // Count the number of ServiceFeedbacks
     * const count = await prisma.serviceFeedback.count({
     *   where: {
     *     // ... the filter for the ServiceFeedbacks we want to count
     *   }
     * })
    **/
    count<T extends serviceFeedbackCountArgs>(
      args?: Subset<T, serviceFeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceFeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceFeedbackAggregateArgs>(args: Subset<T, ServiceFeedbackAggregateArgs>): Prisma.PrismaPromise<GetServiceFeedbackAggregateType<T>>

    /**
     * Group by ServiceFeedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviceFeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviceFeedbackGroupByArgs['orderBy'] }
        : { orderBy?: serviceFeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviceFeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the serviceFeedback model
   */
  readonly fields: serviceFeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for serviceFeedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviceFeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    submitter<T extends submittersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, submittersDefaultArgs<ExtArgs>>): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    service<T extends serviceFeedback$serviceArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$serviceArgs<ExtArgs>>): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ClientType<T extends serviceFeedback$ClientTypeArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$ClientTypeArgs<ExtArgs>>): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Age<T extends serviceFeedback$AgeArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$AgeArgs<ExtArgs>>): Prisma__ageClient<$Result.GetResult<Prisma.$agePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceKind<T extends serviceFeedback$serviceKindArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$serviceKindArgs<ExtArgs>>): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    officeVisited<T extends officesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, officesDefaultArgs<ExtArgs>>): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    feedbackQuestions<T extends serviceFeedback$feedbackQuestionsArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$feedbackQuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    logs<T extends serviceFeedback$logsArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedback$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the serviceFeedback model
   */ 
  interface serviceFeedbackFieldRefs {
    readonly id: FieldRef<"serviceFeedback", 'Int'>
    readonly startTime: FieldRef<"serviceFeedback", 'DateTime'>
    readonly submitterId: FieldRef<"serviceFeedback", 'Int'>
    readonly submittername: FieldRef<"serviceFeedback", 'String'>
    readonly email: FieldRef<"serviceFeedback", 'String'>
    readonly language: FieldRef<"serviceFeedback", 'String'>
    readonly serviceDesc: FieldRef<"serviceFeedback", 'String'>
    readonly serviceId: FieldRef<"serviceFeedback", 'Int'>
    readonly otherService: FieldRef<"serviceFeedback", 'String'>
    readonly typeId: FieldRef<"serviceFeedback", 'Int'>
    readonly sex: FieldRef<"serviceFeedback", 'String'>
    readonly ageBracketId: FieldRef<"serviceFeedback", 'Int'>
    readonly specificAge: FieldRef<"serviceFeedback", 'Int'>
    readonly serviceKindId: FieldRef<"serviceFeedback", 'Int'>
    readonly serviceKindDescription: FieldRef<"serviceFeedback", 'String'>
    readonly relatedClientType: FieldRef<"serviceFeedback", 'String'>
    readonly ageBracket: FieldRef<"serviceFeedback", 'String'>
    readonly officeId: FieldRef<"serviceFeedback", 'Int'>
    readonly officeName: FieldRef<"serviceFeedback", 'String'>
    readonly consent: FieldRef<"serviceFeedback", 'String'>
    readonly awareCC: FieldRef<"serviceFeedback", 'String'>
    readonly seeCC: FieldRef<"serviceFeedback", 'String'>
    readonly useCC: FieldRef<"serviceFeedback", 'String'>
    readonly overallComment: FieldRef<"serviceFeedback", 'String'>
    readonly averageRating: FieldRef<"serviceFeedback", 'Float'>
    readonly responsiveness: FieldRef<"serviceFeedback", 'Int'>
    readonly reliability: FieldRef<"serviceFeedback", 'Int'>
    readonly accessAndFacilities: FieldRef<"serviceFeedback", 'Int'>
    readonly communication: FieldRef<"serviceFeedback", 'Int'>
    readonly costs: FieldRef<"serviceFeedback", 'Int'>
    readonly integrity: FieldRef<"serviceFeedback", 'Int'>
    readonly assurance: FieldRef<"serviceFeedback", 'Int'>
    readonly outcome: FieldRef<"serviceFeedback", 'Int'>
    readonly uniqueIdentifier: FieldRef<"serviceFeedback", 'String'>
    readonly created_at: FieldRef<"serviceFeedback", 'DateTime'>
    readonly updated_at: FieldRef<"serviceFeedback", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * serviceFeedback findUnique
   */
  export type serviceFeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which serviceFeedback to fetch.
     */
    where: serviceFeedbackWhereUniqueInput
  }


  /**
   * serviceFeedback findUniqueOrThrow
   */
  export type serviceFeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which serviceFeedback to fetch.
     */
    where: serviceFeedbackWhereUniqueInput
  }


  /**
   * serviceFeedback findFirst
   */
  export type serviceFeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which serviceFeedback to fetch.
     */
    where?: serviceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceFeedbacks to fetch.
     */
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceFeedbacks.
     */
    cursor?: serviceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceFeedbacks.
     */
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * serviceFeedback findFirstOrThrow
   */
  export type serviceFeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which serviceFeedback to fetch.
     */
    where?: serviceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceFeedbacks to fetch.
     */
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceFeedbacks.
     */
    cursor?: serviceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceFeedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceFeedbacks.
     */
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * serviceFeedback findMany
   */
  export type serviceFeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter, which serviceFeedbacks to fetch.
     */
    where?: serviceFeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceFeedbacks to fetch.
     */
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing serviceFeedbacks.
     */
    cursor?: serviceFeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceFeedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceFeedbacks.
     */
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * serviceFeedback create
   */
  export type serviceFeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a serviceFeedback.
     */
    data: XOR<serviceFeedbackCreateInput, serviceFeedbackUncheckedCreateInput>
  }


  /**
   * serviceFeedback createMany
   */
  export type serviceFeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many serviceFeedbacks.
     */
    data: serviceFeedbackCreateManyInput | serviceFeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * serviceFeedback update
   */
  export type serviceFeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a serviceFeedback.
     */
    data: XOR<serviceFeedbackUpdateInput, serviceFeedbackUncheckedUpdateInput>
    /**
     * Choose, which serviceFeedback to update.
     */
    where: serviceFeedbackWhereUniqueInput
  }


  /**
   * serviceFeedback updateMany
   */
  export type serviceFeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update serviceFeedbacks.
     */
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyInput>
    /**
     * Filter which serviceFeedbacks to update
     */
    where?: serviceFeedbackWhereInput
  }


  /**
   * serviceFeedback upsert
   */
  export type serviceFeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the serviceFeedback to update in case it exists.
     */
    where: serviceFeedbackWhereUniqueInput
    /**
     * In case the serviceFeedback found by the `where` argument doesn't exist, create a new serviceFeedback with this data.
     */
    create: XOR<serviceFeedbackCreateInput, serviceFeedbackUncheckedCreateInput>
    /**
     * In case the serviceFeedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviceFeedbackUpdateInput, serviceFeedbackUncheckedUpdateInput>
  }


  /**
   * serviceFeedback delete
   */
  export type serviceFeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    /**
     * Filter which serviceFeedback to delete.
     */
    where: serviceFeedbackWhereUniqueInput
  }


  /**
   * serviceFeedback deleteMany
   */
  export type serviceFeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceFeedbacks to delete
     */
    where?: serviceFeedbackWhereInput
  }


  /**
   * serviceFeedback.service
   */
  export type serviceFeedback$serviceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    where?: servicesWhereInput
  }


  /**
   * serviceFeedback.ClientType
   */
  export type serviceFeedback$ClientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    where?: clientTypeWhereInput
  }


  /**
   * serviceFeedback.Age
   */
  export type serviceFeedback$AgeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the age
     */
    select?: ageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ageInclude<ExtArgs> | null
    where?: ageWhereInput
  }


  /**
   * serviceFeedback.serviceKind
   */
  export type serviceFeedback$serviceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    where?: serviceKindWhereInput
  }


  /**
   * serviceFeedback.feedbackQuestions
   */
  export type serviceFeedback$feedbackQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    where?: feedbackQuestionWhereInput
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    cursor?: feedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * serviceFeedback.logs
   */
  export type serviceFeedback$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    where?: logsWhereInput
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    cursor?: logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * serviceFeedback without action
   */
  export type serviceFeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
  }



  /**
   * Model clientType
   */

  export type AggregateClientType = {
    _count: ClientTypeCountAggregateOutputType | null
    _avg: ClientTypeAvgAggregateOutputType | null
    _sum: ClientTypeSumAggregateOutputType | null
    _min: ClientTypeMinAggregateOutputType | null
    _max: ClientTypeMaxAggregateOutputType | null
  }

  export type ClientTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientTypeSumAggregateOutputType = {
    id: number | null
  }

  export type ClientTypeMinAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ClientTypeMaxAggregateOutputType = {
    id: number | null
    type: string | null
  }

  export type ClientTypeCountAggregateOutputType = {
    id: number
    type: number
    _all: number
  }


  export type ClientTypeAvgAggregateInputType = {
    id?: true
  }

  export type ClientTypeSumAggregateInputType = {
    id?: true
  }

  export type ClientTypeMinAggregateInputType = {
    id?: true
    type?: true
  }

  export type ClientTypeMaxAggregateInputType = {
    id?: true
    type?: true
  }

  export type ClientTypeCountAggregateInputType = {
    id?: true
    type?: true
    _all?: true
  }

  export type ClientTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientType to aggregate.
     */
    where?: clientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientTypes to fetch.
     */
    orderBy?: clientTypeOrderByWithRelationInput | clientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clientTypes
    **/
    _count?: true | ClientTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientTypeMaxAggregateInputType
  }

  export type GetClientTypeAggregateType<T extends ClientTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateClientType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientType[P]>
      : GetScalarType<T[P], AggregateClientType[P]>
  }




  export type clientTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientTypeWhereInput
    orderBy?: clientTypeOrderByWithAggregationInput | clientTypeOrderByWithAggregationInput[]
    by: ClientTypeScalarFieldEnum[] | ClientTypeScalarFieldEnum
    having?: clientTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientTypeCountAggregateInputType | true
    _avg?: ClientTypeAvgAggregateInputType
    _sum?: ClientTypeSumAggregateInputType
    _min?: ClientTypeMinAggregateInputType
    _max?: ClientTypeMaxAggregateInputType
  }

  export type ClientTypeGroupByOutputType = {
    id: number
    type: string
    _count: ClientTypeCountAggregateOutputType | null
    _avg: ClientTypeAvgAggregateOutputType | null
    _sum: ClientTypeSumAggregateOutputType | null
    _min: ClientTypeMinAggregateOutputType | null
    _max: ClientTypeMaxAggregateOutputType | null
  }

  type GetClientTypeGroupByPayload<T extends clientTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ClientTypeGroupByOutputType[P]>
        }
      >
    >


  export type clientTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    ServiceFeedback?: boolean | clientType$ServiceFeedbackArgs<ExtArgs>
    Submitters?: boolean | clientType$SubmittersArgs<ExtArgs>
    _count?: boolean | ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clientType"]>

  export type clientTypeSelectScalar = {
    id?: boolean
    type?: boolean
  }

  export type clientTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | clientType$ServiceFeedbackArgs<ExtArgs>
    Submitters?: boolean | clientType$SubmittersArgs<ExtArgs>
    _count?: boolean | ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $clientTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clientType"
    objects: {
      ServiceFeedback: Prisma.$serviceFeedbackPayload<ExtArgs>[]
      Submitters: Prisma.$submittersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
    }, ExtArgs["result"]["clientType"]>
    composites: {}
  }


  type clientTypeGetPayload<S extends boolean | null | undefined | clientTypeDefaultArgs> = $Result.GetResult<Prisma.$clientTypePayload, S>

  type clientTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<clientTypeFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ClientTypeCountAggregateInputType | true
    }

  export interface clientTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clientType'], meta: { name: 'clientType' } }
    /**
     * Find zero or one ClientType that matches the filter.
     * @param {clientTypeFindUniqueArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends clientTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ClientType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {clientTypeFindUniqueOrThrowArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends clientTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ClientType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeFindFirstArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends clientTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeFindFirstArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ClientType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeFindFirstOrThrowArgs} args - Arguments to find a ClientType
     * @example
     * // Get one ClientType
     * const clientType = await prisma.clientType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends clientTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ClientTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClientTypes
     * const clientTypes = await prisma.clientType.findMany()
     * 
     * // Get first 10 ClientTypes
     * const clientTypes = await prisma.clientType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientTypeWithIdOnly = await prisma.clientType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends clientTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ClientType.
     * @param {clientTypeCreateArgs} args - Arguments to create a ClientType.
     * @example
     * // Create one ClientType
     * const ClientType = await prisma.clientType.create({
     *   data: {
     *     // ... data to create a ClientType
     *   }
     * })
     * 
    **/
    create<T extends clientTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeCreateArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ClientTypes.
     *     @param {clientTypeCreateManyArgs} args - Arguments to create many ClientTypes.
     *     @example
     *     // Create many ClientTypes
     *     const clientType = await prisma.clientType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends clientTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClientType.
     * @param {clientTypeDeleteArgs} args - Arguments to delete one ClientType.
     * @example
     * // Delete one ClientType
     * const ClientType = await prisma.clientType.delete({
     *   where: {
     *     // ... filter to delete one ClientType
     *   }
     * })
     * 
    **/
    delete<T extends clientTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeDeleteArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ClientType.
     * @param {clientTypeUpdateArgs} args - Arguments to update one ClientType.
     * @example
     * // Update one ClientType
     * const clientType = await prisma.clientType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends clientTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeUpdateArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ClientTypes.
     * @param {clientTypeDeleteManyArgs} args - Arguments to filter ClientTypes to delete.
     * @example
     * // Delete a few ClientTypes
     * const { count } = await prisma.clientType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends clientTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, clientTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClientTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClientTypes
     * const clientType = await prisma.clientType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends clientTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClientType.
     * @param {clientTypeUpsertArgs} args - Arguments to update or create a ClientType.
     * @example
     * // Update or create a ClientType
     * const clientType = await prisma.clientType.upsert({
     *   create: {
     *     // ... data to create a ClientType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClientType we want to update
     *   }
     * })
    **/
    upsert<T extends clientTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, clientTypeUpsertArgs<ExtArgs>>
    ): Prisma__clientTypeClient<$Result.GetResult<Prisma.$clientTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ClientTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeCountArgs} args - Arguments to filter ClientTypes to count.
     * @example
     * // Count the number of ClientTypes
     * const count = await prisma.clientType.count({
     *   where: {
     *     // ... the filter for the ClientTypes we want to count
     *   }
     * })
    **/
    count<T extends clientTypeCountArgs>(
      args?: Subset<T, clientTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClientType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientTypeAggregateArgs>(args: Subset<T, ClientTypeAggregateArgs>): Prisma.PrismaPromise<GetClientTypeAggregateType<T>>

    /**
     * Group by ClientType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientTypeGroupByArgs['orderBy'] }
        : { orderBy?: clientTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clientType model
   */
  readonly fields: clientTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clientType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ServiceFeedback<T extends clientType$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, clientType$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Submitters<T extends clientType$SubmittersArgs<ExtArgs> = {}>(args?: Subset<T, clientType$SubmittersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the clientType model
   */ 
  interface clientTypeFieldRefs {
    readonly id: FieldRef<"clientType", 'Int'>
    readonly type: FieldRef<"clientType", 'String'>
  }
    

  // Custom InputTypes

  /**
   * clientType findUnique
   */
  export type clientTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter, which clientType to fetch.
     */
    where: clientTypeWhereUniqueInput
  }


  /**
   * clientType findUniqueOrThrow
   */
  export type clientTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter, which clientType to fetch.
     */
    where: clientTypeWhereUniqueInput
  }


  /**
   * clientType findFirst
   */
  export type clientTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter, which clientType to fetch.
     */
    where?: clientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientTypes to fetch.
     */
    orderBy?: clientTypeOrderByWithRelationInput | clientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientTypes.
     */
    cursor?: clientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientTypes.
     */
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * clientType findFirstOrThrow
   */
  export type clientTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter, which clientType to fetch.
     */
    where?: clientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientTypes to fetch.
     */
    orderBy?: clientTypeOrderByWithRelationInput | clientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clientTypes.
     */
    cursor?: clientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clientTypes.
     */
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * clientType findMany
   */
  export type clientTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter, which clientTypes to fetch.
     */
    where?: clientTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clientTypes to fetch.
     */
    orderBy?: clientTypeOrderByWithRelationInput | clientTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clientTypes.
     */
    cursor?: clientTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clientTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clientTypes.
     */
    skip?: number
    distinct?: ClientTypeScalarFieldEnum | ClientTypeScalarFieldEnum[]
  }


  /**
   * clientType create
   */
  export type clientTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a clientType.
     */
    data: XOR<clientTypeCreateInput, clientTypeUncheckedCreateInput>
  }


  /**
   * clientType createMany
   */
  export type clientTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clientTypes.
     */
    data: clientTypeCreateManyInput | clientTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * clientType update
   */
  export type clientTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a clientType.
     */
    data: XOR<clientTypeUpdateInput, clientTypeUncheckedUpdateInput>
    /**
     * Choose, which clientType to update.
     */
    where: clientTypeWhereUniqueInput
  }


  /**
   * clientType updateMany
   */
  export type clientTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clientTypes.
     */
    data: XOR<clientTypeUpdateManyMutationInput, clientTypeUncheckedUpdateManyInput>
    /**
     * Filter which clientTypes to update
     */
    where?: clientTypeWhereInput
  }


  /**
   * clientType upsert
   */
  export type clientTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the clientType to update in case it exists.
     */
    where: clientTypeWhereUniqueInput
    /**
     * In case the clientType found by the `where` argument doesn't exist, create a new clientType with this data.
     */
    create: XOR<clientTypeCreateInput, clientTypeUncheckedCreateInput>
    /**
     * In case the clientType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientTypeUpdateInput, clientTypeUncheckedUpdateInput>
  }


  /**
   * clientType delete
   */
  export type clientTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
    /**
     * Filter which clientType to delete.
     */
    where: clientTypeWhereUniqueInput
  }


  /**
   * clientType deleteMany
   */
  export type clientTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clientTypes to delete
     */
    where?: clientTypeWhereInput
  }


  /**
   * clientType.ServiceFeedback
   */
  export type clientType$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * clientType.Submitters
   */
  export type clientType$SubmittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the submitters
     */
    select?: submittersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: submittersInclude<ExtArgs> | null
    where?: submittersWhereInput
    orderBy?: submittersOrderByWithRelationInput | submittersOrderByWithRelationInput[]
    cursor?: submittersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmittersScalarFieldEnum | SubmittersScalarFieldEnum[]
  }


  /**
   * clientType without action
   */
  export type clientTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clientType
     */
    select?: clientTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: clientTypeInclude<ExtArgs> | null
  }



  /**
   * Model feedbackQuestion
   */

  export type AggregateFeedbackQuestion = {
    _count: FeedbackQuestionCountAggregateOutputType | null
    _avg: FeedbackQuestionAvgAggregateOutputType | null
    _sum: FeedbackQuestionSumAggregateOutputType | null
    _min: FeedbackQuestionMinAggregateOutputType | null
    _max: FeedbackQuestionMaxAggregateOutputType | null
  }

  export type FeedbackQuestionAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
  }

  export type FeedbackQuestionSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
  }

  export type FeedbackQuestionMinAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FeedbackQuestionMaxAggregateOutputType = {
    id: number | null
    categoryId: number | null
    questionId: number | null
    rating: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FeedbackQuestionCountAggregateOutputType = {
    id: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FeedbackQuestionAvgAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
  }

  export type FeedbackQuestionSumAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
  }

  export type FeedbackQuestionMinAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
  }

  export type FeedbackQuestionMaxAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
  }

  export type FeedbackQuestionCountAggregateInputType = {
    id?: true
    categoryId?: true
    questionId?: true
    rating?: true
    serviceFeedbackId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FeedbackQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedbackQuestion to aggregate.
     */
    where?: feedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackQuestions to fetch.
     */
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: feedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned feedbackQuestions
    **/
    _count?: true | FeedbackQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackQuestionMaxAggregateInputType
  }

  export type GetFeedbackQuestionAggregateType<T extends FeedbackQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackQuestion[P]>
      : GetScalarType<T[P], AggregateFeedbackQuestion[P]>
  }




  export type feedbackQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: feedbackQuestionWhereInput
    orderBy?: feedbackQuestionOrderByWithAggregationInput | feedbackQuestionOrderByWithAggregationInput[]
    by: FeedbackQuestionScalarFieldEnum[] | FeedbackQuestionScalarFieldEnum
    having?: feedbackQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackQuestionCountAggregateInputType | true
    _avg?: FeedbackQuestionAvgAggregateInputType
    _sum?: FeedbackQuestionSumAggregateInputType
    _min?: FeedbackQuestionMinAggregateInputType
    _max?: FeedbackQuestionMaxAggregateInputType
  }

  export type FeedbackQuestionGroupByOutputType = {
    id: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at: Date
    updated_at: Date
    _count: FeedbackQuestionCountAggregateOutputType | null
    _avg: FeedbackQuestionAvgAggregateOutputType | null
    _sum: FeedbackQuestionSumAggregateOutputType | null
    _min: FeedbackQuestionMinAggregateOutputType | null
    _max: FeedbackQuestionMaxAggregateOutputType | null
  }

  type GetFeedbackQuestionGroupByPayload<T extends feedbackQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackQuestionGroupByOutputType[P]>
        }
      >
    >


  export type feedbackQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    questionId?: boolean
    rating?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    updated_at?: boolean
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    question?: boolean | questionsDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | serviceFeedbackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackQuestion"]>

  export type feedbackQuestionSelectScalar = {
    id?: boolean
    categoryId?: boolean
    questionId?: boolean
    rating?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type feedbackQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    question?: boolean | questionsDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | serviceFeedbackDefaultArgs<ExtArgs>
  }


  export type $feedbackQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "feedbackQuestion"
    objects: {
      category: Prisma.$categoriesPayload<ExtArgs>
      question: Prisma.$questionsPayload<ExtArgs>
      serviceFeedback: Prisma.$serviceFeedbackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryId: number
      questionId: number
      rating: number
      serviceFeedbackId: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["feedbackQuestion"]>
    composites: {}
  }


  type feedbackQuestionGetPayload<S extends boolean | null | undefined | feedbackQuestionDefaultArgs> = $Result.GetResult<Prisma.$feedbackQuestionPayload, S>

  type feedbackQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<feedbackQuestionFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: FeedbackQuestionCountAggregateInputType | true
    }

  export interface feedbackQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['feedbackQuestion'], meta: { name: 'feedbackQuestion' } }
    /**
     * Find zero or one FeedbackQuestion that matches the filter.
     * @param {feedbackQuestionFindUniqueArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends feedbackQuestionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionFindUniqueArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FeedbackQuestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {feedbackQuestionFindUniqueOrThrowArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends feedbackQuestionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FeedbackQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionFindFirstArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends feedbackQuestionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionFindFirstArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FeedbackQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionFindFirstOrThrowArgs} args - Arguments to find a FeedbackQuestion
     * @example
     * // Get one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends feedbackQuestionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FeedbackQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackQuestions
     * const feedbackQuestions = await prisma.feedbackQuestion.findMany()
     * 
     * // Get first 10 FeedbackQuestions
     * const feedbackQuestions = await prisma.feedbackQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackQuestionWithIdOnly = await prisma.feedbackQuestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends feedbackQuestionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FeedbackQuestion.
     * @param {feedbackQuestionCreateArgs} args - Arguments to create a FeedbackQuestion.
     * @example
     * // Create one FeedbackQuestion
     * const FeedbackQuestion = await prisma.feedbackQuestion.create({
     *   data: {
     *     // ... data to create a FeedbackQuestion
     *   }
     * })
     * 
    **/
    create<T extends feedbackQuestionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionCreateArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FeedbackQuestions.
     *     @param {feedbackQuestionCreateManyArgs} args - Arguments to create many FeedbackQuestions.
     *     @example
     *     // Create many FeedbackQuestions
     *     const feedbackQuestion = await prisma.feedbackQuestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends feedbackQuestionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeedbackQuestion.
     * @param {feedbackQuestionDeleteArgs} args - Arguments to delete one FeedbackQuestion.
     * @example
     * // Delete one FeedbackQuestion
     * const FeedbackQuestion = await prisma.feedbackQuestion.delete({
     *   where: {
     *     // ... filter to delete one FeedbackQuestion
     *   }
     * })
     * 
    **/
    delete<T extends feedbackQuestionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionDeleteArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FeedbackQuestion.
     * @param {feedbackQuestionUpdateArgs} args - Arguments to update one FeedbackQuestion.
     * @example
     * // Update one FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends feedbackQuestionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionUpdateArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FeedbackQuestions.
     * @param {feedbackQuestionDeleteManyArgs} args - Arguments to filter FeedbackQuestions to delete.
     * @example
     * // Delete a few FeedbackQuestions
     * const { count } = await prisma.feedbackQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends feedbackQuestionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, feedbackQuestionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackQuestions
     * const feedbackQuestion = await prisma.feedbackQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends feedbackQuestionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedbackQuestion.
     * @param {feedbackQuestionUpsertArgs} args - Arguments to update or create a FeedbackQuestion.
     * @example
     * // Update or create a FeedbackQuestion
     * const feedbackQuestion = await prisma.feedbackQuestion.upsert({
     *   create: {
     *     // ... data to create a FeedbackQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackQuestion we want to update
     *   }
     * })
    **/
    upsert<T extends feedbackQuestionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, feedbackQuestionUpsertArgs<ExtArgs>>
    ): Prisma__feedbackQuestionClient<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FeedbackQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionCountArgs} args - Arguments to filter FeedbackQuestions to count.
     * @example
     * // Count the number of FeedbackQuestions
     * const count = await prisma.feedbackQuestion.count({
     *   where: {
     *     // ... the filter for the FeedbackQuestions we want to count
     *   }
     * })
    **/
    count<T extends feedbackQuestionCountArgs>(
      args?: Subset<T, feedbackQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackQuestionAggregateArgs>(args: Subset<T, FeedbackQuestionAggregateArgs>): Prisma.PrismaPromise<GetFeedbackQuestionAggregateType<T>>

    /**
     * Group by FeedbackQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {feedbackQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends feedbackQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: feedbackQuestionGroupByArgs['orderBy'] }
        : { orderBy?: feedbackQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, feedbackQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the feedbackQuestion model
   */
  readonly fields: feedbackQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for feedbackQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__feedbackQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    question<T extends questionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, questionsDefaultArgs<ExtArgs>>): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serviceFeedback<T extends serviceFeedbackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedbackDefaultArgs<ExtArgs>>): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the feedbackQuestion model
   */ 
  interface feedbackQuestionFieldRefs {
    readonly id: FieldRef<"feedbackQuestion", 'Int'>
    readonly categoryId: FieldRef<"feedbackQuestion", 'Int'>
    readonly questionId: FieldRef<"feedbackQuestion", 'Int'>
    readonly rating: FieldRef<"feedbackQuestion", 'Int'>
    readonly serviceFeedbackId: FieldRef<"feedbackQuestion", 'Int'>
    readonly created_at: FieldRef<"feedbackQuestion", 'DateTime'>
    readonly updated_at: FieldRef<"feedbackQuestion", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * feedbackQuestion findUnique
   */
  export type feedbackQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which feedbackQuestion to fetch.
     */
    where: feedbackQuestionWhereUniqueInput
  }


  /**
   * feedbackQuestion findUniqueOrThrow
   */
  export type feedbackQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which feedbackQuestion to fetch.
     */
    where: feedbackQuestionWhereUniqueInput
  }


  /**
   * feedbackQuestion findFirst
   */
  export type feedbackQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which feedbackQuestion to fetch.
     */
    where?: feedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackQuestions to fetch.
     */
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedbackQuestions.
     */
    cursor?: feedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedbackQuestions.
     */
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * feedbackQuestion findFirstOrThrow
   */
  export type feedbackQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which feedbackQuestion to fetch.
     */
    where?: feedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackQuestions to fetch.
     */
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for feedbackQuestions.
     */
    cursor?: feedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of feedbackQuestions.
     */
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * feedbackQuestion findMany
   */
  export type feedbackQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter, which feedbackQuestions to fetch.
     */
    where?: feedbackQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of feedbackQuestions to fetch.
     */
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing feedbackQuestions.
     */
    cursor?: feedbackQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` feedbackQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` feedbackQuestions.
     */
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * feedbackQuestion create
   */
  export type feedbackQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a feedbackQuestion.
     */
    data: XOR<feedbackQuestionCreateInput, feedbackQuestionUncheckedCreateInput>
  }


  /**
   * feedbackQuestion createMany
   */
  export type feedbackQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many feedbackQuestions.
     */
    data: feedbackQuestionCreateManyInput | feedbackQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * feedbackQuestion update
   */
  export type feedbackQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a feedbackQuestion.
     */
    data: XOR<feedbackQuestionUpdateInput, feedbackQuestionUncheckedUpdateInput>
    /**
     * Choose, which feedbackQuestion to update.
     */
    where: feedbackQuestionWhereUniqueInput
  }


  /**
   * feedbackQuestion updateMany
   */
  export type feedbackQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update feedbackQuestions.
     */
    data: XOR<feedbackQuestionUpdateManyMutationInput, feedbackQuestionUncheckedUpdateManyInput>
    /**
     * Filter which feedbackQuestions to update
     */
    where?: feedbackQuestionWhereInput
  }


  /**
   * feedbackQuestion upsert
   */
  export type feedbackQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the feedbackQuestion to update in case it exists.
     */
    where: feedbackQuestionWhereUniqueInput
    /**
     * In case the feedbackQuestion found by the `where` argument doesn't exist, create a new feedbackQuestion with this data.
     */
    create: XOR<feedbackQuestionCreateInput, feedbackQuestionUncheckedCreateInput>
    /**
     * In case the feedbackQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<feedbackQuestionUpdateInput, feedbackQuestionUncheckedUpdateInput>
  }


  /**
   * feedbackQuestion delete
   */
  export type feedbackQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    /**
     * Filter which feedbackQuestion to delete.
     */
    where: feedbackQuestionWhereUniqueInput
  }


  /**
   * feedbackQuestion deleteMany
   */
  export type feedbackQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which feedbackQuestions to delete
     */
    where?: feedbackQuestionWhereInput
  }


  /**
   * feedbackQuestion without action
   */
  export type feedbackQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
  }



  /**
   * Model services
   */

  export type AggregateServices = {
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  export type ServicesAvgAggregateOutputType = {
    id: number | null
    relatedOfficeId: number | null
    serviceKindId: number | null
  }

  export type ServicesSumAggregateOutputType = {
    id: number | null
    relatedOfficeId: number | null
    serviceKindId: number | null
  }

  export type ServicesMinAggregateOutputType = {
    id: number | null
    title: string | null
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServicesCountAggregateOutputType = {
    id: number
    title: number
    relatedOfficeId: number
    serviceKindId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServicesAvgAggregateInputType = {
    id?: true
    relatedOfficeId?: true
    serviceKindId?: true
  }

  export type ServicesSumAggregateInputType = {
    id?: true
    relatedOfficeId?: true
    serviceKindId?: true
  }

  export type ServicesMinAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicesMaxAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
  }

  export type ServicesCountAggregateInputType = {
    id?: true
    title?: true
    relatedOfficeId?: true
    serviceKindId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServicesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to aggregate.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned services
    **/
    _count?: true | ServicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicesMaxAggregateInputType
  }

  export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
        [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServices[P]>
      : GetScalarType<T[P], AggregateServices[P]>
  }




  export type servicesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: servicesWhereInput
    orderBy?: servicesOrderByWithAggregationInput | servicesOrderByWithAggregationInput[]
    by: ServicesScalarFieldEnum[] | ServicesScalarFieldEnum
    having?: servicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicesCountAggregateInputType | true
    _avg?: ServicesAvgAggregateInputType
    _sum?: ServicesSumAggregateInputType
    _min?: ServicesMinAggregateInputType
    _max?: ServicesMaxAggregateInputType
  }

  export type ServicesGroupByOutputType = {
    id: number
    title: string
    relatedOfficeId: number | null
    serviceKindId: number | null
    created_at: Date
    updated_at: Date
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  type GetServicesGroupByPayload<T extends servicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicesGroupByOutputType[P]>
            : GetScalarType<T[P], ServicesGroupByOutputType[P]>
        }
      >
    >


  export type servicesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    relatedOfficeId?: boolean
    serviceKindId?: boolean
    created_at?: boolean
    updated_at?: boolean
    office?: boolean | services$officeArgs<ExtArgs>
    serviceKind?: boolean | services$serviceKindArgs<ExtArgs>
    serviceFeedbacks?: boolean | services$serviceFeedbacksArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["services"]>

  export type servicesSelectScalar = {
    id?: boolean
    title?: boolean
    relatedOfficeId?: boolean
    serviceKindId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type servicesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    office?: boolean | services$officeArgs<ExtArgs>
    serviceKind?: boolean | services$serviceKindArgs<ExtArgs>
    serviceFeedbacks?: boolean | services$serviceFeedbacksArgs<ExtArgs>
    _count?: boolean | ServicesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $servicesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "services"
    objects: {
      office: Prisma.$officesPayload<ExtArgs> | null
      serviceKind: Prisma.$serviceKindPayload<ExtArgs> | null
      serviceFeedbacks: Prisma.$serviceFeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      relatedOfficeId: number | null
      serviceKindId: number | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["services"]>
    composites: {}
  }


  type servicesGetPayload<S extends boolean | null | undefined | servicesDefaultArgs> = $Result.GetResult<Prisma.$servicesPayload, S>

  type servicesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<servicesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServicesCountAggregateInputType | true
    }

  export interface servicesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['services'], meta: { name: 'services' } }
    /**
     * Find zero or one Services that matches the filter.
     * @param {servicesFindUniqueArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends servicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, servicesFindUniqueArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {servicesFindUniqueOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends servicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindFirstArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends servicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindFirstArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindFirstOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends servicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.services.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends servicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Services.
     * @param {servicesCreateArgs} args - Arguments to create a Services.
     * @example
     * // Create one Services
     * const Services = await prisma.services.create({
     *   data: {
     *     // ... data to create a Services
     *   }
     * })
     * 
    **/
    create<T extends servicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, servicesCreateArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {servicesCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const services = await prisma.services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends servicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Services.
     * @param {servicesDeleteArgs} args - Arguments to delete one Services.
     * @example
     * // Delete one Services
     * const Services = await prisma.services.delete({
     *   where: {
     *     // ... filter to delete one Services
     *   }
     * })
     * 
    **/
    delete<T extends servicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, servicesDeleteArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Services.
     * @param {servicesUpdateArgs} args - Arguments to update one Services.
     * @example
     * // Update one Services
     * const services = await prisma.services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends servicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpdateArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {servicesDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends servicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, servicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends servicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Services.
     * @param {servicesUpsertArgs} args - Arguments to update or create a Services.
     * @example
     * // Update or create a Services
     * const services = await prisma.services.upsert({
     *   create: {
     *     // ... data to create a Services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Services we want to update
     *   }
     * })
    **/
    upsert<T extends servicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, servicesUpsertArgs<ExtArgs>>
    ): Prisma__servicesClient<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.services.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends servicesCountArgs>(
      args?: Subset<T, servicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicesAggregateArgs>(args: Subset<T, ServicesAggregateArgs>): Prisma.PrismaPromise<GetServicesAggregateType<T>>

    /**
     * Group by Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {servicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends servicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: servicesGroupByArgs['orderBy'] }
        : { orderBy?: servicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, servicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the services model
   */
  readonly fields: servicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__servicesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    office<T extends services$officeArgs<ExtArgs> = {}>(args?: Subset<T, services$officeArgs<ExtArgs>>): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceKind<T extends services$serviceKindArgs<ExtArgs> = {}>(args?: Subset<T, services$serviceKindArgs<ExtArgs>>): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    serviceFeedbacks<T extends services$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, services$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the services model
   */ 
  interface servicesFieldRefs {
    readonly id: FieldRef<"services", 'Int'>
    readonly title: FieldRef<"services", 'String'>
    readonly relatedOfficeId: FieldRef<"services", 'Int'>
    readonly serviceKindId: FieldRef<"services", 'Int'>
    readonly created_at: FieldRef<"services", 'DateTime'>
    readonly updated_at: FieldRef<"services", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * services findUnique
   */
  export type servicesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services findUniqueOrThrow
   */
  export type servicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services findFirst
   */
  export type servicesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services findFirstOrThrow
   */
  export type servicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services findMany
   */
  export type servicesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: servicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing services.
     */
    cursor?: servicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * services create
   */
  export type servicesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The data needed to create a services.
     */
    data: XOR<servicesCreateInput, servicesUncheckedCreateInput>
  }


  /**
   * services createMany
   */
  export type servicesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many services.
     */
    data: servicesCreateManyInput | servicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * services update
   */
  export type servicesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The data needed to update a services.
     */
    data: XOR<servicesUpdateInput, servicesUncheckedUpdateInput>
    /**
     * Choose, which services to update.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services updateMany
   */
  export type servicesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update services.
     */
    data: XOR<servicesUpdateManyMutationInput, servicesUncheckedUpdateManyInput>
    /**
     * Filter which services to update
     */
    where?: servicesWhereInput
  }


  /**
   * services upsert
   */
  export type servicesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * The filter to search for the services to update in case it exists.
     */
    where: servicesWhereUniqueInput
    /**
     * In case the services found by the `where` argument doesn't exist, create a new services with this data.
     */
    create: XOR<servicesCreateInput, servicesUncheckedCreateInput>
    /**
     * In case the services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<servicesUpdateInput, servicesUncheckedUpdateInput>
  }


  /**
   * services delete
   */
  export type servicesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    /**
     * Filter which services to delete.
     */
    where: servicesWhereUniqueInput
  }


  /**
   * services deleteMany
   */
  export type servicesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to delete
     */
    where?: servicesWhereInput
  }


  /**
   * services.office
   */
  export type services$officeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    where?: officesWhereInput
  }


  /**
   * services.serviceKind
   */
  export type services$serviceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    where?: serviceKindWhereInput
  }


  /**
   * services.serviceFeedbacks
   */
  export type services$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * services without action
   */
  export type servicesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
  }



  /**
   * Model serviceKind
   */

  export type AggregateServiceKind = {
    _count: ServiceKindCountAggregateOutputType | null
    _avg: ServiceKindAvgAggregateOutputType | null
    _sum: ServiceKindSumAggregateOutputType | null
    _min: ServiceKindMinAggregateOutputType | null
    _max: ServiceKindMaxAggregateOutputType | null
  }

  export type ServiceKindAvgAggregateOutputType = {
    id: number | null
  }

  export type ServiceKindSumAggregateOutputType = {
    id: number | null
  }

  export type ServiceKindMinAggregateOutputType = {
    id: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceKindMaxAggregateOutputType = {
    id: number | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ServiceKindCountAggregateOutputType = {
    id: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ServiceKindAvgAggregateInputType = {
    id?: true
  }

  export type ServiceKindSumAggregateInputType = {
    id?: true
  }

  export type ServiceKindMinAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceKindMaxAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type ServiceKindCountAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ServiceKindAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceKind to aggregate.
     */
    where?: serviceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceKinds to fetch.
     */
    orderBy?: serviceKindOrderByWithRelationInput | serviceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned serviceKinds
    **/
    _count?: true | ServiceKindCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceKindAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceKindSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceKindMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceKindMaxAggregateInputType
  }

  export type GetServiceKindAggregateType<T extends ServiceKindAggregateArgs> = {
        [P in keyof T & keyof AggregateServiceKind]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServiceKind[P]>
      : GetScalarType<T[P], AggregateServiceKind[P]>
  }




  export type serviceKindGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceKindWhereInput
    orderBy?: serviceKindOrderByWithAggregationInput | serviceKindOrderByWithAggregationInput[]
    by: ServiceKindScalarFieldEnum[] | ServiceKindScalarFieldEnum
    having?: serviceKindScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceKindCountAggregateInputType | true
    _avg?: ServiceKindAvgAggregateInputType
    _sum?: ServiceKindSumAggregateInputType
    _min?: ServiceKindMinAggregateInputType
    _max?: ServiceKindMaxAggregateInputType
  }

  export type ServiceKindGroupByOutputType = {
    id: number
    description: string | null
    created_at: Date
    updated_at: Date
    _count: ServiceKindCountAggregateOutputType | null
    _avg: ServiceKindAvgAggregateOutputType | null
    _sum: ServiceKindSumAggregateOutputType | null
    _min: ServiceKindMinAggregateOutputType | null
    _max: ServiceKindMaxAggregateOutputType | null
  }

  type GetServiceKindGroupByPayload<T extends serviceKindGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceKindGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceKindGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceKindGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceKindGroupByOutputType[P]>
        }
      >
    >


  export type serviceKindSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    serviceFeedbacks?: boolean | serviceKind$serviceFeedbacksArgs<ExtArgs>
    Services?: boolean | serviceKind$ServicesArgs<ExtArgs>
    _count?: boolean | ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serviceKind"]>

  export type serviceKindSelectScalar = {
    id?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type serviceKindInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    serviceFeedbacks?: boolean | serviceKind$serviceFeedbacksArgs<ExtArgs>
    Services?: boolean | serviceKind$ServicesArgs<ExtArgs>
    _count?: boolean | ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $serviceKindPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "serviceKind"
    objects: {
      serviceFeedbacks: Prisma.$serviceFeedbackPayload<ExtArgs>[]
      Services: Prisma.$servicesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["serviceKind"]>
    composites: {}
  }


  type serviceKindGetPayload<S extends boolean | null | undefined | serviceKindDefaultArgs> = $Result.GetResult<Prisma.$serviceKindPayload, S>

  type serviceKindCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<serviceKindFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ServiceKindCountAggregateInputType | true
    }

  export interface serviceKindDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['serviceKind'], meta: { name: 'serviceKind' } }
    /**
     * Find zero or one ServiceKind that matches the filter.
     * @param {serviceKindFindUniqueArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends serviceKindFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindFindUniqueArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ServiceKind that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {serviceKindFindUniqueOrThrowArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends serviceKindFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ServiceKind that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindFindFirstArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends serviceKindFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindFindFirstArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ServiceKind that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindFindFirstOrThrowArgs} args - Arguments to find a ServiceKind
     * @example
     * // Get one ServiceKind
     * const serviceKind = await prisma.serviceKind.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends serviceKindFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ServiceKinds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServiceKinds
     * const serviceKinds = await prisma.serviceKind.findMany()
     * 
     * // Get first 10 ServiceKinds
     * const serviceKinds = await prisma.serviceKind.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceKindWithIdOnly = await prisma.serviceKind.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends serviceKindFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ServiceKind.
     * @param {serviceKindCreateArgs} args - Arguments to create a ServiceKind.
     * @example
     * // Create one ServiceKind
     * const ServiceKind = await prisma.serviceKind.create({
     *   data: {
     *     // ... data to create a ServiceKind
     *   }
     * })
     * 
    **/
    create<T extends serviceKindCreateArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindCreateArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ServiceKinds.
     *     @param {serviceKindCreateManyArgs} args - Arguments to create many ServiceKinds.
     *     @example
     *     // Create many ServiceKinds
     *     const serviceKind = await prisma.serviceKind.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends serviceKindCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ServiceKind.
     * @param {serviceKindDeleteArgs} args - Arguments to delete one ServiceKind.
     * @example
     * // Delete one ServiceKind
     * const ServiceKind = await prisma.serviceKind.delete({
     *   where: {
     *     // ... filter to delete one ServiceKind
     *   }
     * })
     * 
    **/
    delete<T extends serviceKindDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindDeleteArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ServiceKind.
     * @param {serviceKindUpdateArgs} args - Arguments to update one ServiceKind.
     * @example
     * // Update one ServiceKind
     * const serviceKind = await prisma.serviceKind.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends serviceKindUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindUpdateArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ServiceKinds.
     * @param {serviceKindDeleteManyArgs} args - Arguments to filter ServiceKinds to delete.
     * @example
     * // Delete a few ServiceKinds
     * const { count } = await prisma.serviceKind.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends serviceKindDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, serviceKindDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServiceKinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServiceKinds
     * const serviceKind = await prisma.serviceKind.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends serviceKindUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ServiceKind.
     * @param {serviceKindUpsertArgs} args - Arguments to update or create a ServiceKind.
     * @example
     * // Update or create a ServiceKind
     * const serviceKind = await prisma.serviceKind.upsert({
     *   create: {
     *     // ... data to create a ServiceKind
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServiceKind we want to update
     *   }
     * })
    **/
    upsert<T extends serviceKindUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, serviceKindUpsertArgs<ExtArgs>>
    ): Prisma__serviceKindClient<$Result.GetResult<Prisma.$serviceKindPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ServiceKinds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindCountArgs} args - Arguments to filter ServiceKinds to count.
     * @example
     * // Count the number of ServiceKinds
     * const count = await prisma.serviceKind.count({
     *   where: {
     *     // ... the filter for the ServiceKinds we want to count
     *   }
     * })
    **/
    count<T extends serviceKindCountArgs>(
      args?: Subset<T, serviceKindCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceKindCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServiceKind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceKindAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceKindAggregateArgs>(args: Subset<T, ServiceKindAggregateArgs>): Prisma.PrismaPromise<GetServiceKindAggregateType<T>>

    /**
     * Group by ServiceKind.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceKindGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviceKindGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviceKindGroupByArgs['orderBy'] }
        : { orderBy?: serviceKindGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviceKindGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceKindGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the serviceKind model
   */
  readonly fields: serviceKindFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for serviceKind.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviceKindClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    serviceFeedbacks<T extends serviceKind$serviceFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, serviceKind$serviceFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends serviceKind$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, serviceKind$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the serviceKind model
   */ 
  interface serviceKindFieldRefs {
    readonly id: FieldRef<"serviceKind", 'Int'>
    readonly description: FieldRef<"serviceKind", 'String'>
    readonly created_at: FieldRef<"serviceKind", 'DateTime'>
    readonly updated_at: FieldRef<"serviceKind", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * serviceKind findUnique
   */
  export type serviceKindFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter, which serviceKind to fetch.
     */
    where: serviceKindWhereUniqueInput
  }


  /**
   * serviceKind findUniqueOrThrow
   */
  export type serviceKindFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter, which serviceKind to fetch.
     */
    where: serviceKindWhereUniqueInput
  }


  /**
   * serviceKind findFirst
   */
  export type serviceKindFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter, which serviceKind to fetch.
     */
    where?: serviceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceKinds to fetch.
     */
    orderBy?: serviceKindOrderByWithRelationInput | serviceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceKinds.
     */
    cursor?: serviceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceKinds.
     */
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * serviceKind findFirstOrThrow
   */
  export type serviceKindFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter, which serviceKind to fetch.
     */
    where?: serviceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceKinds to fetch.
     */
    orderBy?: serviceKindOrderByWithRelationInput | serviceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for serviceKinds.
     */
    cursor?: serviceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceKinds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of serviceKinds.
     */
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * serviceKind findMany
   */
  export type serviceKindFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter, which serviceKinds to fetch.
     */
    where?: serviceKindWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of serviceKinds to fetch.
     */
    orderBy?: serviceKindOrderByWithRelationInput | serviceKindOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing serviceKinds.
     */
    cursor?: serviceKindWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` serviceKinds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` serviceKinds.
     */
    skip?: number
    distinct?: ServiceKindScalarFieldEnum | ServiceKindScalarFieldEnum[]
  }


  /**
   * serviceKind create
   */
  export type serviceKindCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * The data needed to create a serviceKind.
     */
    data: XOR<serviceKindCreateInput, serviceKindUncheckedCreateInput>
  }


  /**
   * serviceKind createMany
   */
  export type serviceKindCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many serviceKinds.
     */
    data: serviceKindCreateManyInput | serviceKindCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * serviceKind update
   */
  export type serviceKindUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * The data needed to update a serviceKind.
     */
    data: XOR<serviceKindUpdateInput, serviceKindUncheckedUpdateInput>
    /**
     * Choose, which serviceKind to update.
     */
    where: serviceKindWhereUniqueInput
  }


  /**
   * serviceKind updateMany
   */
  export type serviceKindUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update serviceKinds.
     */
    data: XOR<serviceKindUpdateManyMutationInput, serviceKindUncheckedUpdateManyInput>
    /**
     * Filter which serviceKinds to update
     */
    where?: serviceKindWhereInput
  }


  /**
   * serviceKind upsert
   */
  export type serviceKindUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * The filter to search for the serviceKind to update in case it exists.
     */
    where: serviceKindWhereUniqueInput
    /**
     * In case the serviceKind found by the `where` argument doesn't exist, create a new serviceKind with this data.
     */
    create: XOR<serviceKindCreateInput, serviceKindUncheckedCreateInput>
    /**
     * In case the serviceKind was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviceKindUpdateInput, serviceKindUncheckedUpdateInput>
  }


  /**
   * serviceKind delete
   */
  export type serviceKindDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
    /**
     * Filter which serviceKind to delete.
     */
    where: serviceKindWhereUniqueInput
  }


  /**
   * serviceKind deleteMany
   */
  export type serviceKindDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which serviceKinds to delete
     */
    where?: serviceKindWhereInput
  }


  /**
   * serviceKind.serviceFeedbacks
   */
  export type serviceKind$serviceFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * serviceKind.Services
   */
  export type serviceKind$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    where?: servicesWhereInput
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    cursor?: servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * serviceKind without action
   */
  export type serviceKindDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceKind
     */
    select?: serviceKindSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceKindInclude<ExtArgs> | null
  }



  /**
   * Model logs
   */

  export type AggregateLogs = {
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  export type LogsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
  }

  export type LogsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
  }

  export type LogsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
  }

  export type LogsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    serviceFeedbackId: number | null
    created_at: Date | null
  }

  export type LogsCountAggregateOutputType = {
    id: number
    userId: number
    serviceFeedbackId: number
    created_at: number
    _all: number
  }


  export type LogsAvgAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
  }

  export type LogsSumAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
  }

  export type LogsMinAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
  }

  export type LogsMaxAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
  }

  export type LogsCountAggregateInputType = {
    id?: true
    userId?: true
    serviceFeedbackId?: true
    created_at?: true
    _all?: true
  }

  export type LogsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logs to aggregate.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned logs
    **/
    _count?: true | LogsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogsMaxAggregateInputType
  }

  export type GetLogsAggregateType<T extends LogsAggregateArgs> = {
        [P in keyof T & keyof AggregateLogs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLogs[P]>
      : GetScalarType<T[P], AggregateLogs[P]>
  }




  export type logsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: logsWhereInput
    orderBy?: logsOrderByWithAggregationInput | logsOrderByWithAggregationInput[]
    by: LogsScalarFieldEnum[] | LogsScalarFieldEnum
    having?: logsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogsCountAggregateInputType | true
    _avg?: LogsAvgAggregateInputType
    _sum?: LogsSumAggregateInputType
    _min?: LogsMinAggregateInputType
    _max?: LogsMaxAggregateInputType
  }

  export type LogsGroupByOutputType = {
    id: number
    userId: number
    serviceFeedbackId: number
    created_at: Date
    _count: LogsCountAggregateOutputType | null
    _avg: LogsAvgAggregateOutputType | null
    _sum: LogsSumAggregateOutputType | null
    _min: LogsMinAggregateOutputType | null
    _max: LogsMaxAggregateOutputType | null
  }

  type GetLogsGroupByPayload<T extends logsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LogsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogsGroupByOutputType[P]>
            : GetScalarType<T[P], LogsGroupByOutputType[P]>
        }
      >
    >


  export type logsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
    user?: boolean | submittersDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | serviceFeedbackDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["logs"]>

  export type logsSelectScalar = {
    id?: boolean
    userId?: boolean
    serviceFeedbackId?: boolean
    created_at?: boolean
  }

  export type logsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | submittersDefaultArgs<ExtArgs>
    serviceFeedback?: boolean | serviceFeedbackDefaultArgs<ExtArgs>
  }


  export type $logsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "logs"
    objects: {
      user: Prisma.$submittersPayload<ExtArgs>
      serviceFeedback: Prisma.$serviceFeedbackPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      serviceFeedbackId: number
      created_at: Date
    }, ExtArgs["result"]["logs"]>
    composites: {}
  }


  type logsGetPayload<S extends boolean | null | undefined | logsDefaultArgs> = $Result.GetResult<Prisma.$logsPayload, S>

  type logsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<logsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: LogsCountAggregateInputType | true
    }

  export interface logsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['logs'], meta: { name: 'logs' } }
    /**
     * Find zero or one Logs that matches the filter.
     * @param {logsFindUniqueArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends logsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, logsFindUniqueArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Logs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {logsFindUniqueOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends logsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindFirstArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends logsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, logsFindFirstArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Logs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindFirstOrThrowArgs} args - Arguments to find a Logs
     * @example
     * // Get one Logs
     * const logs = await prisma.logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends logsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, logsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.logs.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.logs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logsWithIdOnly = await prisma.logs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends logsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Logs.
     * @param {logsCreateArgs} args - Arguments to create a Logs.
     * @example
     * // Create one Logs
     * const Logs = await prisma.logs.create({
     *   data: {
     *     // ... data to create a Logs
     *   }
     * })
     * 
    **/
    create<T extends logsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, logsCreateArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Logs.
     *     @param {logsCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const logs = await prisma.logs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends logsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Logs.
     * @param {logsDeleteArgs} args - Arguments to delete one Logs.
     * @example
     * // Delete one Logs
     * const Logs = await prisma.logs.delete({
     *   where: {
     *     // ... filter to delete one Logs
     *   }
     * })
     * 
    **/
    delete<T extends logsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, logsDeleteArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Logs.
     * @param {logsUpdateArgs} args - Arguments to update one Logs.
     * @example
     * // Update one Logs
     * const logs = await prisma.logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends logsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, logsUpdateArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Logs.
     * @param {logsDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends logsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, logsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const logs = await prisma.logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends logsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, logsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Logs.
     * @param {logsUpsertArgs} args - Arguments to update or create a Logs.
     * @example
     * // Update or create a Logs
     * const logs = await prisma.logs.upsert({
     *   create: {
     *     // ... data to create a Logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Logs we want to update
     *   }
     * })
    **/
    upsert<T extends logsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, logsUpsertArgs<ExtArgs>>
    ): Prisma__logsClient<$Result.GetResult<Prisma.$logsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.logs.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends logsCountArgs>(
      args?: Subset<T, logsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogsAggregateArgs>(args: Subset<T, LogsAggregateArgs>): Prisma.PrismaPromise<GetLogsAggregateType<T>>

    /**
     * Group by Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {logsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends logsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: logsGroupByArgs['orderBy'] }
        : { orderBy?: logsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, logsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the logs model
   */
  readonly fields: logsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__logsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends submittersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, submittersDefaultArgs<ExtArgs>>): Prisma__submittersClient<$Result.GetResult<Prisma.$submittersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serviceFeedback<T extends serviceFeedbackDefaultArgs<ExtArgs> = {}>(args?: Subset<T, serviceFeedbackDefaultArgs<ExtArgs>>): Prisma__serviceFeedbackClient<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the logs model
   */ 
  interface logsFieldRefs {
    readonly id: FieldRef<"logs", 'Int'>
    readonly userId: FieldRef<"logs", 'Int'>
    readonly serviceFeedbackId: FieldRef<"logs", 'Int'>
    readonly created_at: FieldRef<"logs", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * logs findUnique
   */
  export type logsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs findUniqueOrThrow
   */
  export type logsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs findFirst
   */
  export type logsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * logs findFirstOrThrow
   */
  export type logsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of logs.
     */
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * logs findMany
   */
  export type logsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter, which logs to fetch.
     */
    where?: logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of logs to fetch.
     */
    orderBy?: logsOrderByWithRelationInput | logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing logs.
     */
    cursor?: logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` logs.
     */
    skip?: number
    distinct?: LogsScalarFieldEnum | LogsScalarFieldEnum[]
  }


  /**
   * logs create
   */
  export type logsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * The data needed to create a logs.
     */
    data: XOR<logsCreateInput, logsUncheckedCreateInput>
  }


  /**
   * logs createMany
   */
  export type logsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many logs.
     */
    data: logsCreateManyInput | logsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * logs update
   */
  export type logsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * The data needed to update a logs.
     */
    data: XOR<logsUpdateInput, logsUncheckedUpdateInput>
    /**
     * Choose, which logs to update.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs updateMany
   */
  export type logsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update logs.
     */
    data: XOR<logsUpdateManyMutationInput, logsUncheckedUpdateManyInput>
    /**
     * Filter which logs to update
     */
    where?: logsWhereInput
  }


  /**
   * logs upsert
   */
  export type logsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * The filter to search for the logs to update in case it exists.
     */
    where: logsWhereUniqueInput
    /**
     * In case the logs found by the `where` argument doesn't exist, create a new logs with this data.
     */
    create: XOR<logsCreateInput, logsUncheckedCreateInput>
    /**
     * In case the logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<logsUpdateInput, logsUncheckedUpdateInput>
  }


  /**
   * logs delete
   */
  export type logsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
    /**
     * Filter which logs to delete.
     */
    where: logsWhereUniqueInput
  }


  /**
   * logs deleteMany
   */
  export type logsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which logs to delete
     */
    where?: logsWhereInput
  }


  /**
   * logs without action
   */
  export type logsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the logs
     */
    select?: logsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: logsInclude<ExtArgs> | null
  }



  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type CategoriesSumAggregateOutputType = {
    id: number | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: number | null
    title: string | null
    qualityDimension: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    qualityDimension: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    title: number
    qualityDimension: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CategoriesAvgAggregateInputType = {
    id?: true
  }

  export type CategoriesSumAggregateInputType = {
    id?: true
  }

  export type CategoriesMinAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    title?: true
    qualityDimension?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _avg?: CategoriesAvgAggregateInputType
    _sum?: CategoriesSumAggregateInputType
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: number
    title: string
    qualityDimension: string
    created_at: Date
    updated_at: Date
    _count: CategoriesCountAggregateOutputType | null
    _avg: CategoriesAvgAggregateOutputType | null
    _sum: CategoriesSumAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    qualityDimension?: boolean
    created_at?: boolean
    updated_at?: boolean
    FeedbackQuestion?: boolean | categories$FeedbackQuestionArgs<ExtArgs>
    Questions?: boolean | categories$QuestionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    id?: boolean
    title?: boolean
    qualityDimension?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    FeedbackQuestion?: boolean | categories$FeedbackQuestionArgs<ExtArgs>
    Questions?: boolean | categories$QuestionsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      FeedbackQuestion: Prisma.$feedbackQuestionPayload<ExtArgs>[]
      Questions: Prisma.$questionsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      qualityDimension: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    FeedbackQuestion<T extends categories$FeedbackQuestionArgs<ExtArgs> = {}>(args?: Subset<T, categories$FeedbackQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Questions<T extends categories$QuestionsArgs<ExtArgs> = {}>(args?: Subset<T, categories$QuestionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly id: FieldRef<"categories", 'Int'>
    readonly title: FieldRef<"categories", 'String'>
    readonly qualityDimension: FieldRef<"categories", 'String'>
    readonly created_at: FieldRef<"categories", 'DateTime'>
    readonly updated_at: FieldRef<"categories", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }


  /**
   * categories.FeedbackQuestion
   */
  export type categories$FeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    where?: feedbackQuestionWhereInput
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    cursor?: feedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * categories.Questions
   */
  export type categories$QuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    cursor?: questionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
  }



  /**
   * Model questions
   */

  export type AggregateQuestions = {
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  export type QuestionsAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionsSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionsMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    categoryId: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type QuestionsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    categoryId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type QuestionsAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionsSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
  }

  export type QuestionsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    categoryId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type QuestionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to aggregate.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned questions
    **/
    _count?: true | QuestionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionsMaxAggregateInputType
  }

  export type GetQuestionsAggregateType<T extends QuestionsAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestions[P]>
      : GetScalarType<T[P], AggregateQuestions[P]>
  }




  export type questionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: questionsWhereInput
    orderBy?: questionsOrderByWithAggregationInput | questionsOrderByWithAggregationInput[]
    by: QuestionsScalarFieldEnum[] | QuestionsScalarFieldEnum
    having?: questionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionsCountAggregateInputType | true
    _avg?: QuestionsAvgAggregateInputType
    _sum?: QuestionsSumAggregateInputType
    _min?: QuestionsMinAggregateInputType
    _max?: QuestionsMaxAggregateInputType
  }

  export type QuestionsGroupByOutputType = {
    id: number
    title: string | null
    description: string | null
    categoryId: number
    created_at: Date
    updated_at: Date
    _count: QuestionsCountAggregateOutputType | null
    _avg: QuestionsAvgAggregateOutputType | null
    _sum: QuestionsSumAggregateOutputType | null
    _min: QuestionsMinAggregateOutputType | null
    _max: QuestionsMaxAggregateOutputType | null
  }

  type GetQuestionsGroupByPayload<T extends questionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionsGroupByOutputType[P]>
        }
      >
    >


  export type questionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    created_at?: boolean
    updated_at?: boolean
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    FeedbackQuestion?: boolean | questions$FeedbackQuestionArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questions"]>

  export type questionsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    categoryId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type questionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    FeedbackQuestion?: boolean | questions$FeedbackQuestionArgs<ExtArgs>
    _count?: boolean | QuestionsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $questionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "questions"
    objects: {
      category: Prisma.$categoriesPayload<ExtArgs>
      FeedbackQuestion: Prisma.$feedbackQuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string | null
      description: string | null
      categoryId: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["questions"]>
    composites: {}
  }


  type questionsGetPayload<S extends boolean | null | undefined | questionsDefaultArgs> = $Result.GetResult<Prisma.$questionsPayload, S>

  type questionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<questionsFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: QuestionsCountAggregateInputType | true
    }

  export interface questionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['questions'], meta: { name: 'questions' } }
    /**
     * Find zero or one Questions that matches the filter.
     * @param {questionsFindUniqueArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends questionsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, questionsFindUniqueArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Questions that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {questionsFindUniqueOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends questionsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends questionsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindFirstArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Questions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindFirstOrThrowArgs} args - Arguments to find a Questions
     * @example
     * // Get one Questions
     * const questions = await prisma.questions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends questionsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.questions.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.questions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionsWithIdOnly = await prisma.questions.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends questionsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Questions.
     * @param {questionsCreateArgs} args - Arguments to create a Questions.
     * @example
     * // Create one Questions
     * const Questions = await prisma.questions.create({
     *   data: {
     *     // ... data to create a Questions
     *   }
     * })
     * 
    **/
    create<T extends questionsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, questionsCreateArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questions.
     *     @param {questionsCreateManyArgs} args - Arguments to create many Questions.
     *     @example
     *     // Create many Questions
     *     const questions = await prisma.questions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends questionsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questions.
     * @param {questionsDeleteArgs} args - Arguments to delete one Questions.
     * @example
     * // Delete one Questions
     * const Questions = await prisma.questions.delete({
     *   where: {
     *     // ... filter to delete one Questions
     *   }
     * })
     * 
    **/
    delete<T extends questionsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, questionsDeleteArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Questions.
     * @param {questionsUpdateArgs} args - Arguments to update one Questions.
     * @example
     * // Update one Questions
     * const questions = await prisma.questions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends questionsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpdateArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {questionsDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.questions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends questionsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, questionsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const questions = await prisma.questions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends questionsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questions.
     * @param {questionsUpsertArgs} args - Arguments to update or create a Questions.
     * @example
     * // Update or create a Questions
     * const questions = await prisma.questions.upsert({
     *   create: {
     *     // ... data to create a Questions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questions we want to update
     *   }
     * })
    **/
    upsert<T extends questionsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, questionsUpsertArgs<ExtArgs>>
    ): Prisma__questionsClient<$Result.GetResult<Prisma.$questionsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.questions.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends questionsCountArgs>(
      args?: Subset<T, questionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionsAggregateArgs>(args: Subset<T, QuestionsAggregateArgs>): Prisma.PrismaPromise<GetQuestionsAggregateType<T>>

    /**
     * Group by Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {questionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends questionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: questionsGroupByArgs['orderBy'] }
        : { orderBy?: questionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, questionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the questions model
   */
  readonly fields: questionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for questions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__questionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    FeedbackQuestion<T extends questions$FeedbackQuestionArgs<ExtArgs> = {}>(args?: Subset<T, questions$FeedbackQuestionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$feedbackQuestionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the questions model
   */ 
  interface questionsFieldRefs {
    readonly id: FieldRef<"questions", 'Int'>
    readonly title: FieldRef<"questions", 'String'>
    readonly description: FieldRef<"questions", 'String'>
    readonly categoryId: FieldRef<"questions", 'Int'>
    readonly created_at: FieldRef<"questions", 'DateTime'>
    readonly updated_at: FieldRef<"questions", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * questions findUnique
   */
  export type questionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions findUniqueOrThrow
   */
  export type questionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions findFirst
   */
  export type questionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions findFirstOrThrow
   */
  export type questionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of questions.
     */
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions findMany
   */
  export type questionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter, which questions to fetch.
     */
    where?: questionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of questions to fetch.
     */
    orderBy?: questionsOrderByWithRelationInput | questionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing questions.
     */
    cursor?: questionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` questions.
     */
    skip?: number
    distinct?: QuestionsScalarFieldEnum | QuestionsScalarFieldEnum[]
  }


  /**
   * questions create
   */
  export type questionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to create a questions.
     */
    data: XOR<questionsCreateInput, questionsUncheckedCreateInput>
  }


  /**
   * questions createMany
   */
  export type questionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many questions.
     */
    data: questionsCreateManyInput | questionsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * questions update
   */
  export type questionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The data needed to update a questions.
     */
    data: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
    /**
     * Choose, which questions to update.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions updateMany
   */
  export type questionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update questions.
     */
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyInput>
    /**
     * Filter which questions to update
     */
    where?: questionsWhereInput
  }


  /**
   * questions upsert
   */
  export type questionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * The filter to search for the questions to update in case it exists.
     */
    where: questionsWhereUniqueInput
    /**
     * In case the questions found by the `where` argument doesn't exist, create a new questions with this data.
     */
    create: XOR<questionsCreateInput, questionsUncheckedCreateInput>
    /**
     * In case the questions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<questionsUpdateInput, questionsUncheckedUpdateInput>
  }


  /**
   * questions delete
   */
  export type questionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
    /**
     * Filter which questions to delete.
     */
    where: questionsWhereUniqueInput
  }


  /**
   * questions deleteMany
   */
  export type questionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which questions to delete
     */
    where?: questionsWhereInput
  }


  /**
   * questions.FeedbackQuestion
   */
  export type questions$FeedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the feedbackQuestion
     */
    select?: feedbackQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: feedbackQuestionInclude<ExtArgs> | null
    where?: feedbackQuestionWhereInput
    orderBy?: feedbackQuestionOrderByWithRelationInput | feedbackQuestionOrderByWithRelationInput[]
    cursor?: feedbackQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackQuestionScalarFieldEnum | FeedbackQuestionScalarFieldEnum[]
  }


  /**
   * questions without action
   */
  export type questionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the questions
     */
    select?: questionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: questionsInclude<ExtArgs> | null
  }



  /**
   * Model offices
   */

  export type AggregateOffices = {
    _count: OfficesCountAggregateOutputType | null
    _avg: OfficesAvgAggregateOutputType | null
    _sum: OfficesSumAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  export type OfficesAvgAggregateOutputType = {
    id: number | null
  }

  export type OfficesSumAggregateOutputType = {
    id: number | null
  }

  export type OfficesMinAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OfficesMaxAggregateOutputType = {
    id: number | null
    title: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type OfficesCountAggregateOutputType = {
    id: number
    title: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OfficesAvgAggregateInputType = {
    id?: true
  }

  export type OfficesSumAggregateInputType = {
    id?: true
  }

  export type OfficesMinAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
  }

  export type OfficesMaxAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
  }

  export type OfficesCountAggregateInputType = {
    id?: true
    title?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OfficesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which offices to aggregate.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: officesOrderByWithRelationInput | officesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned offices
    **/
    _count?: true | OfficesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OfficesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OfficesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OfficesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OfficesMaxAggregateInputType
  }

  export type GetOfficesAggregateType<T extends OfficesAggregateArgs> = {
        [P in keyof T & keyof AggregateOffices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOffices[P]>
      : GetScalarType<T[P], AggregateOffices[P]>
  }




  export type officesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: officesWhereInput
    orderBy?: officesOrderByWithAggregationInput | officesOrderByWithAggregationInput[]
    by: OfficesScalarFieldEnum[] | OfficesScalarFieldEnum
    having?: officesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OfficesCountAggregateInputType | true
    _avg?: OfficesAvgAggregateInputType
    _sum?: OfficesSumAggregateInputType
    _min?: OfficesMinAggregateInputType
    _max?: OfficesMaxAggregateInputType
  }

  export type OfficesGroupByOutputType = {
    id: number
    title: string
    created_at: Date
    updated_at: Date
    _count: OfficesCountAggregateOutputType | null
    _avg: OfficesAvgAggregateOutputType | null
    _sum: OfficesSumAggregateOutputType | null
    _min: OfficesMinAggregateOutputType | null
    _max: OfficesMaxAggregateOutputType | null
  }

  type GetOfficesGroupByPayload<T extends officesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OfficesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OfficesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OfficesGroupByOutputType[P]>
            : GetScalarType<T[P], OfficesGroupByOutputType[P]>
        }
      >
    >


  export type officesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    created_at?: boolean
    updated_at?: boolean
    ServiceFeedback?: boolean | offices$ServiceFeedbackArgs<ExtArgs>
    Services?: boolean | offices$ServicesArgs<ExtArgs>
    users?: boolean | offices$usersArgs<ExtArgs>
    _count?: boolean | OfficesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["offices"]>

  export type officesSelectScalar = {
    id?: boolean
    title?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type officesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ServiceFeedback?: boolean | offices$ServiceFeedbackArgs<ExtArgs>
    Services?: boolean | offices$ServicesArgs<ExtArgs>
    users?: boolean | offices$usersArgs<ExtArgs>
    _count?: boolean | OfficesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $officesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "offices"
    objects: {
      ServiceFeedback: Prisma.$serviceFeedbackPayload<ExtArgs>[]
      Services: Prisma.$servicesPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["offices"]>
    composites: {}
  }


  type officesGetPayload<S extends boolean | null | undefined | officesDefaultArgs> = $Result.GetResult<Prisma.$officesPayload, S>

  type officesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<officesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: OfficesCountAggregateInputType | true
    }

  export interface officesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['offices'], meta: { name: 'offices' } }
    /**
     * Find zero or one Offices that matches the filter.
     * @param {officesFindUniqueArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends officesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, officesFindUniqueArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Offices that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {officesFindUniqueOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends officesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, officesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindFirstArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends officesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, officesFindFirstArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Offices that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindFirstOrThrowArgs} args - Arguments to find a Offices
     * @example
     * // Get one Offices
     * const offices = await prisma.offices.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends officesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, officesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Offices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Offices
     * const offices = await prisma.offices.findMany()
     * 
     * // Get first 10 Offices
     * const offices = await prisma.offices.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const officesWithIdOnly = await prisma.offices.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends officesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, officesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Offices.
     * @param {officesCreateArgs} args - Arguments to create a Offices.
     * @example
     * // Create one Offices
     * const Offices = await prisma.offices.create({
     *   data: {
     *     // ... data to create a Offices
     *   }
     * })
     * 
    **/
    create<T extends officesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, officesCreateArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Offices.
     *     @param {officesCreateManyArgs} args - Arguments to create many Offices.
     *     @example
     *     // Create many Offices
     *     const offices = await prisma.offices.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends officesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, officesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Offices.
     * @param {officesDeleteArgs} args - Arguments to delete one Offices.
     * @example
     * // Delete one Offices
     * const Offices = await prisma.offices.delete({
     *   where: {
     *     // ... filter to delete one Offices
     *   }
     * })
     * 
    **/
    delete<T extends officesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, officesDeleteArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Offices.
     * @param {officesUpdateArgs} args - Arguments to update one Offices.
     * @example
     * // Update one Offices
     * const offices = await prisma.offices.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends officesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, officesUpdateArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Offices.
     * @param {officesDeleteManyArgs} args - Arguments to filter Offices to delete.
     * @example
     * // Delete a few Offices
     * const { count } = await prisma.offices.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends officesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, officesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Offices
     * const offices = await prisma.offices.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends officesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, officesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Offices.
     * @param {officesUpsertArgs} args - Arguments to update or create a Offices.
     * @example
     * // Update or create a Offices
     * const offices = await prisma.offices.upsert({
     *   create: {
     *     // ... data to create a Offices
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Offices we want to update
     *   }
     * })
    **/
    upsert<T extends officesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, officesUpsertArgs<ExtArgs>>
    ): Prisma__officesClient<$Result.GetResult<Prisma.$officesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesCountArgs} args - Arguments to filter Offices to count.
     * @example
     * // Count the number of Offices
     * const count = await prisma.offices.count({
     *   where: {
     *     // ... the filter for the Offices we want to count
     *   }
     * })
    **/
    count<T extends officesCountArgs>(
      args?: Subset<T, officesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OfficesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OfficesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OfficesAggregateArgs>(args: Subset<T, OfficesAggregateArgs>): Prisma.PrismaPromise<GetOfficesAggregateType<T>>

    /**
     * Group by Offices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {officesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends officesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: officesGroupByArgs['orderBy'] }
        : { orderBy?: officesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, officesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOfficesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the offices model
   */
  readonly fields: officesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for offices.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__officesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ServiceFeedback<T extends offices$ServiceFeedbackArgs<ExtArgs> = {}>(args?: Subset<T, offices$ServiceFeedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$serviceFeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    Services<T extends offices$ServicesArgs<ExtArgs> = {}>(args?: Subset<T, offices$ServicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends offices$usersArgs<ExtArgs> = {}>(args?: Subset<T, offices$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the offices model
   */ 
  interface officesFieldRefs {
    readonly id: FieldRef<"offices", 'Int'>
    readonly title: FieldRef<"offices", 'String'>
    readonly created_at: FieldRef<"offices", 'DateTime'>
    readonly updated_at: FieldRef<"offices", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * offices findUnique
   */
  export type officesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter, which offices to fetch.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices findUniqueOrThrow
   */
  export type officesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter, which offices to fetch.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices findFirst
   */
  export type officesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: officesOrderByWithRelationInput | officesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offices.
     */
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * offices findFirstOrThrow
   */
  export type officesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: officesOrderByWithRelationInput | officesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of offices.
     */
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * offices findMany
   */
  export type officesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter, which offices to fetch.
     */
    where?: officesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of offices to fetch.
     */
    orderBy?: officesOrderByWithRelationInput | officesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing offices.
     */
    cursor?: officesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` offices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` offices.
     */
    skip?: number
    distinct?: OfficesScalarFieldEnum | OfficesScalarFieldEnum[]
  }


  /**
   * offices create
   */
  export type officesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * The data needed to create a offices.
     */
    data: XOR<officesCreateInput, officesUncheckedCreateInput>
  }


  /**
   * offices createMany
   */
  export type officesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many offices.
     */
    data: officesCreateManyInput | officesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * offices update
   */
  export type officesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * The data needed to update a offices.
     */
    data: XOR<officesUpdateInput, officesUncheckedUpdateInput>
    /**
     * Choose, which offices to update.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices updateMany
   */
  export type officesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update offices.
     */
    data: XOR<officesUpdateManyMutationInput, officesUncheckedUpdateManyInput>
    /**
     * Filter which offices to update
     */
    where?: officesWhereInput
  }


  /**
   * offices upsert
   */
  export type officesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * The filter to search for the offices to update in case it exists.
     */
    where: officesWhereUniqueInput
    /**
     * In case the offices found by the `where` argument doesn't exist, create a new offices with this data.
     */
    create: XOR<officesCreateInput, officesUncheckedCreateInput>
    /**
     * In case the offices was found with the provided `where` argument, update it with this data.
     */
    update: XOR<officesUpdateInput, officesUncheckedUpdateInput>
  }


  /**
   * offices delete
   */
  export type officesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
    /**
     * Filter which offices to delete.
     */
    where: officesWhereUniqueInput
  }


  /**
   * offices deleteMany
   */
  export type officesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which offices to delete
     */
    where?: officesWhereInput
  }


  /**
   * offices.ServiceFeedback
   */
  export type offices$ServiceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the serviceFeedback
     */
    select?: serviceFeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: serviceFeedbackInclude<ExtArgs> | null
    where?: serviceFeedbackWhereInput
    orderBy?: serviceFeedbackOrderByWithRelationInput | serviceFeedbackOrderByWithRelationInput[]
    cursor?: serviceFeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceFeedbackScalarFieldEnum | ServiceFeedbackScalarFieldEnum[]
  }


  /**
   * offices.Services
   */
  export type offices$ServicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the services
     */
    select?: servicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: servicesInclude<ExtArgs> | null
    where?: servicesWhereInput
    orderBy?: servicesOrderByWithRelationInput | servicesOrderByWithRelationInput[]
    cursor?: servicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * offices.users
   */
  export type offices$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * offices without action
   */
  export type officesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the offices
     */
    select?: officesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: officesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    uid: 'uid',
    username: 'username',
    password: 'password',
    role: 'role',
    officeName: 'officeName',
    officeId: 'officeId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SubmittersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    ageId: 'ageId',
    ageBracket: 'ageBracket',
    specAge: 'specAge',
    clientTypeId: 'clientTypeId',
    sex: 'sex'
  };

  export type SubmittersScalarFieldEnum = (typeof SubmittersScalarFieldEnum)[keyof typeof SubmittersScalarFieldEnum]


  export const AgeScalarFieldEnum: {
    id: 'id',
    description: 'description'
  };

  export type AgeScalarFieldEnum = (typeof AgeScalarFieldEnum)[keyof typeof AgeScalarFieldEnum]


  export const ServiceFeedbackScalarFieldEnum: {
    id: 'id',
    startTime: 'startTime',
    submitterId: 'submitterId',
    submittername: 'submittername',
    email: 'email',
    language: 'language',
    serviceDesc: 'serviceDesc',
    serviceId: 'serviceId',
    otherService: 'otherService',
    typeId: 'typeId',
    sex: 'sex',
    ageBracketId: 'ageBracketId',
    specificAge: 'specificAge',
    serviceKindId: 'serviceKindId',
    serviceKindDescription: 'serviceKindDescription',
    relatedClientType: 'relatedClientType',
    ageBracket: 'ageBracket',
    officeId: 'officeId',
    officeName: 'officeName',
    consent: 'consent',
    awareCC: 'awareCC',
    seeCC: 'seeCC',
    useCC: 'useCC',
    overallComment: 'overallComment',
    averageRating: 'averageRating',
    responsiveness: 'responsiveness',
    reliability: 'reliability',
    accessAndFacilities: 'accessAndFacilities',
    communication: 'communication',
    costs: 'costs',
    integrity: 'integrity',
    assurance: 'assurance',
    outcome: 'outcome',
    uniqueIdentifier: 'uniqueIdentifier',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServiceFeedbackScalarFieldEnum = (typeof ServiceFeedbackScalarFieldEnum)[keyof typeof ServiceFeedbackScalarFieldEnum]


  export const ClientTypeScalarFieldEnum: {
    id: 'id',
    type: 'type'
  };

  export type ClientTypeScalarFieldEnum = (typeof ClientTypeScalarFieldEnum)[keyof typeof ClientTypeScalarFieldEnum]


  export const FeedbackQuestionScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    questionId: 'questionId',
    rating: 'rating',
    serviceFeedbackId: 'serviceFeedbackId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FeedbackQuestionScalarFieldEnum = (typeof FeedbackQuestionScalarFieldEnum)[keyof typeof FeedbackQuestionScalarFieldEnum]


  export const ServicesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    relatedOfficeId: 'relatedOfficeId',
    serviceKindId: 'serviceKindId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServicesScalarFieldEnum = (typeof ServicesScalarFieldEnum)[keyof typeof ServicesScalarFieldEnum]


  export const ServiceKindScalarFieldEnum: {
    id: 'id',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ServiceKindScalarFieldEnum = (typeof ServiceKindScalarFieldEnum)[keyof typeof ServiceKindScalarFieldEnum]


  export const LogsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    serviceFeedbackId: 'serviceFeedbackId',
    created_at: 'created_at'
  };

  export type LogsScalarFieldEnum = (typeof LogsScalarFieldEnum)[keyof typeof LogsScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    qualityDimension: 'qualityDimension',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const QuestionsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    categoryId: 'categoryId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type QuestionsScalarFieldEnum = (typeof QuestionsScalarFieldEnum)[keyof typeof QuestionsScalarFieldEnum]


  export const OfficesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OfficesScalarFieldEnum = (typeof OfficesScalarFieldEnum)[keyof typeof OfficesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    uid?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
    office?: XOR<OfficesNullableRelationFilter, officesWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrderInput | SortOrder
    officeId?: SortOrderInput | SortOrder
    office?: officesOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    uid?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
    office?: XOR<OfficesNullableRelationFilter, officesWhereInput> | null
  }, "uid" | "username">

  export type usersOrderByWithAggregationInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrderInput | SortOrder
    officeId?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    uid?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
    officeName?: StringNullableWithAggregatesFilter<"users"> | string | null
    officeId?: IntNullableWithAggregatesFilter<"users"> | number | null
  }

  export type submittersWhereInput = {
    AND?: submittersWhereInput | submittersWhereInput[]
    OR?: submittersWhereInput[]
    NOT?: submittersWhereInput | submittersWhereInput[]
    id?: IntFilter<"submitters"> | number
    name?: StringNullableFilter<"submitters"> | string | null
    email?: StringFilter<"submitters"> | string
    ageId?: IntNullableFilter<"submitters"> | number | null
    ageBracket?: StringNullableFilter<"submitters"> | string | null
    specAge?: IntNullableFilter<"submitters"> | number | null
    clientTypeId?: IntNullableFilter<"submitters"> | number | null
    sex?: StringFilter<"submitters"> | string
    age?: XOR<AgeNullableRelationFilter, ageWhereInput> | null
    clientType?: XOR<ClientTypeNullableRelationFilter, clientTypeWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Logs?: LogsListRelationFilter
  }

  export type submittersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    ageId?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    specAge?: SortOrderInput | SortOrder
    clientTypeId?: SortOrderInput | SortOrder
    sex?: SortOrder
    age?: ageOrderByWithRelationInput
    clientType?: clientTypeOrderByWithRelationInput
    serviceFeedbacks?: serviceFeedbackOrderByRelationAggregateInput
    Logs?: logsOrderByRelationAggregateInput
  }

  export type submittersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: submittersWhereInput | submittersWhereInput[]
    OR?: submittersWhereInput[]
    NOT?: submittersWhereInput | submittersWhereInput[]
    name?: StringNullableFilter<"submitters"> | string | null
    email?: StringFilter<"submitters"> | string
    ageId?: IntNullableFilter<"submitters"> | number | null
    ageBracket?: StringNullableFilter<"submitters"> | string | null
    specAge?: IntNullableFilter<"submitters"> | number | null
    clientTypeId?: IntNullableFilter<"submitters"> | number | null
    sex?: StringFilter<"submitters"> | string
    age?: XOR<AgeNullableRelationFilter, ageWhereInput> | null
    clientType?: XOR<ClientTypeNullableRelationFilter, clientTypeWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Logs?: LogsListRelationFilter
  }, "id">

  export type submittersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    ageId?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    specAge?: SortOrderInput | SortOrder
    clientTypeId?: SortOrderInput | SortOrder
    sex?: SortOrder
    _count?: submittersCountOrderByAggregateInput
    _avg?: submittersAvgOrderByAggregateInput
    _max?: submittersMaxOrderByAggregateInput
    _min?: submittersMinOrderByAggregateInput
    _sum?: submittersSumOrderByAggregateInput
  }

  export type submittersScalarWhereWithAggregatesInput = {
    AND?: submittersScalarWhereWithAggregatesInput | submittersScalarWhereWithAggregatesInput[]
    OR?: submittersScalarWhereWithAggregatesInput[]
    NOT?: submittersScalarWhereWithAggregatesInput | submittersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"submitters"> | number
    name?: StringNullableWithAggregatesFilter<"submitters"> | string | null
    email?: StringWithAggregatesFilter<"submitters"> | string
    ageId?: IntNullableWithAggregatesFilter<"submitters"> | number | null
    ageBracket?: StringNullableWithAggregatesFilter<"submitters"> | string | null
    specAge?: IntNullableWithAggregatesFilter<"submitters"> | number | null
    clientTypeId?: IntNullableWithAggregatesFilter<"submitters"> | number | null
    sex?: StringWithAggregatesFilter<"submitters"> | string
  }

  export type ageWhereInput = {
    AND?: ageWhereInput | ageWhereInput[]
    OR?: ageWhereInput[]
    NOT?: ageWhereInput | ageWhereInput[]
    id?: IntFilter<"age"> | number
    description?: StringFilter<"age"> | string
    Submitters?: SubmittersListRelationFilter
    ServiceFeedback?: ServiceFeedbackListRelationFilter
  }

  export type ageOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    Submitters?: submittersOrderByRelationAggregateInput
    ServiceFeedback?: serviceFeedbackOrderByRelationAggregateInput
  }

  export type ageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ageWhereInput | ageWhereInput[]
    OR?: ageWhereInput[]
    NOT?: ageWhereInput | ageWhereInput[]
    description?: StringFilter<"age"> | string
    Submitters?: SubmittersListRelationFilter
    ServiceFeedback?: ServiceFeedbackListRelationFilter
  }, "id">

  export type ageOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    _count?: ageCountOrderByAggregateInput
    _avg?: ageAvgOrderByAggregateInput
    _max?: ageMaxOrderByAggregateInput
    _min?: ageMinOrderByAggregateInput
    _sum?: ageSumOrderByAggregateInput
  }

  export type ageScalarWhereWithAggregatesInput = {
    AND?: ageScalarWhereWithAggregatesInput | ageScalarWhereWithAggregatesInput[]
    OR?: ageScalarWhereWithAggregatesInput[]
    NOT?: ageScalarWhereWithAggregatesInput | ageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"age"> | number
    description?: StringWithAggregatesFilter<"age"> | string
  }

  export type serviceFeedbackWhereInput = {
    AND?: serviceFeedbackWhereInput | serviceFeedbackWhereInput[]
    OR?: serviceFeedbackWhereInput[]
    NOT?: serviceFeedbackWhereInput | serviceFeedbackWhereInput[]
    id?: IntFilter<"serviceFeedback"> | number
    startTime?: DateTimeNullableFilter<"serviceFeedback"> | Date | string | null
    submitterId?: IntFilter<"serviceFeedback"> | number
    submittername?: StringFilter<"serviceFeedback"> | string
    email?: StringNullableFilter<"serviceFeedback"> | string | null
    language?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceDesc?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceId?: IntFilter<"serviceFeedback"> | number
    otherService?: StringNullableFilter<"serviceFeedback"> | string | null
    typeId?: IntNullableFilter<"serviceFeedback"> | number | null
    sex?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracketId?: IntNullableFilter<"serviceFeedback"> | number | null
    specificAge?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"serviceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"serviceFeedback"> | string | null
    officeId?: IntFilter<"serviceFeedback"> | number
    officeName?: StringNullableFilter<"serviceFeedback"> | string | null
    consent?: StringNullableFilter<"serviceFeedback"> | string | null
    awareCC?: StringNullableFilter<"serviceFeedback"> | string | null
    seeCC?: StringNullableFilter<"serviceFeedback"> | string | null
    useCC?: StringNullableFilter<"serviceFeedback"> | string | null
    overallComment?: StringNullableFilter<"serviceFeedback"> | string | null
    averageRating?: FloatFilter<"serviceFeedback"> | number
    responsiveness?: IntFilter<"serviceFeedback"> | number
    reliability?: IntFilter<"serviceFeedback"> | number
    accessAndFacilities?: IntFilter<"serviceFeedback"> | number
    communication?: IntFilter<"serviceFeedback"> | number
    costs?: IntFilter<"serviceFeedback"> | number
    integrity?: IntFilter<"serviceFeedback"> | number
    assurance?: IntFilter<"serviceFeedback"> | number
    outcome?: IntFilter<"serviceFeedback"> | number
    uniqueIdentifier?: StringFilter<"serviceFeedback"> | string
    created_at?: DateTimeFilter<"serviceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"serviceFeedback"> | Date | string
    submitter?: XOR<SubmittersRelationFilter, submittersWhereInput>
    service?: XOR<ServicesNullableRelationFilter, servicesWhereInput> | null
    ClientType?: XOR<ClientTypeNullableRelationFilter, clientTypeWhereInput> | null
    Age?: XOR<AgeNullableRelationFilter, ageWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, serviceKindWhereInput> | null
    officeVisited?: XOR<OfficesRelationFilter, officesWhereInput>
    feedbackQuestions?: FeedbackQuestionListRelationFilter
    logs?: LogsListRelationFilter
  }

  export type serviceFeedbackOrderByWithRelationInput = {
    id?: SortOrder
    startTime?: SortOrderInput | SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    email?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    serviceDesc?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    otherService?: SortOrderInput | SortOrder
    typeId?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    ageBracketId?: SortOrderInput | SortOrder
    specificAge?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    serviceKindDescription?: SortOrderInput | SortOrder
    relatedClientType?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    officeId?: SortOrder
    officeName?: SortOrderInput | SortOrder
    consent?: SortOrderInput | SortOrder
    awareCC?: SortOrderInput | SortOrder
    seeCC?: SortOrderInput | SortOrder
    useCC?: SortOrderInput | SortOrder
    overallComment?: SortOrderInput | SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    submitter?: submittersOrderByWithRelationInput
    service?: servicesOrderByWithRelationInput
    ClientType?: clientTypeOrderByWithRelationInput
    Age?: ageOrderByWithRelationInput
    serviceKind?: serviceKindOrderByWithRelationInput
    officeVisited?: officesOrderByWithRelationInput
    feedbackQuestions?: feedbackQuestionOrderByRelationAggregateInput
    logs?: logsOrderByRelationAggregateInput
  }

  export type serviceFeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: serviceFeedbackWhereInput | serviceFeedbackWhereInput[]
    OR?: serviceFeedbackWhereInput[]
    NOT?: serviceFeedbackWhereInput | serviceFeedbackWhereInput[]
    startTime?: DateTimeNullableFilter<"serviceFeedback"> | Date | string | null
    submitterId?: IntFilter<"serviceFeedback"> | number
    submittername?: StringFilter<"serviceFeedback"> | string
    email?: StringNullableFilter<"serviceFeedback"> | string | null
    language?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceDesc?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceId?: IntFilter<"serviceFeedback"> | number
    otherService?: StringNullableFilter<"serviceFeedback"> | string | null
    typeId?: IntNullableFilter<"serviceFeedback"> | number | null
    sex?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracketId?: IntNullableFilter<"serviceFeedback"> | number | null
    specificAge?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"serviceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"serviceFeedback"> | string | null
    officeId?: IntFilter<"serviceFeedback"> | number
    officeName?: StringNullableFilter<"serviceFeedback"> | string | null
    consent?: StringNullableFilter<"serviceFeedback"> | string | null
    awareCC?: StringNullableFilter<"serviceFeedback"> | string | null
    seeCC?: StringNullableFilter<"serviceFeedback"> | string | null
    useCC?: StringNullableFilter<"serviceFeedback"> | string | null
    overallComment?: StringNullableFilter<"serviceFeedback"> | string | null
    averageRating?: FloatFilter<"serviceFeedback"> | number
    responsiveness?: IntFilter<"serviceFeedback"> | number
    reliability?: IntFilter<"serviceFeedback"> | number
    accessAndFacilities?: IntFilter<"serviceFeedback"> | number
    communication?: IntFilter<"serviceFeedback"> | number
    costs?: IntFilter<"serviceFeedback"> | number
    integrity?: IntFilter<"serviceFeedback"> | number
    assurance?: IntFilter<"serviceFeedback"> | number
    outcome?: IntFilter<"serviceFeedback"> | number
    uniqueIdentifier?: StringFilter<"serviceFeedback"> | string
    created_at?: DateTimeFilter<"serviceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"serviceFeedback"> | Date | string
    submitter?: XOR<SubmittersRelationFilter, submittersWhereInput>
    service?: XOR<ServicesNullableRelationFilter, servicesWhereInput> | null
    ClientType?: XOR<ClientTypeNullableRelationFilter, clientTypeWhereInput> | null
    Age?: XOR<AgeNullableRelationFilter, ageWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, serviceKindWhereInput> | null
    officeVisited?: XOR<OfficesRelationFilter, officesWhereInput>
    feedbackQuestions?: FeedbackQuestionListRelationFilter
    logs?: LogsListRelationFilter
  }, "id">

  export type serviceFeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    startTime?: SortOrderInput | SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    email?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    serviceDesc?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    otherService?: SortOrderInput | SortOrder
    typeId?: SortOrderInput | SortOrder
    sex?: SortOrderInput | SortOrder
    ageBracketId?: SortOrderInput | SortOrder
    specificAge?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    serviceKindDescription?: SortOrderInput | SortOrder
    relatedClientType?: SortOrderInput | SortOrder
    ageBracket?: SortOrderInput | SortOrder
    officeId?: SortOrder
    officeName?: SortOrderInput | SortOrder
    consent?: SortOrderInput | SortOrder
    awareCC?: SortOrderInput | SortOrder
    seeCC?: SortOrderInput | SortOrder
    useCC?: SortOrderInput | SortOrder
    overallComment?: SortOrderInput | SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: serviceFeedbackCountOrderByAggregateInput
    _avg?: serviceFeedbackAvgOrderByAggregateInput
    _max?: serviceFeedbackMaxOrderByAggregateInput
    _min?: serviceFeedbackMinOrderByAggregateInput
    _sum?: serviceFeedbackSumOrderByAggregateInput
  }

  export type serviceFeedbackScalarWhereWithAggregatesInput = {
    AND?: serviceFeedbackScalarWhereWithAggregatesInput | serviceFeedbackScalarWhereWithAggregatesInput[]
    OR?: serviceFeedbackScalarWhereWithAggregatesInput[]
    NOT?: serviceFeedbackScalarWhereWithAggregatesInput | serviceFeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"serviceFeedback"> | number
    startTime?: DateTimeNullableWithAggregatesFilter<"serviceFeedback"> | Date | string | null
    submitterId?: IntWithAggregatesFilter<"serviceFeedback"> | number
    submittername?: StringWithAggregatesFilter<"serviceFeedback"> | string
    email?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    language?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    serviceDesc?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    serviceId?: IntWithAggregatesFilter<"serviceFeedback"> | number
    otherService?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    typeId?: IntNullableWithAggregatesFilter<"serviceFeedback"> | number | null
    sex?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    ageBracketId?: IntNullableWithAggregatesFilter<"serviceFeedback"> | number | null
    specificAge?: IntNullableWithAggregatesFilter<"serviceFeedback"> | number | null
    serviceKindId?: IntNullableWithAggregatesFilter<"serviceFeedback"> | number | null
    serviceKindDescription?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    relatedClientType?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    ageBracket?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    officeId?: IntWithAggregatesFilter<"serviceFeedback"> | number
    officeName?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    consent?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    awareCC?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    seeCC?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    useCC?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    overallComment?: StringNullableWithAggregatesFilter<"serviceFeedback"> | string | null
    averageRating?: FloatWithAggregatesFilter<"serviceFeedback"> | number
    responsiveness?: IntWithAggregatesFilter<"serviceFeedback"> | number
    reliability?: IntWithAggregatesFilter<"serviceFeedback"> | number
    accessAndFacilities?: IntWithAggregatesFilter<"serviceFeedback"> | number
    communication?: IntWithAggregatesFilter<"serviceFeedback"> | number
    costs?: IntWithAggregatesFilter<"serviceFeedback"> | number
    integrity?: IntWithAggregatesFilter<"serviceFeedback"> | number
    assurance?: IntWithAggregatesFilter<"serviceFeedback"> | number
    outcome?: IntWithAggregatesFilter<"serviceFeedback"> | number
    uniqueIdentifier?: StringWithAggregatesFilter<"serviceFeedback"> | string
    created_at?: DateTimeWithAggregatesFilter<"serviceFeedback"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"serviceFeedback"> | Date | string
  }

  export type clientTypeWhereInput = {
    AND?: clientTypeWhereInput | clientTypeWhereInput[]
    OR?: clientTypeWhereInput[]
    NOT?: clientTypeWhereInput | clientTypeWhereInput[]
    id?: IntFilter<"clientType"> | number
    type?: StringFilter<"clientType"> | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Submitters?: SubmittersListRelationFilter
  }

  export type clientTypeOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    ServiceFeedback?: serviceFeedbackOrderByRelationAggregateInput
    Submitters?: submittersOrderByRelationAggregateInput
  }

  export type clientTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientTypeWhereInput | clientTypeWhereInput[]
    OR?: clientTypeWhereInput[]
    NOT?: clientTypeWhereInput | clientTypeWhereInput[]
    type?: StringFilter<"clientType"> | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Submitters?: SubmittersListRelationFilter
  }, "id">

  export type clientTypeOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    _count?: clientTypeCountOrderByAggregateInput
    _avg?: clientTypeAvgOrderByAggregateInput
    _max?: clientTypeMaxOrderByAggregateInput
    _min?: clientTypeMinOrderByAggregateInput
    _sum?: clientTypeSumOrderByAggregateInput
  }

  export type clientTypeScalarWhereWithAggregatesInput = {
    AND?: clientTypeScalarWhereWithAggregatesInput | clientTypeScalarWhereWithAggregatesInput[]
    OR?: clientTypeScalarWhereWithAggregatesInput[]
    NOT?: clientTypeScalarWhereWithAggregatesInput | clientTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"clientType"> | number
    type?: StringWithAggregatesFilter<"clientType"> | string
  }

  export type feedbackQuestionWhereInput = {
    AND?: feedbackQuestionWhereInput | feedbackQuestionWhereInput[]
    OR?: feedbackQuestionWhereInput[]
    NOT?: feedbackQuestionWhereInput | feedbackQuestionWhereInput[]
    id?: IntFilter<"feedbackQuestion"> | number
    categoryId?: IntFilter<"feedbackQuestion"> | number
    questionId?: IntFilter<"feedbackQuestion"> | number
    rating?: IntFilter<"feedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"feedbackQuestion"> | number
    created_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    question?: XOR<QuestionsRelationFilter, questionsWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, serviceFeedbackWhereInput>
  }

  export type feedbackQuestionOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category?: categoriesOrderByWithRelationInput
    question?: questionsOrderByWithRelationInput
    serviceFeedback?: serviceFeedbackOrderByWithRelationInput
  }

  export type feedbackQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: feedbackQuestionWhereInput | feedbackQuestionWhereInput[]
    OR?: feedbackQuestionWhereInput[]
    NOT?: feedbackQuestionWhereInput | feedbackQuestionWhereInput[]
    categoryId?: IntFilter<"feedbackQuestion"> | number
    questionId?: IntFilter<"feedbackQuestion"> | number
    rating?: IntFilter<"feedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"feedbackQuestion"> | number
    created_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    question?: XOR<QuestionsRelationFilter, questionsWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, serviceFeedbackWhereInput>
  }, "id">

  export type feedbackQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: feedbackQuestionCountOrderByAggregateInput
    _avg?: feedbackQuestionAvgOrderByAggregateInput
    _max?: feedbackQuestionMaxOrderByAggregateInput
    _min?: feedbackQuestionMinOrderByAggregateInput
    _sum?: feedbackQuestionSumOrderByAggregateInput
  }

  export type feedbackQuestionScalarWhereWithAggregatesInput = {
    AND?: feedbackQuestionScalarWhereWithAggregatesInput | feedbackQuestionScalarWhereWithAggregatesInput[]
    OR?: feedbackQuestionScalarWhereWithAggregatesInput[]
    NOT?: feedbackQuestionScalarWhereWithAggregatesInput | feedbackQuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"feedbackQuestion"> | number
    categoryId?: IntWithAggregatesFilter<"feedbackQuestion"> | number
    questionId?: IntWithAggregatesFilter<"feedbackQuestion"> | number
    rating?: IntWithAggregatesFilter<"feedbackQuestion"> | number
    serviceFeedbackId?: IntWithAggregatesFilter<"feedbackQuestion"> | number
    created_at?: DateTimeWithAggregatesFilter<"feedbackQuestion"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"feedbackQuestion"> | Date | string
  }

  export type servicesWhereInput = {
    AND?: servicesWhereInput | servicesWhereInput[]
    OR?: servicesWhereInput[]
    NOT?: servicesWhereInput | servicesWhereInput[]
    id?: IntFilter<"services"> | number
    title?: StringFilter<"services"> | string
    relatedOfficeId?: IntNullableFilter<"services"> | number | null
    serviceKindId?: IntNullableFilter<"services"> | number | null
    created_at?: DateTimeFilter<"services"> | Date | string
    updated_at?: DateTimeFilter<"services"> | Date | string
    office?: XOR<OfficesNullableRelationFilter, officesWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, serviceKindWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
  }

  export type servicesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    office?: officesOrderByWithRelationInput
    serviceKind?: serviceKindOrderByWithRelationInput
    serviceFeedbacks?: serviceFeedbackOrderByRelationAggregateInput
  }

  export type servicesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: servicesWhereInput | servicesWhereInput[]
    OR?: servicesWhereInput[]
    NOT?: servicesWhereInput | servicesWhereInput[]
    title?: StringFilter<"services"> | string
    relatedOfficeId?: IntNullableFilter<"services"> | number | null
    serviceKindId?: IntNullableFilter<"services"> | number | null
    created_at?: DateTimeFilter<"services"> | Date | string
    updated_at?: DateTimeFilter<"services"> | Date | string
    office?: XOR<OfficesNullableRelationFilter, officesWhereInput> | null
    serviceKind?: XOR<ServiceKindNullableRelationFilter, serviceKindWhereInput> | null
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
  }, "id">

  export type servicesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrderInput | SortOrder
    serviceKindId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: servicesCountOrderByAggregateInput
    _avg?: servicesAvgOrderByAggregateInput
    _max?: servicesMaxOrderByAggregateInput
    _min?: servicesMinOrderByAggregateInput
    _sum?: servicesSumOrderByAggregateInput
  }

  export type servicesScalarWhereWithAggregatesInput = {
    AND?: servicesScalarWhereWithAggregatesInput | servicesScalarWhereWithAggregatesInput[]
    OR?: servicesScalarWhereWithAggregatesInput[]
    NOT?: servicesScalarWhereWithAggregatesInput | servicesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"services"> | number
    title?: StringWithAggregatesFilter<"services"> | string
    relatedOfficeId?: IntNullableWithAggregatesFilter<"services"> | number | null
    serviceKindId?: IntNullableWithAggregatesFilter<"services"> | number | null
    created_at?: DateTimeWithAggregatesFilter<"services"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"services"> | Date | string
  }

  export type serviceKindWhereInput = {
    AND?: serviceKindWhereInput | serviceKindWhereInput[]
    OR?: serviceKindWhereInput[]
    NOT?: serviceKindWhereInput | serviceKindWhereInput[]
    id?: IntFilter<"serviceKind"> | number
    description?: StringNullableFilter<"serviceKind"> | string | null
    created_at?: DateTimeFilter<"serviceKind"> | Date | string
    updated_at?: DateTimeFilter<"serviceKind"> | Date | string
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
  }

  export type serviceKindOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    serviceFeedbacks?: serviceFeedbackOrderByRelationAggregateInput
    Services?: servicesOrderByRelationAggregateInput
  }

  export type serviceKindWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: serviceKindWhereInput | serviceKindWhereInput[]
    OR?: serviceKindWhereInput[]
    NOT?: serviceKindWhereInput | serviceKindWhereInput[]
    description?: StringNullableFilter<"serviceKind"> | string | null
    created_at?: DateTimeFilter<"serviceKind"> | Date | string
    updated_at?: DateTimeFilter<"serviceKind"> | Date | string
    serviceFeedbacks?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
  }, "id">

  export type serviceKindOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: serviceKindCountOrderByAggregateInput
    _avg?: serviceKindAvgOrderByAggregateInput
    _max?: serviceKindMaxOrderByAggregateInput
    _min?: serviceKindMinOrderByAggregateInput
    _sum?: serviceKindSumOrderByAggregateInput
  }

  export type serviceKindScalarWhereWithAggregatesInput = {
    AND?: serviceKindScalarWhereWithAggregatesInput | serviceKindScalarWhereWithAggregatesInput[]
    OR?: serviceKindScalarWhereWithAggregatesInput[]
    NOT?: serviceKindScalarWhereWithAggregatesInput | serviceKindScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"serviceKind"> | number
    description?: StringNullableWithAggregatesFilter<"serviceKind"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"serviceKind"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"serviceKind"> | Date | string
  }

  export type logsWhereInput = {
    AND?: logsWhereInput | logsWhereInput[]
    OR?: logsWhereInput[]
    NOT?: logsWhereInput | logsWhereInput[]
    id?: IntFilter<"logs"> | number
    userId?: IntFilter<"logs"> | number
    serviceFeedbackId?: IntFilter<"logs"> | number
    created_at?: DateTimeFilter<"logs"> | Date | string
    user?: XOR<SubmittersRelationFilter, submittersWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, serviceFeedbackWhereInput>
  }

  export type logsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    user?: submittersOrderByWithRelationInput
    serviceFeedback?: serviceFeedbackOrderByWithRelationInput
  }

  export type logsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: logsWhereInput | logsWhereInput[]
    OR?: logsWhereInput[]
    NOT?: logsWhereInput | logsWhereInput[]
    userId?: IntFilter<"logs"> | number
    serviceFeedbackId?: IntFilter<"logs"> | number
    created_at?: DateTimeFilter<"logs"> | Date | string
    user?: XOR<SubmittersRelationFilter, submittersWhereInput>
    serviceFeedback?: XOR<ServiceFeedbackRelationFilter, serviceFeedbackWhereInput>
  }, "id">

  export type logsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    _count?: logsCountOrderByAggregateInput
    _avg?: logsAvgOrderByAggregateInput
    _max?: logsMaxOrderByAggregateInput
    _min?: logsMinOrderByAggregateInput
    _sum?: logsSumOrderByAggregateInput
  }

  export type logsScalarWhereWithAggregatesInput = {
    AND?: logsScalarWhereWithAggregatesInput | logsScalarWhereWithAggregatesInput[]
    OR?: logsScalarWhereWithAggregatesInput[]
    NOT?: logsScalarWhereWithAggregatesInput | logsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"logs"> | number
    userId?: IntWithAggregatesFilter<"logs"> | number
    serviceFeedbackId?: IntWithAggregatesFilter<"logs"> | number
    created_at?: DateTimeWithAggregatesFilter<"logs"> | Date | string
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    id?: IntFilter<"categories"> | number
    title?: StringFilter<"categories"> | string
    qualityDimension?: StringFilter<"categories"> | string
    created_at?: DateTimeFilter<"categories"> | Date | string
    updated_at?: DateTimeFilter<"categories"> | Date | string
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
    Questions?: QuestionsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    FeedbackQuestion?: feedbackQuestionOrderByRelationAggregateInput
    Questions?: questionsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    title?: StringFilter<"categories"> | string
    qualityDimension?: StringFilter<"categories"> | string
    created_at?: DateTimeFilter<"categories"> | Date | string
    updated_at?: DateTimeFilter<"categories"> | Date | string
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
    Questions?: QuestionsListRelationFilter
  }, "id">

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _avg?: categoriesAvgOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
    _sum?: categoriesSumOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"categories"> | number
    title?: StringWithAggregatesFilter<"categories"> | string
    qualityDimension?: StringWithAggregatesFilter<"categories"> | string
    created_at?: DateTimeWithAggregatesFilter<"categories"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"categories"> | Date | string
  }

  export type questionsWhereInput = {
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    id?: IntFilter<"questions"> | number
    title?: StringNullableFilter<"questions"> | string | null
    description?: StringNullableFilter<"questions"> | string | null
    categoryId?: IntFilter<"questions"> | number
    created_at?: DateTimeFilter<"questions"> | Date | string
    updated_at?: DateTimeFilter<"questions"> | Date | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
  }

  export type questionsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    category?: categoriesOrderByWithRelationInput
    FeedbackQuestion?: feedbackQuestionOrderByRelationAggregateInput
  }

  export type questionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    title?: string
    AND?: questionsWhereInput | questionsWhereInput[]
    OR?: questionsWhereInput[]
    NOT?: questionsWhereInput | questionsWhereInput[]
    description?: StringNullableFilter<"questions"> | string | null
    categoryId?: IntFilter<"questions"> | number
    created_at?: DateTimeFilter<"questions"> | Date | string
    updated_at?: DateTimeFilter<"questions"> | Date | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    FeedbackQuestion?: FeedbackQuestionListRelationFilter
  }, "id" | "title">

  export type questionsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: questionsCountOrderByAggregateInput
    _avg?: questionsAvgOrderByAggregateInput
    _max?: questionsMaxOrderByAggregateInput
    _min?: questionsMinOrderByAggregateInput
    _sum?: questionsSumOrderByAggregateInput
  }

  export type questionsScalarWhereWithAggregatesInput = {
    AND?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    OR?: questionsScalarWhereWithAggregatesInput[]
    NOT?: questionsScalarWhereWithAggregatesInput | questionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"questions"> | number
    title?: StringNullableWithAggregatesFilter<"questions"> | string | null
    description?: StringNullableWithAggregatesFilter<"questions"> | string | null
    categoryId?: IntWithAggregatesFilter<"questions"> | number
    created_at?: DateTimeWithAggregatesFilter<"questions"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"questions"> | Date | string
  }

  export type officesWhereInput = {
    AND?: officesWhereInput | officesWhereInput[]
    OR?: officesWhereInput[]
    NOT?: officesWhereInput | officesWhereInput[]
    id?: IntFilter<"offices"> | number
    title?: StringFilter<"offices"> | string
    created_at?: DateTimeFilter<"offices"> | Date | string
    updated_at?: DateTimeFilter<"offices"> | Date | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type officesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    ServiceFeedback?: serviceFeedbackOrderByRelationAggregateInput
    Services?: servicesOrderByRelationAggregateInput
    users?: usersOrderByRelationAggregateInput
  }

  export type officesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: officesWhereInput | officesWhereInput[]
    OR?: officesWhereInput[]
    NOT?: officesWhereInput | officesWhereInput[]
    title?: StringFilter<"offices"> | string
    created_at?: DateTimeFilter<"offices"> | Date | string
    updated_at?: DateTimeFilter<"offices"> | Date | string
    ServiceFeedback?: ServiceFeedbackListRelationFilter
    Services?: ServicesListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type officesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: officesCountOrderByAggregateInput
    _avg?: officesAvgOrderByAggregateInput
    _max?: officesMaxOrderByAggregateInput
    _min?: officesMinOrderByAggregateInput
    _sum?: officesSumOrderByAggregateInput
  }

  export type officesScalarWhereWithAggregatesInput = {
    AND?: officesScalarWhereWithAggregatesInput | officesScalarWhereWithAggregatesInput[]
    OR?: officesScalarWhereWithAggregatesInput[]
    NOT?: officesScalarWhereWithAggregatesInput | officesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"offices"> | number
    title?: StringWithAggregatesFilter<"offices"> | string
    created_at?: DateTimeWithAggregatesFilter<"offices"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"offices"> | Date | string
  }

  export type usersCreateInput = {
    username: string
    password: string
    role: string
    officeName?: string | null
    office?: officesCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
    officeId?: number | null
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    office?: officesUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type usersCreateManyInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
    officeId?: number | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type submittersCreateInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    age?: ageCreateNestedOneWithoutSubmittersInput
    clientType?: clientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: logsCreateNestedManyWithoutUserInput
  }

  export type submittersUncheckedCreateInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type submittersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: ageUpdateOneWithoutSubmittersNestedInput
    clientType?: clientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type submittersCreateManyInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
  }

  export type submittersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type submittersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type ageCreateInput = {
    id?: number
    description: string
    Submitters?: submittersCreateNestedManyWithoutAgeInput
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutAgeInput
  }

  export type ageUncheckedCreateInput = {
    id?: number
    description: string
    Submitters?: submittersUncheckedCreateNestedManyWithoutAgeInput
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutAgeInput
  }

  export type ageUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUpdateManyWithoutAgeNestedInput
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutAgeNestedInput
  }

  export type ageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUncheckedUpdateManyWithoutAgeNestedInput
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type ageCreateManyInput = {
    id?: number
    description: string
  }

  export type ageUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type serviceFeedbackCreateInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUpdateInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackCreateManyInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type serviceFeedbackUpdateManyMutationInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceFeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientTypeCreateInput = {
    id?: number
    type: string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutClientTypeInput
    Submitters?: submittersCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeUncheckedCreateInput = {
    id?: number
    type: string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput
    Submitters?: submittersUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutClientTypeNestedInput
    Submitters?: submittersUpdateManyWithoutClientTypeNestedInput
  }

  export type clientTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput
    Submitters?: submittersUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type clientTypeCreateManyInput = {
    id?: number
    type: string
  }

  export type clientTypeUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
  }

  export type clientTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
  }

  export type feedbackQuestionCreateInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: categoriesCreateNestedOneWithoutFeedbackQuestionInput
    question: questionsCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: serviceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type feedbackQuestionUncheckedCreateInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionUpdateInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    question?: questionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: serviceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type feedbackQuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionCreateManyInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionUpdateManyMutationInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type servicesCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: officesCreateNestedOneWithoutServicesInput
    serviceKind?: serviceKindCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type servicesUncheckedCreateInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type servicesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: officesUpdateOneWithoutServicesNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type servicesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type servicesCreateManyInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type servicesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type servicesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceKindCreateInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutServiceKindInput
    Services?: servicesCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindUncheckedCreateInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput
    Services?: servicesUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutServiceKindNestedInput
    Services?: servicesUpdateManyWithoutServiceKindNestedInput
  }

  export type serviceKindUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput
    Services?: servicesUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type serviceKindCreateManyInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type serviceKindUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceKindUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsCreateInput = {
    id?: number
    created_at?: Date | string
    user: submittersCreateNestedOneWithoutLogsInput
    serviceFeedback: serviceFeedbackCreateNestedOneWithoutLogsInput
  }

  export type logsUncheckedCreateInput = {
    id?: number
    userId: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type logsUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: submittersUpdateOneRequiredWithoutLogsNestedInput
    serviceFeedback?: serviceFeedbackUpdateOneRequiredWithoutLogsNestedInput
  }

  export type logsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsCreateManyInput = {
    id?: number
    userId: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type logsUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesCreateInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionCreateNestedManyWithoutCategoryInput
    Questions?: questionsCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput
    Questions?: questionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUpdateManyWithoutCategoryNestedInput
    Questions?: questionsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput
    Questions?: questionsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type categoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    category: categoriesCreateNestedOneWithoutQuestionsInput
    FeedbackQuestion?: feedbackQuestionCreateNestedManyWithoutQuestionInput
  }

  export type questionsUncheckedCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionsUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoriesUpdateOneRequiredWithoutQuestionsNestedInput
    FeedbackQuestion?: feedbackQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionsCreateManyInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type questionsUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type officesCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    Services?: servicesCreateNestedManyWithoutOfficeInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type officesUncheckedCreateInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    Services?: servicesUncheckedCreateNestedManyWithoutOfficeInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type officesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    Services?: servicesUpdateManyWithoutOfficeNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type officesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    Services?: servicesUncheckedUpdateManyWithoutOfficeNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type officesCreateManyInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type officesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type officesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OfficesNullableRelationFilter = {
    is?: officesWhereInput | null
    isNot?: officesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type usersCountOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    uid?: SortOrder
    officeId?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    uid?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    officeName?: SortOrder
    officeId?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    uid?: SortOrder
    officeId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AgeNullableRelationFilter = {
    is?: ageWhereInput | null
    isNot?: ageWhereInput | null
  }

  export type ClientTypeNullableRelationFilter = {
    is?: clientTypeWhereInput | null
    isNot?: clientTypeWhereInput | null
  }

  export type ServiceFeedbackListRelationFilter = {
    every?: serviceFeedbackWhereInput
    some?: serviceFeedbackWhereInput
    none?: serviceFeedbackWhereInput
  }

  export type LogsListRelationFilter = {
    every?: logsWhereInput
    some?: logsWhereInput
    none?: logsWhereInput
  }

  export type serviceFeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type logsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type submittersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    ageBracket?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type submittersAvgOrderByAggregateInput = {
    id?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
  }

  export type submittersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    ageBracket?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type submittersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    ageId?: SortOrder
    ageBracket?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
    sex?: SortOrder
  }

  export type submittersSumOrderByAggregateInput = {
    id?: SortOrder
    ageId?: SortOrder
    specAge?: SortOrder
    clientTypeId?: SortOrder
  }

  export type SubmittersListRelationFilter = {
    every?: submittersWhereInput
    some?: submittersWhereInput
    none?: submittersWhereInput
  }

  export type submittersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ageCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type ageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ageMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type ageMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
  }

  export type ageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SubmittersRelationFilter = {
    is?: submittersWhereInput
    isNot?: submittersWhereInput
  }

  export type ServicesNullableRelationFilter = {
    is?: servicesWhereInput | null
    isNot?: servicesWhereInput | null
  }

  export type ServiceKindNullableRelationFilter = {
    is?: serviceKindWhereInput | null
    isNot?: serviceKindWhereInput | null
  }

  export type OfficesRelationFilter = {
    is?: officesWhereInput
    isNot?: officesWhereInput
  }

  export type FeedbackQuestionListRelationFilter = {
    every?: feedbackQuestionWhereInput
    some?: feedbackQuestionWhereInput
    none?: feedbackQuestionWhereInput
  }

  export type feedbackQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type serviceFeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    email?: SortOrder
    language?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    sex?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceFeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    submitterId?: SortOrder
    serviceId?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    officeId?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
  }

  export type serviceFeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    email?: SortOrder
    language?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    sex?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceFeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    startTime?: SortOrder
    submitterId?: SortOrder
    submittername?: SortOrder
    email?: SortOrder
    language?: SortOrder
    serviceDesc?: SortOrder
    serviceId?: SortOrder
    otherService?: SortOrder
    typeId?: SortOrder
    sex?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    serviceKindDescription?: SortOrder
    relatedClientType?: SortOrder
    ageBracket?: SortOrder
    officeId?: SortOrder
    officeName?: SortOrder
    consent?: SortOrder
    awareCC?: SortOrder
    seeCC?: SortOrder
    useCC?: SortOrder
    overallComment?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
    uniqueIdentifier?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceFeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    submitterId?: SortOrder
    serviceId?: SortOrder
    typeId?: SortOrder
    ageBracketId?: SortOrder
    specificAge?: SortOrder
    serviceKindId?: SortOrder
    officeId?: SortOrder
    averageRating?: SortOrder
    responsiveness?: SortOrder
    reliability?: SortOrder
    accessAndFacilities?: SortOrder
    communication?: SortOrder
    costs?: SortOrder
    integrity?: SortOrder
    assurance?: SortOrder
    outcome?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type clientTypeCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type clientTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type clientTypeMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
  }

  export type clientTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type QuestionsRelationFilter = {
    is?: questionsWhereInput
    isNot?: questionsWhereInput
  }

  export type ServiceFeedbackRelationFilter = {
    is?: serviceFeedbackWhereInput
    isNot?: serviceFeedbackWhereInput
  }

  export type feedbackQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type feedbackQuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type feedbackQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type feedbackQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type feedbackQuestionSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    questionId?: SortOrder
    rating?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type servicesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type servicesAvgOrderByAggregateInput = {
    id?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
  }

  export type servicesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type servicesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type servicesSumOrderByAggregateInput = {
    id?: SortOrder
    relatedOfficeId?: SortOrder
    serviceKindId?: SortOrder
  }

  export type ServicesListRelationFilter = {
    every?: servicesWhereInput
    some?: servicesWhereInput
    none?: servicesWhereInput
  }

  export type servicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type serviceKindCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceKindAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type serviceKindMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceKindMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type serviceKindSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type logsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type logsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type logsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type logsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
    created_at?: SortOrder
  }

  export type logsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    serviceFeedbackId?: SortOrder
  }

  export type QuestionsListRelationFilter = {
    every?: questionsWhereInput
    some?: questionsWhereInput
    none?: questionsWhereInput
  }

  export type questionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    qualityDimension?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type questionsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type questionsAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type questionsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type questionsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type questionsSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type officesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type officesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type officesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type officesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type officesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type officesCreateNestedOneWithoutUsersInput = {
    create?: XOR<officesCreateWithoutUsersInput, officesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: officesCreateOrConnectWithoutUsersInput
    connect?: officesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type officesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<officesCreateWithoutUsersInput, officesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: officesCreateOrConnectWithoutUsersInput
    upsert?: officesUpsertWithoutUsersInput
    disconnect?: officesWhereInput | boolean
    delete?: officesWhereInput | boolean
    connect?: officesWhereUniqueInput
    update?: XOR<XOR<officesUpdateToOneWithWhereWithoutUsersInput, officesUpdateWithoutUsersInput>, officesUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ageCreateNestedOneWithoutSubmittersInput = {
    create?: XOR<ageCreateWithoutSubmittersInput, ageUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: ageCreateOrConnectWithoutSubmittersInput
    connect?: ageWhereUniqueInput
  }

  export type clientTypeCreateNestedOneWithoutSubmittersInput = {
    create?: XOR<clientTypeCreateWithoutSubmittersInput, clientTypeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: clientTypeCreateOrConnectWithoutSubmittersInput
    connect?: clientTypeWhereUniqueInput
  }

  export type serviceFeedbackCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput> | serviceFeedbackCreateWithoutSubmitterInput[] | serviceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutSubmitterInput | serviceFeedbackCreateOrConnectWithoutSubmitterInput[]
    createMany?: serviceFeedbackCreateManySubmitterInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type logsCreateNestedManyWithoutUserInput = {
    create?: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput> | logsCreateWithoutUserInput[] | logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logsCreateOrConnectWithoutUserInput | logsCreateOrConnectWithoutUserInput[]
    createMany?: logsCreateManyUserInputEnvelope
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput = {
    create?: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput> | serviceFeedbackCreateWithoutSubmitterInput[] | serviceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutSubmitterInput | serviceFeedbackCreateOrConnectWithoutSubmitterInput[]
    createMany?: serviceFeedbackCreateManySubmitterInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type logsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput> | logsCreateWithoutUserInput[] | logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logsCreateOrConnectWithoutUserInput | logsCreateOrConnectWithoutUserInput[]
    createMany?: logsCreateManyUserInputEnvelope
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
  }

  export type ageUpdateOneWithoutSubmittersNestedInput = {
    create?: XOR<ageCreateWithoutSubmittersInput, ageUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: ageCreateOrConnectWithoutSubmittersInput
    upsert?: ageUpsertWithoutSubmittersInput
    disconnect?: ageWhereInput | boolean
    delete?: ageWhereInput | boolean
    connect?: ageWhereUniqueInput
    update?: XOR<XOR<ageUpdateToOneWithWhereWithoutSubmittersInput, ageUpdateWithoutSubmittersInput>, ageUncheckedUpdateWithoutSubmittersInput>
  }

  export type clientTypeUpdateOneWithoutSubmittersNestedInput = {
    create?: XOR<clientTypeCreateWithoutSubmittersInput, clientTypeUncheckedCreateWithoutSubmittersInput>
    connectOrCreate?: clientTypeCreateOrConnectWithoutSubmittersInput
    upsert?: clientTypeUpsertWithoutSubmittersInput
    disconnect?: clientTypeWhereInput | boolean
    delete?: clientTypeWhereInput | boolean
    connect?: clientTypeWhereUniqueInput
    update?: XOR<XOR<clientTypeUpdateToOneWithWhereWithoutSubmittersInput, clientTypeUpdateWithoutSubmittersInput>, clientTypeUncheckedUpdateWithoutSubmittersInput>
  }

  export type serviceFeedbackUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput> | serviceFeedbackCreateWithoutSubmitterInput[] | serviceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutSubmitterInput | serviceFeedbackCreateOrConnectWithoutSubmitterInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput | serviceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: serviceFeedbackCreateManySubmitterInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput | serviceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutSubmitterInput | serviceFeedbackUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type logsUpdateManyWithoutUserNestedInput = {
    create?: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput> | logsCreateWithoutUserInput[] | logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logsCreateOrConnectWithoutUserInput | logsCreateOrConnectWithoutUserInput[]
    upsert?: logsUpsertWithWhereUniqueWithoutUserInput | logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logsCreateManyUserInputEnvelope
    set?: logsWhereUniqueInput | logsWhereUniqueInput[]
    disconnect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    delete?: logsWhereUniqueInput | logsWhereUniqueInput[]
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    update?: logsUpdateWithWhereUniqueWithoutUserInput | logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logsUpdateManyWithWhereWithoutUserInput | logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logsScalarWhereInput | logsScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput> | serviceFeedbackCreateWithoutSubmitterInput[] | serviceFeedbackUncheckedCreateWithoutSubmitterInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutSubmitterInput | serviceFeedbackCreateOrConnectWithoutSubmitterInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput | serviceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput[]
    createMany?: serviceFeedbackCreateManySubmitterInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput | serviceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutSubmitterInput | serviceFeedbackUpdateManyWithWhereWithoutSubmitterInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type logsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput> | logsCreateWithoutUserInput[] | logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: logsCreateOrConnectWithoutUserInput | logsCreateOrConnectWithoutUserInput[]
    upsert?: logsUpsertWithWhereUniqueWithoutUserInput | logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: logsCreateManyUserInputEnvelope
    set?: logsWhereUniqueInput | logsWhereUniqueInput[]
    disconnect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    delete?: logsWhereUniqueInput | logsWhereUniqueInput[]
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    update?: logsUpdateWithWhereUniqueWithoutUserInput | logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: logsUpdateManyWithWhereWithoutUserInput | logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: logsScalarWhereInput | logsScalarWhereInput[]
  }

  export type submittersCreateNestedManyWithoutAgeInput = {
    create?: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput> | submittersCreateWithoutAgeInput[] | submittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutAgeInput | submittersCreateOrConnectWithoutAgeInput[]
    createMany?: submittersCreateManyAgeInputEnvelope
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
  }

  export type serviceFeedbackCreateNestedManyWithoutAgeInput = {
    create?: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput> | serviceFeedbackCreateWithoutAgeInput[] | serviceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutAgeInput | serviceFeedbackCreateOrConnectWithoutAgeInput[]
    createMany?: serviceFeedbackCreateManyAgeInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type submittersUncheckedCreateNestedManyWithoutAgeInput = {
    create?: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput> | submittersCreateWithoutAgeInput[] | submittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutAgeInput | submittersCreateOrConnectWithoutAgeInput[]
    createMany?: submittersCreateManyAgeInputEnvelope
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutAgeInput = {
    create?: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput> | serviceFeedbackCreateWithoutAgeInput[] | serviceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutAgeInput | serviceFeedbackCreateOrConnectWithoutAgeInput[]
    createMany?: serviceFeedbackCreateManyAgeInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type submittersUpdateManyWithoutAgeNestedInput = {
    create?: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput> | submittersCreateWithoutAgeInput[] | submittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutAgeInput | submittersCreateOrConnectWithoutAgeInput[]
    upsert?: submittersUpsertWithWhereUniqueWithoutAgeInput | submittersUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: submittersCreateManyAgeInputEnvelope
    set?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    disconnect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    delete?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    update?: submittersUpdateWithWhereUniqueWithoutAgeInput | submittersUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: submittersUpdateManyWithWhereWithoutAgeInput | submittersUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: submittersScalarWhereInput | submittersScalarWhereInput[]
  }

  export type serviceFeedbackUpdateManyWithoutAgeNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput> | serviceFeedbackCreateWithoutAgeInput[] | serviceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutAgeInput | serviceFeedbackCreateOrConnectWithoutAgeInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutAgeInput | serviceFeedbackUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: serviceFeedbackCreateManyAgeInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutAgeInput | serviceFeedbackUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutAgeInput | serviceFeedbackUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type submittersUncheckedUpdateManyWithoutAgeNestedInput = {
    create?: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput> | submittersCreateWithoutAgeInput[] | submittersUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutAgeInput | submittersCreateOrConnectWithoutAgeInput[]
    upsert?: submittersUpsertWithWhereUniqueWithoutAgeInput | submittersUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: submittersCreateManyAgeInputEnvelope
    set?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    disconnect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    delete?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    update?: submittersUpdateWithWhereUniqueWithoutAgeInput | submittersUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: submittersUpdateManyWithWhereWithoutAgeInput | submittersUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: submittersScalarWhereInput | submittersScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutAgeNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput> | serviceFeedbackCreateWithoutAgeInput[] | serviceFeedbackUncheckedCreateWithoutAgeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutAgeInput | serviceFeedbackCreateOrConnectWithoutAgeInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutAgeInput | serviceFeedbackUpsertWithWhereUniqueWithoutAgeInput[]
    createMany?: serviceFeedbackCreateManyAgeInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutAgeInput | serviceFeedbackUpdateWithWhereUniqueWithoutAgeInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutAgeInput | serviceFeedbackUpdateManyWithWhereWithoutAgeInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type submittersCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<submittersCreateWithoutServiceFeedbacksInput, submittersUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: submittersCreateOrConnectWithoutServiceFeedbacksInput
    connect?: submittersWhereUniqueInput
  }

  export type servicesCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<servicesCreateWithoutServiceFeedbacksInput, servicesUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: servicesCreateOrConnectWithoutServiceFeedbacksInput
    connect?: servicesWhereUniqueInput
  }

  export type clientTypeCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<clientTypeCreateWithoutServiceFeedbackInput, clientTypeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: clientTypeCreateOrConnectWithoutServiceFeedbackInput
    connect?: clientTypeWhereUniqueInput
  }

  export type ageCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<ageCreateWithoutServiceFeedbackInput, ageUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: ageCreateOrConnectWithoutServiceFeedbackInput
    connect?: ageWhereUniqueInput
  }

  export type serviceKindCreateNestedOneWithoutServiceFeedbacksInput = {
    create?: XOR<serviceKindCreateWithoutServiceFeedbacksInput, serviceKindUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: serviceKindCreateOrConnectWithoutServiceFeedbacksInput
    connect?: serviceKindWhereUniqueInput
  }

  export type officesCreateNestedOneWithoutServiceFeedbackInput = {
    create?: XOR<officesCreateWithoutServiceFeedbackInput, officesUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: officesCreateOrConnectWithoutServiceFeedbackInput
    connect?: officesWhereUniqueInput
  }

  export type feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | feedbackQuestionCreateWithoutServiceFeedbackInput[] | feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: feedbackQuestionCreateManyServiceFeedbackInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type logsCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput> | logsCreateWithoutServiceFeedbackInput[] | logsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: logsCreateOrConnectWithoutServiceFeedbackInput | logsCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: logsCreateManyServiceFeedbackInputEnvelope
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
  }

  export type feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | feedbackQuestionCreateWithoutServiceFeedbackInput[] | feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: feedbackQuestionCreateManyServiceFeedbackInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type logsUncheckedCreateNestedManyWithoutServiceFeedbackInput = {
    create?: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput> | logsCreateWithoutServiceFeedbackInput[] | logsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: logsCreateOrConnectWithoutServiceFeedbackInput | logsCreateOrConnectWithoutServiceFeedbackInput[]
    createMany?: logsCreateManyServiceFeedbackInputEnvelope
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput = {
    create?: XOR<submittersCreateWithoutServiceFeedbacksInput, submittersUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: submittersCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: submittersUpsertWithoutServiceFeedbacksInput
    connect?: submittersWhereUniqueInput
    update?: XOR<XOR<submittersUpdateToOneWithWhereWithoutServiceFeedbacksInput, submittersUpdateWithoutServiceFeedbacksInput>, submittersUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type servicesUpdateOneWithoutServiceFeedbacksNestedInput = {
    create?: XOR<servicesCreateWithoutServiceFeedbacksInput, servicesUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: servicesCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: servicesUpsertWithoutServiceFeedbacksInput
    disconnect?: servicesWhereInput | boolean
    delete?: servicesWhereInput | boolean
    connect?: servicesWhereUniqueInput
    update?: XOR<XOR<servicesUpdateToOneWithWhereWithoutServiceFeedbacksInput, servicesUpdateWithoutServiceFeedbacksInput>, servicesUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type clientTypeUpdateOneWithoutServiceFeedbackNestedInput = {
    create?: XOR<clientTypeCreateWithoutServiceFeedbackInput, clientTypeUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: clientTypeCreateOrConnectWithoutServiceFeedbackInput
    upsert?: clientTypeUpsertWithoutServiceFeedbackInput
    disconnect?: clientTypeWhereInput | boolean
    delete?: clientTypeWhereInput | boolean
    connect?: clientTypeWhereUniqueInput
    update?: XOR<XOR<clientTypeUpdateToOneWithWhereWithoutServiceFeedbackInput, clientTypeUpdateWithoutServiceFeedbackInput>, clientTypeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type ageUpdateOneWithoutServiceFeedbackNestedInput = {
    create?: XOR<ageCreateWithoutServiceFeedbackInput, ageUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: ageCreateOrConnectWithoutServiceFeedbackInput
    upsert?: ageUpsertWithoutServiceFeedbackInput
    disconnect?: ageWhereInput | boolean
    delete?: ageWhereInput | boolean
    connect?: ageWhereUniqueInput
    update?: XOR<XOR<ageUpdateToOneWithWhereWithoutServiceFeedbackInput, ageUpdateWithoutServiceFeedbackInput>, ageUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type serviceKindUpdateOneWithoutServiceFeedbacksNestedInput = {
    create?: XOR<serviceKindCreateWithoutServiceFeedbacksInput, serviceKindUncheckedCreateWithoutServiceFeedbacksInput>
    connectOrCreate?: serviceKindCreateOrConnectWithoutServiceFeedbacksInput
    upsert?: serviceKindUpsertWithoutServiceFeedbacksInput
    disconnect?: serviceKindWhereInput | boolean
    delete?: serviceKindWhereInput | boolean
    connect?: serviceKindWhereUniqueInput
    update?: XOR<XOR<serviceKindUpdateToOneWithWhereWithoutServiceFeedbacksInput, serviceKindUpdateWithoutServiceFeedbacksInput>, serviceKindUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type officesUpdateOneRequiredWithoutServiceFeedbackNestedInput = {
    create?: XOR<officesCreateWithoutServiceFeedbackInput, officesUncheckedCreateWithoutServiceFeedbackInput>
    connectOrCreate?: officesCreateOrConnectWithoutServiceFeedbackInput
    upsert?: officesUpsertWithoutServiceFeedbackInput
    connect?: officesWhereUniqueInput
    update?: XOR<XOR<officesUpdateToOneWithWhereWithoutServiceFeedbackInput, officesUpdateWithoutServiceFeedbackInput>, officesUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | feedbackQuestionCreateWithoutServiceFeedbackInput[] | feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput | feedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: feedbackQuestionCreateManyServiceFeedbackInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput | feedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput | feedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type logsUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput> | logsCreateWithoutServiceFeedbackInput[] | logsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: logsCreateOrConnectWithoutServiceFeedbackInput | logsCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: logsUpsertWithWhereUniqueWithoutServiceFeedbackInput | logsUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: logsCreateManyServiceFeedbackInputEnvelope
    set?: logsWhereUniqueInput | logsWhereUniqueInput[]
    disconnect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    delete?: logsWhereUniqueInput | logsWhereUniqueInput[]
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    update?: logsUpdateWithWhereUniqueWithoutServiceFeedbackInput | logsUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: logsUpdateManyWithWhereWithoutServiceFeedbackInput | logsUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: logsScalarWhereInput | logsScalarWhereInput[]
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput> | feedbackQuestionCreateWithoutServiceFeedbackInput[] | feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput | feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput | feedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: feedbackQuestionCreateManyServiceFeedbackInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput | feedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput | feedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput = {
    create?: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput> | logsCreateWithoutServiceFeedbackInput[] | logsUncheckedCreateWithoutServiceFeedbackInput[]
    connectOrCreate?: logsCreateOrConnectWithoutServiceFeedbackInput | logsCreateOrConnectWithoutServiceFeedbackInput[]
    upsert?: logsUpsertWithWhereUniqueWithoutServiceFeedbackInput | logsUpsertWithWhereUniqueWithoutServiceFeedbackInput[]
    createMany?: logsCreateManyServiceFeedbackInputEnvelope
    set?: logsWhereUniqueInput | logsWhereUniqueInput[]
    disconnect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    delete?: logsWhereUniqueInput | logsWhereUniqueInput[]
    connect?: logsWhereUniqueInput | logsWhereUniqueInput[]
    update?: logsUpdateWithWhereUniqueWithoutServiceFeedbackInput | logsUpdateWithWhereUniqueWithoutServiceFeedbackInput[]
    updateMany?: logsUpdateManyWithWhereWithoutServiceFeedbackInput | logsUpdateManyWithWhereWithoutServiceFeedbackInput[]
    deleteMany?: logsScalarWhereInput | logsScalarWhereInput[]
  }

  export type serviceFeedbackCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput> | serviceFeedbackCreateWithoutClientTypeInput[] | serviceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutClientTypeInput | serviceFeedbackCreateOrConnectWithoutClientTypeInput[]
    createMany?: serviceFeedbackCreateManyClientTypeInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type submittersCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput> | submittersCreateWithoutClientTypeInput[] | submittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutClientTypeInput | submittersCreateOrConnectWithoutClientTypeInput[]
    createMany?: submittersCreateManyClientTypeInputEnvelope
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput> | serviceFeedbackCreateWithoutClientTypeInput[] | serviceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutClientTypeInput | serviceFeedbackCreateOrConnectWithoutClientTypeInput[]
    createMany?: serviceFeedbackCreateManyClientTypeInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type submittersUncheckedCreateNestedManyWithoutClientTypeInput = {
    create?: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput> | submittersCreateWithoutClientTypeInput[] | submittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutClientTypeInput | submittersCreateOrConnectWithoutClientTypeInput[]
    createMany?: submittersCreateManyClientTypeInputEnvelope
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
  }

  export type serviceFeedbackUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput> | serviceFeedbackCreateWithoutClientTypeInput[] | serviceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutClientTypeInput | serviceFeedbackCreateOrConnectWithoutClientTypeInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput | serviceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: serviceFeedbackCreateManyClientTypeInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput | serviceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutClientTypeInput | serviceFeedbackUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type submittersUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput> | submittersCreateWithoutClientTypeInput[] | submittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutClientTypeInput | submittersCreateOrConnectWithoutClientTypeInput[]
    upsert?: submittersUpsertWithWhereUniqueWithoutClientTypeInput | submittersUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: submittersCreateManyClientTypeInputEnvelope
    set?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    disconnect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    delete?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    update?: submittersUpdateWithWhereUniqueWithoutClientTypeInput | submittersUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: submittersUpdateManyWithWhereWithoutClientTypeInput | submittersUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: submittersScalarWhereInput | submittersScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput> | serviceFeedbackCreateWithoutClientTypeInput[] | serviceFeedbackUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutClientTypeInput | serviceFeedbackCreateOrConnectWithoutClientTypeInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput | serviceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: serviceFeedbackCreateManyClientTypeInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput | serviceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutClientTypeInput | serviceFeedbackUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type submittersUncheckedUpdateManyWithoutClientTypeNestedInput = {
    create?: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput> | submittersCreateWithoutClientTypeInput[] | submittersUncheckedCreateWithoutClientTypeInput[]
    connectOrCreate?: submittersCreateOrConnectWithoutClientTypeInput | submittersCreateOrConnectWithoutClientTypeInput[]
    upsert?: submittersUpsertWithWhereUniqueWithoutClientTypeInput | submittersUpsertWithWhereUniqueWithoutClientTypeInput[]
    createMany?: submittersCreateManyClientTypeInputEnvelope
    set?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    disconnect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    delete?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    connect?: submittersWhereUniqueInput | submittersWhereUniqueInput[]
    update?: submittersUpdateWithWhereUniqueWithoutClientTypeInput | submittersUpdateWithWhereUniqueWithoutClientTypeInput[]
    updateMany?: submittersUpdateManyWithWhereWithoutClientTypeInput | submittersUpdateManyWithWhereWithoutClientTypeInput[]
    deleteMany?: submittersScalarWhereInput | submittersScalarWhereInput[]
  }

  export type categoriesCreateNestedOneWithoutFeedbackQuestionInput = {
    create?: XOR<categoriesCreateWithoutFeedbackQuestionInput, categoriesUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutFeedbackQuestionInput
    connect?: categoriesWhereUniqueInput
  }

  export type questionsCreateNestedOneWithoutFeedbackQuestionInput = {
    create?: XOR<questionsCreateWithoutFeedbackQuestionInput, questionsUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: questionsCreateOrConnectWithoutFeedbackQuestionInput
    connect?: questionsWhereUniqueInput
  }

  export type serviceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput = {
    create?: XOR<serviceFeedbackCreateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput
    connect?: serviceFeedbackWhereUniqueInput
  }

  export type categoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput = {
    create?: XOR<categoriesCreateWithoutFeedbackQuestionInput, categoriesUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutFeedbackQuestionInput
    upsert?: categoriesUpsertWithoutFeedbackQuestionInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutFeedbackQuestionInput, categoriesUpdateWithoutFeedbackQuestionInput>, categoriesUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type questionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput = {
    create?: XOR<questionsCreateWithoutFeedbackQuestionInput, questionsUncheckedCreateWithoutFeedbackQuestionInput>
    connectOrCreate?: questionsCreateOrConnectWithoutFeedbackQuestionInput
    upsert?: questionsUpsertWithoutFeedbackQuestionInput
    connect?: questionsWhereUniqueInput
    update?: XOR<XOR<questionsUpdateToOneWithWhereWithoutFeedbackQuestionInput, questionsUpdateWithoutFeedbackQuestionInput>, questionsUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type serviceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput
    upsert?: serviceFeedbackUpsertWithoutFeedbackQuestionsInput
    connect?: serviceFeedbackWhereUniqueInput
    update?: XOR<XOR<serviceFeedbackUpdateToOneWithWhereWithoutFeedbackQuestionsInput, serviceFeedbackUpdateWithoutFeedbackQuestionsInput>, serviceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
  }

  export type officesCreateNestedOneWithoutServicesInput = {
    create?: XOR<officesCreateWithoutServicesInput, officesUncheckedCreateWithoutServicesInput>
    connectOrCreate?: officesCreateOrConnectWithoutServicesInput
    connect?: officesWhereUniqueInput
  }

  export type serviceKindCreateNestedOneWithoutServicesInput = {
    create?: XOR<serviceKindCreateWithoutServicesInput, serviceKindUncheckedCreateWithoutServicesInput>
    connectOrCreate?: serviceKindCreateOrConnectWithoutServicesInput
    connect?: serviceKindWhereUniqueInput
  }

  export type serviceFeedbackCreateNestedManyWithoutServiceInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput> | serviceFeedbackCreateWithoutServiceInput[] | serviceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceInput | serviceFeedbackCreateOrConnectWithoutServiceInput[]
    createMany?: serviceFeedbackCreateManyServiceInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput> | serviceFeedbackCreateWithoutServiceInput[] | serviceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceInput | serviceFeedbackCreateOrConnectWithoutServiceInput[]
    createMany?: serviceFeedbackCreateManyServiceInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type officesUpdateOneWithoutServicesNestedInput = {
    create?: XOR<officesCreateWithoutServicesInput, officesUncheckedCreateWithoutServicesInput>
    connectOrCreate?: officesCreateOrConnectWithoutServicesInput
    upsert?: officesUpsertWithoutServicesInput
    disconnect?: officesWhereInput | boolean
    delete?: officesWhereInput | boolean
    connect?: officesWhereUniqueInput
    update?: XOR<XOR<officesUpdateToOneWithWhereWithoutServicesInput, officesUpdateWithoutServicesInput>, officesUncheckedUpdateWithoutServicesInput>
  }

  export type serviceKindUpdateOneWithoutServicesNestedInput = {
    create?: XOR<serviceKindCreateWithoutServicesInput, serviceKindUncheckedCreateWithoutServicesInput>
    connectOrCreate?: serviceKindCreateOrConnectWithoutServicesInput
    upsert?: serviceKindUpsertWithoutServicesInput
    disconnect?: serviceKindWhereInput | boolean
    delete?: serviceKindWhereInput | boolean
    connect?: serviceKindWhereUniqueInput
    update?: XOR<XOR<serviceKindUpdateToOneWithWhereWithoutServicesInput, serviceKindUpdateWithoutServicesInput>, serviceKindUncheckedUpdateWithoutServicesInput>
  }

  export type serviceFeedbackUpdateManyWithoutServiceNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput> | serviceFeedbackCreateWithoutServiceInput[] | serviceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceInput | serviceFeedbackCreateOrConnectWithoutServiceInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutServiceInput | serviceFeedbackUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: serviceFeedbackCreateManyServiceInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutServiceInput | serviceFeedbackUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutServiceInput | serviceFeedbackUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput> | serviceFeedbackCreateWithoutServiceInput[] | serviceFeedbackUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceInput | serviceFeedbackCreateOrConnectWithoutServiceInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutServiceInput | serviceFeedbackUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: serviceFeedbackCreateManyServiceInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutServiceInput | serviceFeedbackUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutServiceInput | serviceFeedbackUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type serviceFeedbackCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput> | serviceFeedbackCreateWithoutServiceKindInput[] | serviceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceKindInput | serviceFeedbackCreateOrConnectWithoutServiceKindInput[]
    createMany?: serviceFeedbackCreateManyServiceKindInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type servicesCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput> | servicesCreateWithoutServiceKindInput[] | servicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutServiceKindInput | servicesCreateOrConnectWithoutServiceKindInput[]
    createMany?: servicesCreateManyServiceKindInputEnvelope
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput> | serviceFeedbackCreateWithoutServiceKindInput[] | serviceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceKindInput | serviceFeedbackCreateOrConnectWithoutServiceKindInput[]
    createMany?: serviceFeedbackCreateManyServiceKindInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type servicesUncheckedCreateNestedManyWithoutServiceKindInput = {
    create?: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput> | servicesCreateWithoutServiceKindInput[] | servicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutServiceKindInput | servicesCreateOrConnectWithoutServiceKindInput[]
    createMany?: servicesCreateManyServiceKindInputEnvelope
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
  }

  export type serviceFeedbackUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput> | serviceFeedbackCreateWithoutServiceKindInput[] | serviceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceKindInput | serviceFeedbackCreateOrConnectWithoutServiceKindInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput | serviceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: serviceFeedbackCreateManyServiceKindInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput | serviceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutServiceKindInput | serviceFeedbackUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type servicesUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput> | servicesCreateWithoutServiceKindInput[] | servicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutServiceKindInput | servicesCreateOrConnectWithoutServiceKindInput[]
    upsert?: servicesUpsertWithWhereUniqueWithoutServiceKindInput | servicesUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: servicesCreateManyServiceKindInputEnvelope
    set?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    disconnect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    delete?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    update?: servicesUpdateWithWhereUniqueWithoutServiceKindInput | servicesUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: servicesUpdateManyWithWhereWithoutServiceKindInput | servicesUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: servicesScalarWhereInput | servicesScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput> | serviceFeedbackCreateWithoutServiceKindInput[] | serviceFeedbackUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutServiceKindInput | serviceFeedbackCreateOrConnectWithoutServiceKindInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput | serviceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: serviceFeedbackCreateManyServiceKindInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput | serviceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutServiceKindInput | serviceFeedbackUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type servicesUncheckedUpdateManyWithoutServiceKindNestedInput = {
    create?: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput> | servicesCreateWithoutServiceKindInput[] | servicesUncheckedCreateWithoutServiceKindInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutServiceKindInput | servicesCreateOrConnectWithoutServiceKindInput[]
    upsert?: servicesUpsertWithWhereUniqueWithoutServiceKindInput | servicesUpsertWithWhereUniqueWithoutServiceKindInput[]
    createMany?: servicesCreateManyServiceKindInputEnvelope
    set?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    disconnect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    delete?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    update?: servicesUpdateWithWhereUniqueWithoutServiceKindInput | servicesUpdateWithWhereUniqueWithoutServiceKindInput[]
    updateMany?: servicesUpdateManyWithWhereWithoutServiceKindInput | servicesUpdateManyWithWhereWithoutServiceKindInput[]
    deleteMany?: servicesScalarWhereInput | servicesScalarWhereInput[]
  }

  export type submittersCreateNestedOneWithoutLogsInput = {
    create?: XOR<submittersCreateWithoutLogsInput, submittersUncheckedCreateWithoutLogsInput>
    connectOrCreate?: submittersCreateOrConnectWithoutLogsInput
    connect?: submittersWhereUniqueInput
  }

  export type serviceFeedbackCreateNestedOneWithoutLogsInput = {
    create?: XOR<serviceFeedbackCreateWithoutLogsInput, serviceFeedbackUncheckedCreateWithoutLogsInput>
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutLogsInput
    connect?: serviceFeedbackWhereUniqueInput
  }

  export type submittersUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<submittersCreateWithoutLogsInput, submittersUncheckedCreateWithoutLogsInput>
    connectOrCreate?: submittersCreateOrConnectWithoutLogsInput
    upsert?: submittersUpsertWithoutLogsInput
    connect?: submittersWhereUniqueInput
    update?: XOR<XOR<submittersUpdateToOneWithWhereWithoutLogsInput, submittersUpdateWithoutLogsInput>, submittersUncheckedUpdateWithoutLogsInput>
  }

  export type serviceFeedbackUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutLogsInput, serviceFeedbackUncheckedCreateWithoutLogsInput>
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutLogsInput
    upsert?: serviceFeedbackUpsertWithoutLogsInput
    connect?: serviceFeedbackWhereUniqueInput
    update?: XOR<XOR<serviceFeedbackUpdateToOneWithWhereWithoutLogsInput, serviceFeedbackUpdateWithoutLogsInput>, serviceFeedbackUncheckedUpdateWithoutLogsInput>
  }

  export type feedbackQuestionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput> | feedbackQuestionCreateWithoutCategoryInput[] | feedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutCategoryInput | feedbackQuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: feedbackQuestionCreateManyCategoryInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type questionsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput> | questionsCreateWithoutCategoryInput[] | questionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoryInput | questionsCreateOrConnectWithoutCategoryInput[]
    createMany?: questionsCreateManyCategoryInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type feedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput> | feedbackQuestionCreateWithoutCategoryInput[] | feedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutCategoryInput | feedbackQuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: feedbackQuestionCreateManyCategoryInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type questionsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput> | questionsCreateWithoutCategoryInput[] | questionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoryInput | questionsCreateOrConnectWithoutCategoryInput[]
    createMany?: questionsCreateManyCategoryInputEnvelope
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
  }

  export type feedbackQuestionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput> | feedbackQuestionCreateWithoutCategoryInput[] | feedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutCategoryInput | feedbackQuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput | feedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: feedbackQuestionCreateManyCategoryInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput | feedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutCategoryInput | feedbackQuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type questionsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput> | questionsCreateWithoutCategoryInput[] | questionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoryInput | questionsCreateOrConnectWithoutCategoryInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutCategoryInput | questionsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: questionsCreateManyCategoryInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutCategoryInput | questionsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutCategoryInput | questionsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput> | feedbackQuestionCreateWithoutCategoryInput[] | feedbackQuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutCategoryInput | feedbackQuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput | feedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: feedbackQuestionCreateManyCategoryInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput | feedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutCategoryInput | feedbackQuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type questionsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput> | questionsCreateWithoutCategoryInput[] | questionsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: questionsCreateOrConnectWithoutCategoryInput | questionsCreateOrConnectWithoutCategoryInput[]
    upsert?: questionsUpsertWithWhereUniqueWithoutCategoryInput | questionsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: questionsCreateManyCategoryInputEnvelope
    set?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    disconnect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    delete?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    connect?: questionsWhereUniqueInput | questionsWhereUniqueInput[]
    update?: questionsUpdateWithWhereUniqueWithoutCategoryInput | questionsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: questionsUpdateManyWithWhereWithoutCategoryInput | questionsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: questionsScalarWhereInput | questionsScalarWhereInput[]
  }

  export type categoriesCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutQuestionsInput
    connect?: categoriesWhereUniqueInput
  }

  export type feedbackQuestionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput> | feedbackQuestionCreateWithoutQuestionInput[] | feedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutQuestionInput | feedbackQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: feedbackQuestionCreateManyQuestionInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type feedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput> | feedbackQuestionCreateWithoutQuestionInput[] | feedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutQuestionInput | feedbackQuestionCreateOrConnectWithoutQuestionInput[]
    createMany?: feedbackQuestionCreateManyQuestionInputEnvelope
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
  }

  export type categoriesUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutQuestionsInput
    upsert?: categoriesUpsertWithoutQuestionsInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutQuestionsInput, categoriesUpdateWithoutQuestionsInput>, categoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type feedbackQuestionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput> | feedbackQuestionCreateWithoutQuestionInput[] | feedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutQuestionInput | feedbackQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput | feedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: feedbackQuestionCreateManyQuestionInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput | feedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutQuestionInput | feedbackQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput> | feedbackQuestionCreateWithoutQuestionInput[] | feedbackQuestionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: feedbackQuestionCreateOrConnectWithoutQuestionInput | feedbackQuestionCreateOrConnectWithoutQuestionInput[]
    upsert?: feedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput | feedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: feedbackQuestionCreateManyQuestionInputEnvelope
    set?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    disconnect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    delete?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    connect?: feedbackQuestionWhereUniqueInput | feedbackQuestionWhereUniqueInput[]
    update?: feedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput | feedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: feedbackQuestionUpdateManyWithWhereWithoutQuestionInput | feedbackQuestionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
  }

  export type serviceFeedbackCreateNestedManyWithoutOfficeVisitedInput = {
    create?: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | serviceFeedbackCreateWithoutOfficeVisitedInput[] | serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput | serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    createMany?: serviceFeedbackCreateManyOfficeVisitedInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type servicesCreateNestedManyWithoutOfficeInput = {
    create?: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput> | servicesCreateWithoutOfficeInput[] | servicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutOfficeInput | servicesCreateOrConnectWithoutOfficeInput[]
    createMany?: servicesCreateManyOfficeInputEnvelope
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutOfficeInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type serviceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput = {
    create?: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | serviceFeedbackCreateWithoutOfficeVisitedInput[] | serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput | serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    createMany?: serviceFeedbackCreateManyOfficeVisitedInputEnvelope
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
  }

  export type servicesUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput> | servicesCreateWithoutOfficeInput[] | servicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutOfficeInput | servicesCreateOrConnectWithoutOfficeInput[]
    createMany?: servicesCreateManyOfficeInputEnvelope
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutOfficeInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type serviceFeedbackUpdateManyWithoutOfficeVisitedNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | serviceFeedbackCreateWithoutOfficeVisitedInput[] | serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput | serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput | serviceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput[]
    createMany?: serviceFeedbackCreateManyOfficeVisitedInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput | serviceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput | serviceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type servicesUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput> | servicesCreateWithoutOfficeInput[] | servicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutOfficeInput | servicesCreateOrConnectWithoutOfficeInput[]
    upsert?: servicesUpsertWithWhereUniqueWithoutOfficeInput | servicesUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: servicesCreateManyOfficeInputEnvelope
    set?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    disconnect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    delete?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    update?: servicesUpdateWithWhereUniqueWithoutOfficeInput | servicesUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: servicesUpdateManyWithWhereWithoutOfficeInput | servicesUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: servicesScalarWhereInput | servicesScalarWhereInput[]
  }

  export type usersUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutOfficeInput | usersUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutOfficeInput | usersUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: usersUpdateManyWithWhereWithoutOfficeInput | usersUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput = {
    create?: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput> | serviceFeedbackCreateWithoutOfficeVisitedInput[] | serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput[]
    connectOrCreate?: serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput | serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput[]
    upsert?: serviceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput | serviceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput[]
    createMany?: serviceFeedbackCreateManyOfficeVisitedInputEnvelope
    set?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    disconnect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    delete?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    connect?: serviceFeedbackWhereUniqueInput | serviceFeedbackWhereUniqueInput[]
    update?: serviceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput | serviceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput[]
    updateMany?: serviceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput | serviceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput[]
    deleteMany?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
  }

  export type servicesUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput> | servicesCreateWithoutOfficeInput[] | servicesUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: servicesCreateOrConnectWithoutOfficeInput | servicesCreateOrConnectWithoutOfficeInput[]
    upsert?: servicesUpsertWithWhereUniqueWithoutOfficeInput | servicesUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: servicesCreateManyOfficeInputEnvelope
    set?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    disconnect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    delete?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    connect?: servicesWhereUniqueInput | servicesWhereUniqueInput[]
    update?: servicesUpdateWithWhereUniqueWithoutOfficeInput | servicesUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: servicesUpdateManyWithWhereWithoutOfficeInput | servicesUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: servicesScalarWhereInput | servicesScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutOfficeNestedInput = {
    create?: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput> | usersCreateWithoutOfficeInput[] | usersUncheckedCreateWithoutOfficeInput[]
    connectOrCreate?: usersCreateOrConnectWithoutOfficeInput | usersCreateOrConnectWithoutOfficeInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutOfficeInput | usersUpsertWithWhereUniqueWithoutOfficeInput[]
    createMany?: usersCreateManyOfficeInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutOfficeInput | usersUpdateWithWhereUniqueWithoutOfficeInput[]
    updateMany?: usersUpdateManyWithWhereWithoutOfficeInput | usersUpdateManyWithWhereWithoutOfficeInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type officesCreateWithoutUsersInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    Services?: servicesCreateNestedManyWithoutOfficeInput
  }

  export type officesUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    Services?: servicesUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type officesCreateOrConnectWithoutUsersInput = {
    where: officesWhereUniqueInput
    create: XOR<officesCreateWithoutUsersInput, officesUncheckedCreateWithoutUsersInput>
  }

  export type officesUpsertWithoutUsersInput = {
    update: XOR<officesUpdateWithoutUsersInput, officesUncheckedUpdateWithoutUsersInput>
    create: XOR<officesCreateWithoutUsersInput, officesUncheckedCreateWithoutUsersInput>
    where?: officesWhereInput
  }

  export type officesUpdateToOneWithWhereWithoutUsersInput = {
    where?: officesWhereInput
    data: XOR<officesUpdateWithoutUsersInput, officesUncheckedUpdateWithoutUsersInput>
  }

  export type officesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    Services?: servicesUpdateManyWithoutOfficeNestedInput
  }

  export type officesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    Services?: servicesUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type ageCreateWithoutSubmittersInput = {
    id?: number
    description: string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutAgeInput
  }

  export type ageUncheckedCreateWithoutSubmittersInput = {
    id?: number
    description: string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutAgeInput
  }

  export type ageCreateOrConnectWithoutSubmittersInput = {
    where: ageWhereUniqueInput
    create: XOR<ageCreateWithoutSubmittersInput, ageUncheckedCreateWithoutSubmittersInput>
  }

  export type clientTypeCreateWithoutSubmittersInput = {
    id?: number
    type: string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeUncheckedCreateWithoutSubmittersInput = {
    id?: number
    type: string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeCreateOrConnectWithoutSubmittersInput = {
    where: clientTypeWhereUniqueInput
    create: XOR<clientTypeCreateWithoutSubmittersInput, clientTypeUncheckedCreateWithoutSubmittersInput>
  }

  export type serviceFeedbackCreateWithoutSubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutSubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutSubmitterInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput>
  }

  export type serviceFeedbackCreateManySubmitterInputEnvelope = {
    data: serviceFeedbackCreateManySubmitterInput | serviceFeedbackCreateManySubmitterInput[]
    skipDuplicates?: boolean
  }

  export type logsCreateWithoutUserInput = {
    id?: number
    created_at?: Date | string
    serviceFeedback: serviceFeedbackCreateNestedOneWithoutLogsInput
  }

  export type logsUncheckedCreateWithoutUserInput = {
    id?: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type logsCreateOrConnectWithoutUserInput = {
    where: logsWhereUniqueInput
    create: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput>
  }

  export type logsCreateManyUserInputEnvelope = {
    data: logsCreateManyUserInput | logsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ageUpsertWithoutSubmittersInput = {
    update: XOR<ageUpdateWithoutSubmittersInput, ageUncheckedUpdateWithoutSubmittersInput>
    create: XOR<ageCreateWithoutSubmittersInput, ageUncheckedCreateWithoutSubmittersInput>
    where?: ageWhereInput
  }

  export type ageUpdateToOneWithWhereWithoutSubmittersInput = {
    where?: ageWhereInput
    data: XOR<ageUpdateWithoutSubmittersInput, ageUncheckedUpdateWithoutSubmittersInput>
  }

  export type ageUpdateWithoutSubmittersInput = {
    description?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutAgeNestedInput
  }

  export type ageUncheckedUpdateWithoutSubmittersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type clientTypeUpsertWithoutSubmittersInput = {
    update: XOR<clientTypeUpdateWithoutSubmittersInput, clientTypeUncheckedUpdateWithoutSubmittersInput>
    create: XOR<clientTypeCreateWithoutSubmittersInput, clientTypeUncheckedCreateWithoutSubmittersInput>
    where?: clientTypeWhereInput
  }

  export type clientTypeUpdateToOneWithWhereWithoutSubmittersInput = {
    where?: clientTypeWhereInput
    data: XOR<clientTypeUpdateWithoutSubmittersInput, clientTypeUncheckedUpdateWithoutSubmittersInput>
  }

  export type clientTypeUpdateWithoutSubmittersInput = {
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutClientTypeNestedInput
  }

  export type clientTypeUncheckedUpdateWithoutSubmittersInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutSubmitterInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutSubmitterInput, serviceFeedbackUncheckedUpdateWithoutSubmitterInput>
    create: XOR<serviceFeedbackCreateWithoutSubmitterInput, serviceFeedbackUncheckedCreateWithoutSubmitterInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutSubmitterInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutSubmitterInput, serviceFeedbackUncheckedUpdateWithoutSubmitterInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutSubmitterInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutSubmitterInput>
  }

  export type serviceFeedbackScalarWhereInput = {
    AND?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
    OR?: serviceFeedbackScalarWhereInput[]
    NOT?: serviceFeedbackScalarWhereInput | serviceFeedbackScalarWhereInput[]
    id?: IntFilter<"serviceFeedback"> | number
    startTime?: DateTimeNullableFilter<"serviceFeedback"> | Date | string | null
    submitterId?: IntFilter<"serviceFeedback"> | number
    submittername?: StringFilter<"serviceFeedback"> | string
    email?: StringNullableFilter<"serviceFeedback"> | string | null
    language?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceDesc?: StringNullableFilter<"serviceFeedback"> | string | null
    serviceId?: IntFilter<"serviceFeedback"> | number
    otherService?: StringNullableFilter<"serviceFeedback"> | string | null
    typeId?: IntNullableFilter<"serviceFeedback"> | number | null
    sex?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracketId?: IntNullableFilter<"serviceFeedback"> | number | null
    specificAge?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindId?: IntNullableFilter<"serviceFeedback"> | number | null
    serviceKindDescription?: StringNullableFilter<"serviceFeedback"> | string | null
    relatedClientType?: StringNullableFilter<"serviceFeedback"> | string | null
    ageBracket?: StringNullableFilter<"serviceFeedback"> | string | null
    officeId?: IntFilter<"serviceFeedback"> | number
    officeName?: StringNullableFilter<"serviceFeedback"> | string | null
    consent?: StringNullableFilter<"serviceFeedback"> | string | null
    awareCC?: StringNullableFilter<"serviceFeedback"> | string | null
    seeCC?: StringNullableFilter<"serviceFeedback"> | string | null
    useCC?: StringNullableFilter<"serviceFeedback"> | string | null
    overallComment?: StringNullableFilter<"serviceFeedback"> | string | null
    averageRating?: FloatFilter<"serviceFeedback"> | number
    responsiveness?: IntFilter<"serviceFeedback"> | number
    reliability?: IntFilter<"serviceFeedback"> | number
    accessAndFacilities?: IntFilter<"serviceFeedback"> | number
    communication?: IntFilter<"serviceFeedback"> | number
    costs?: IntFilter<"serviceFeedback"> | number
    integrity?: IntFilter<"serviceFeedback"> | number
    assurance?: IntFilter<"serviceFeedback"> | number
    outcome?: IntFilter<"serviceFeedback"> | number
    uniqueIdentifier?: StringFilter<"serviceFeedback"> | string
    created_at?: DateTimeFilter<"serviceFeedback"> | Date | string
    updated_at?: DateTimeFilter<"serviceFeedback"> | Date | string
  }

  export type logsUpsertWithWhereUniqueWithoutUserInput = {
    where: logsWhereUniqueInput
    update: XOR<logsUpdateWithoutUserInput, logsUncheckedUpdateWithoutUserInput>
    create: XOR<logsCreateWithoutUserInput, logsUncheckedCreateWithoutUserInput>
  }

  export type logsUpdateWithWhereUniqueWithoutUserInput = {
    where: logsWhereUniqueInput
    data: XOR<logsUpdateWithoutUserInput, logsUncheckedUpdateWithoutUserInput>
  }

  export type logsUpdateManyWithWhereWithoutUserInput = {
    where: logsScalarWhereInput
    data: XOR<logsUpdateManyMutationInput, logsUncheckedUpdateManyWithoutUserInput>
  }

  export type logsScalarWhereInput = {
    AND?: logsScalarWhereInput | logsScalarWhereInput[]
    OR?: logsScalarWhereInput[]
    NOT?: logsScalarWhereInput | logsScalarWhereInput[]
    id?: IntFilter<"logs"> | number
    userId?: IntFilter<"logs"> | number
    serviceFeedbackId?: IntFilter<"logs"> | number
    created_at?: DateTimeFilter<"logs"> | Date | string
  }

  export type submittersCreateWithoutAgeInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    clientType?: clientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: logsCreateNestedManyWithoutUserInput
  }

  export type submittersUncheckedCreateWithoutAgeInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type submittersCreateOrConnectWithoutAgeInput = {
    where: submittersWhereUniqueInput
    create: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput>
  }

  export type submittersCreateManyAgeInputEnvelope = {
    data: submittersCreateManyAgeInput | submittersCreateManyAgeInput[]
    skipDuplicates?: boolean
  }

  export type serviceFeedbackCreateWithoutAgeInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutAgeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutAgeInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput>
  }

  export type serviceFeedbackCreateManyAgeInputEnvelope = {
    data: serviceFeedbackCreateManyAgeInput | serviceFeedbackCreateManyAgeInput[]
    skipDuplicates?: boolean
  }

  export type submittersUpsertWithWhereUniqueWithoutAgeInput = {
    where: submittersWhereUniqueInput
    update: XOR<submittersUpdateWithoutAgeInput, submittersUncheckedUpdateWithoutAgeInput>
    create: XOR<submittersCreateWithoutAgeInput, submittersUncheckedCreateWithoutAgeInput>
  }

  export type submittersUpdateWithWhereUniqueWithoutAgeInput = {
    where: submittersWhereUniqueInput
    data: XOR<submittersUpdateWithoutAgeInput, submittersUncheckedUpdateWithoutAgeInput>
  }

  export type submittersUpdateManyWithWhereWithoutAgeInput = {
    where: submittersScalarWhereInput
    data: XOR<submittersUpdateManyMutationInput, submittersUncheckedUpdateManyWithoutAgeInput>
  }

  export type submittersScalarWhereInput = {
    AND?: submittersScalarWhereInput | submittersScalarWhereInput[]
    OR?: submittersScalarWhereInput[]
    NOT?: submittersScalarWhereInput | submittersScalarWhereInput[]
    id?: IntFilter<"submitters"> | number
    name?: StringNullableFilter<"submitters"> | string | null
    email?: StringFilter<"submitters"> | string
    ageId?: IntNullableFilter<"submitters"> | number | null
    ageBracket?: StringNullableFilter<"submitters"> | string | null
    specAge?: IntNullableFilter<"submitters"> | number | null
    clientTypeId?: IntNullableFilter<"submitters"> | number | null
    sex?: StringFilter<"submitters"> | string
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutAgeInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutAgeInput, serviceFeedbackUncheckedUpdateWithoutAgeInput>
    create: XOR<serviceFeedbackCreateWithoutAgeInput, serviceFeedbackUncheckedCreateWithoutAgeInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutAgeInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutAgeInput, serviceFeedbackUncheckedUpdateWithoutAgeInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutAgeInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutAgeInput>
  }

  export type submittersCreateWithoutServiceFeedbacksInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    age?: ageCreateNestedOneWithoutSubmittersInput
    clientType?: clientTypeCreateNestedOneWithoutSubmittersInput
    Logs?: logsCreateNestedManyWithoutUserInput
  }

  export type submittersUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type submittersCreateOrConnectWithoutServiceFeedbacksInput = {
    where: submittersWhereUniqueInput
    create: XOR<submittersCreateWithoutServiceFeedbacksInput, submittersUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type servicesCreateWithoutServiceFeedbacksInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: officesCreateNestedOneWithoutServicesInput
    serviceKind?: serviceKindCreateNestedOneWithoutServicesInput
  }

  export type servicesUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type servicesCreateOrConnectWithoutServiceFeedbacksInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutServiceFeedbacksInput, servicesUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type clientTypeCreateWithoutServiceFeedbackInput = {
    id?: number
    type: string
    Submitters?: submittersCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    type: string
    Submitters?: submittersUncheckedCreateNestedManyWithoutClientTypeInput
  }

  export type clientTypeCreateOrConnectWithoutServiceFeedbackInput = {
    where: clientTypeWhereUniqueInput
    create: XOR<clientTypeCreateWithoutServiceFeedbackInput, clientTypeUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type ageCreateWithoutServiceFeedbackInput = {
    id?: number
    description: string
    Submitters?: submittersCreateNestedManyWithoutAgeInput
  }

  export type ageUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    description: string
    Submitters?: submittersUncheckedCreateNestedManyWithoutAgeInput
  }

  export type ageCreateOrConnectWithoutServiceFeedbackInput = {
    where: ageWhereUniqueInput
    create: XOR<ageCreateWithoutServiceFeedbackInput, ageUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type serviceKindCreateWithoutServiceFeedbacksInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    Services?: servicesCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindUncheckedCreateWithoutServiceFeedbacksInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    Services?: servicesUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindCreateOrConnectWithoutServiceFeedbacksInput = {
    where: serviceKindWhereUniqueInput
    create: XOR<serviceKindCreateWithoutServiceFeedbacksInput, serviceKindUncheckedCreateWithoutServiceFeedbacksInput>
  }

  export type officesCreateWithoutServiceFeedbackInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    Services?: servicesCreateNestedManyWithoutOfficeInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type officesUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    Services?: servicesUncheckedCreateNestedManyWithoutOfficeInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type officesCreateOrConnectWithoutServiceFeedbackInput = {
    where: officesWhereUniqueInput
    create: XOR<officesCreateWithoutServiceFeedbackInput, officesUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionCreateWithoutServiceFeedbackInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: categoriesCreateNestedOneWithoutFeedbackQuestionInput
    question: questionsCreateNestedOneWithoutFeedbackQuestionInput
  }

  export type feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionCreateOrConnectWithoutServiceFeedbackInput = {
    where: feedbackQuestionWhereUniqueInput
    create: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionCreateManyServiceFeedbackInputEnvelope = {
    data: feedbackQuestionCreateManyServiceFeedbackInput | feedbackQuestionCreateManyServiceFeedbackInput[]
    skipDuplicates?: boolean
  }

  export type logsCreateWithoutServiceFeedbackInput = {
    id?: number
    created_at?: Date | string
    user: submittersCreateNestedOneWithoutLogsInput
  }

  export type logsUncheckedCreateWithoutServiceFeedbackInput = {
    id?: number
    userId: number
    created_at?: Date | string
  }

  export type logsCreateOrConnectWithoutServiceFeedbackInput = {
    where: logsWhereUniqueInput
    create: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type logsCreateManyServiceFeedbackInputEnvelope = {
    data: logsCreateManyServiceFeedbackInput | logsCreateManyServiceFeedbackInput[]
    skipDuplicates?: boolean
  }

  export type submittersUpsertWithoutServiceFeedbacksInput = {
    update: XOR<submittersUpdateWithoutServiceFeedbacksInput, submittersUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<submittersCreateWithoutServiceFeedbacksInput, submittersUncheckedCreateWithoutServiceFeedbacksInput>
    where?: submittersWhereInput
  }

  export type submittersUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: submittersWhereInput
    data: XOR<submittersUpdateWithoutServiceFeedbacksInput, submittersUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type submittersUpdateWithoutServiceFeedbacksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: ageUpdateOneWithoutSubmittersNestedInput
    clientType?: clientTypeUpdateOneWithoutSubmittersNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type servicesUpsertWithoutServiceFeedbacksInput = {
    update: XOR<servicesUpdateWithoutServiceFeedbacksInput, servicesUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<servicesCreateWithoutServiceFeedbacksInput, servicesUncheckedCreateWithoutServiceFeedbacksInput>
    where?: servicesWhereInput
  }

  export type servicesUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: servicesWhereInput
    data: XOR<servicesUpdateWithoutServiceFeedbacksInput, servicesUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type servicesUpdateWithoutServiceFeedbacksInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: officesUpdateOneWithoutServicesNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServicesNestedInput
  }

  export type servicesUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientTypeUpsertWithoutServiceFeedbackInput = {
    update: XOR<clientTypeUpdateWithoutServiceFeedbackInput, clientTypeUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<clientTypeCreateWithoutServiceFeedbackInput, clientTypeUncheckedCreateWithoutServiceFeedbackInput>
    where?: clientTypeWhereInput
  }

  export type clientTypeUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: clientTypeWhereInput
    data: XOR<clientTypeUpdateWithoutServiceFeedbackInput, clientTypeUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type clientTypeUpdateWithoutServiceFeedbackInput = {
    type?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUpdateManyWithoutClientTypeNestedInput
  }

  export type clientTypeUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUncheckedUpdateManyWithoutClientTypeNestedInput
  }

  export type ageUpsertWithoutServiceFeedbackInput = {
    update: XOR<ageUpdateWithoutServiceFeedbackInput, ageUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<ageCreateWithoutServiceFeedbackInput, ageUncheckedCreateWithoutServiceFeedbackInput>
    where?: ageWhereInput
  }

  export type ageUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: ageWhereInput
    data: XOR<ageUpdateWithoutServiceFeedbackInput, ageUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type ageUpdateWithoutServiceFeedbackInput = {
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUpdateManyWithoutAgeNestedInput
  }

  export type ageUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    Submitters?: submittersUncheckedUpdateManyWithoutAgeNestedInput
  }

  export type serviceKindUpsertWithoutServiceFeedbacksInput = {
    update: XOR<serviceKindUpdateWithoutServiceFeedbacksInput, serviceKindUncheckedUpdateWithoutServiceFeedbacksInput>
    create: XOR<serviceKindCreateWithoutServiceFeedbacksInput, serviceKindUncheckedCreateWithoutServiceFeedbacksInput>
    where?: serviceKindWhereInput
  }

  export type serviceKindUpdateToOneWithWhereWithoutServiceFeedbacksInput = {
    where?: serviceKindWhereInput
    data: XOR<serviceKindUpdateWithoutServiceFeedbacksInput, serviceKindUncheckedUpdateWithoutServiceFeedbacksInput>
  }

  export type serviceKindUpdateWithoutServiceFeedbacksInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: servicesUpdateManyWithoutServiceKindNestedInput
  }

  export type serviceKindUncheckedUpdateWithoutServiceFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: servicesUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type officesUpsertWithoutServiceFeedbackInput = {
    update: XOR<officesUpdateWithoutServiceFeedbackInput, officesUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<officesCreateWithoutServiceFeedbackInput, officesUncheckedCreateWithoutServiceFeedbackInput>
    where?: officesWhereInput
  }

  export type officesUpdateToOneWithWhereWithoutServiceFeedbackInput = {
    where?: officesWhereInput
    data: XOR<officesUpdateWithoutServiceFeedbackInput, officesUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type officesUpdateWithoutServiceFeedbackInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: servicesUpdateManyWithoutOfficeNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type officesUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Services?: servicesUncheckedUpdateManyWithoutOfficeNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type feedbackQuestionUpsertWithWhereUniqueWithoutServiceFeedbackInput = {
    where: feedbackQuestionWhereUniqueInput
    update: XOR<feedbackQuestionUpdateWithoutServiceFeedbackInput, feedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<feedbackQuestionCreateWithoutServiceFeedbackInput, feedbackQuestionUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionUpdateWithWhereUniqueWithoutServiceFeedbackInput = {
    where: feedbackQuestionWhereUniqueInput
    data: XOR<feedbackQuestionUpdateWithoutServiceFeedbackInput, feedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionUpdateManyWithWhereWithoutServiceFeedbackInput = {
    where: feedbackQuestionScalarWhereInput
    data: XOR<feedbackQuestionUpdateManyMutationInput, feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackInput>
  }

  export type feedbackQuestionScalarWhereInput = {
    AND?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
    OR?: feedbackQuestionScalarWhereInput[]
    NOT?: feedbackQuestionScalarWhereInput | feedbackQuestionScalarWhereInput[]
    id?: IntFilter<"feedbackQuestion"> | number
    categoryId?: IntFilter<"feedbackQuestion"> | number
    questionId?: IntFilter<"feedbackQuestion"> | number
    rating?: IntFilter<"feedbackQuestion"> | number
    serviceFeedbackId?: IntFilter<"feedbackQuestion"> | number
    created_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
    updated_at?: DateTimeFilter<"feedbackQuestion"> | Date | string
  }

  export type logsUpsertWithWhereUniqueWithoutServiceFeedbackInput = {
    where: logsWhereUniqueInput
    update: XOR<logsUpdateWithoutServiceFeedbackInput, logsUncheckedUpdateWithoutServiceFeedbackInput>
    create: XOR<logsCreateWithoutServiceFeedbackInput, logsUncheckedCreateWithoutServiceFeedbackInput>
  }

  export type logsUpdateWithWhereUniqueWithoutServiceFeedbackInput = {
    where: logsWhereUniqueInput
    data: XOR<logsUpdateWithoutServiceFeedbackInput, logsUncheckedUpdateWithoutServiceFeedbackInput>
  }

  export type logsUpdateManyWithWhereWithoutServiceFeedbackInput = {
    where: logsScalarWhereInput
    data: XOR<logsUpdateManyMutationInput, logsUncheckedUpdateManyWithoutServiceFeedbackInput>
  }

  export type serviceFeedbackCreateWithoutClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutClientTypeInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput>
  }

  export type serviceFeedbackCreateManyClientTypeInputEnvelope = {
    data: serviceFeedbackCreateManyClientTypeInput | serviceFeedbackCreateManyClientTypeInput[]
    skipDuplicates?: boolean
  }

  export type submittersCreateWithoutClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    age?: ageCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutSubmitterInput
    Logs?: logsCreateNestedManyWithoutUserInput
  }

  export type submittersUncheckedCreateWithoutClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
    Logs?: logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type submittersCreateOrConnectWithoutClientTypeInput = {
    where: submittersWhereUniqueInput
    create: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput>
  }

  export type submittersCreateManyClientTypeInputEnvelope = {
    data: submittersCreateManyClientTypeInput | submittersCreateManyClientTypeInput[]
    skipDuplicates?: boolean
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutClientTypeInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutClientTypeInput, serviceFeedbackUncheckedUpdateWithoutClientTypeInput>
    create: XOR<serviceFeedbackCreateWithoutClientTypeInput, serviceFeedbackUncheckedCreateWithoutClientTypeInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutClientTypeInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutClientTypeInput, serviceFeedbackUncheckedUpdateWithoutClientTypeInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutClientTypeInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutClientTypeInput>
  }

  export type submittersUpsertWithWhereUniqueWithoutClientTypeInput = {
    where: submittersWhereUniqueInput
    update: XOR<submittersUpdateWithoutClientTypeInput, submittersUncheckedUpdateWithoutClientTypeInput>
    create: XOR<submittersCreateWithoutClientTypeInput, submittersUncheckedCreateWithoutClientTypeInput>
  }

  export type submittersUpdateWithWhereUniqueWithoutClientTypeInput = {
    where: submittersWhereUniqueInput
    data: XOR<submittersUpdateWithoutClientTypeInput, submittersUncheckedUpdateWithoutClientTypeInput>
  }

  export type submittersUpdateManyWithWhereWithoutClientTypeInput = {
    where: submittersScalarWhereInput
    data: XOR<submittersUpdateManyMutationInput, submittersUncheckedUpdateManyWithoutClientTypeInput>
  }

  export type categoriesCreateWithoutFeedbackQuestionInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    Questions?: questionsCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateWithoutFeedbackQuestionInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    Questions?: questionsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesCreateOrConnectWithoutFeedbackQuestionInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutFeedbackQuestionInput, categoriesUncheckedCreateWithoutFeedbackQuestionInput>
  }

  export type questionsCreateWithoutFeedbackQuestionInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    category: categoriesCreateNestedOneWithoutQuestionsInput
  }

  export type questionsUncheckedCreateWithoutFeedbackQuestionInput = {
    id?: number
    title?: string | null
    description?: string | null
    categoryId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type questionsCreateOrConnectWithoutFeedbackQuestionInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutFeedbackQuestionInput, questionsUncheckedCreateWithoutFeedbackQuestionInput>
  }

  export type serviceFeedbackCreateWithoutFeedbackQuestionsInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutFeedbackQuestionsInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
  }

  export type categoriesUpsertWithoutFeedbackQuestionInput = {
    update: XOR<categoriesUpdateWithoutFeedbackQuestionInput, categoriesUncheckedUpdateWithoutFeedbackQuestionInput>
    create: XOR<categoriesCreateWithoutFeedbackQuestionInput, categoriesUncheckedCreateWithoutFeedbackQuestionInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutFeedbackQuestionInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutFeedbackQuestionInput, categoriesUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type categoriesUpdateWithoutFeedbackQuestionInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Questions?: questionsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesUncheckedUpdateWithoutFeedbackQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Questions?: questionsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type questionsUpsertWithoutFeedbackQuestionInput = {
    update: XOR<questionsUpdateWithoutFeedbackQuestionInput, questionsUncheckedUpdateWithoutFeedbackQuestionInput>
    create: XOR<questionsCreateWithoutFeedbackQuestionInput, questionsUncheckedCreateWithoutFeedbackQuestionInput>
    where?: questionsWhereInput
  }

  export type questionsUpdateToOneWithWhereWithoutFeedbackQuestionInput = {
    where?: questionsWhereInput
    data: XOR<questionsUpdateWithoutFeedbackQuestionInput, questionsUncheckedUpdateWithoutFeedbackQuestionInput>
  }

  export type questionsUpdateWithoutFeedbackQuestionInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoriesUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type questionsUncheckedUpdateWithoutFeedbackQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceFeedbackUpsertWithoutFeedbackQuestionsInput = {
    update: XOR<serviceFeedbackUpdateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
    create: XOR<serviceFeedbackCreateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedCreateWithoutFeedbackQuestionsInput>
    where?: serviceFeedbackWhereInput
  }

  export type serviceFeedbackUpdateToOneWithWhereWithoutFeedbackQuestionsInput = {
    where?: serviceFeedbackWhereInput
    data: XOR<serviceFeedbackUpdateWithoutFeedbackQuestionsInput, serviceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput>
  }

  export type serviceFeedbackUpdateWithoutFeedbackQuestionsInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutFeedbackQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type officesCreateWithoutServicesInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackCreateNestedManyWithoutOfficeVisitedInput
    users?: usersCreateNestedManyWithoutOfficeInput
  }

  export type officesUncheckedCreateWithoutServicesInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    ServiceFeedback?: serviceFeedbackUncheckedCreateNestedManyWithoutOfficeVisitedInput
    users?: usersUncheckedCreateNestedManyWithoutOfficeInput
  }

  export type officesCreateOrConnectWithoutServicesInput = {
    where: officesWhereUniqueInput
    create: XOR<officesCreateWithoutServicesInput, officesUncheckedCreateWithoutServicesInput>
  }

  export type serviceKindCreateWithoutServicesInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindUncheckedCreateWithoutServicesInput = {
    id?: number
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutServiceKindInput
  }

  export type serviceKindCreateOrConnectWithoutServicesInput = {
    where: serviceKindWhereUniqueInput
    create: XOR<serviceKindCreateWithoutServicesInput, serviceKindUncheckedCreateWithoutServicesInput>
  }

  export type serviceFeedbackCreateWithoutServiceInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutServiceInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutServiceInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput>
  }

  export type serviceFeedbackCreateManyServiceInputEnvelope = {
    data: serviceFeedbackCreateManyServiceInput | serviceFeedbackCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type officesUpsertWithoutServicesInput = {
    update: XOR<officesUpdateWithoutServicesInput, officesUncheckedUpdateWithoutServicesInput>
    create: XOR<officesCreateWithoutServicesInput, officesUncheckedCreateWithoutServicesInput>
    where?: officesWhereInput
  }

  export type officesUpdateToOneWithWhereWithoutServicesInput = {
    where?: officesWhereInput
    data: XOR<officesUpdateWithoutServicesInput, officesUncheckedUpdateWithoutServicesInput>
  }

  export type officesUpdateWithoutServicesInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUpdateManyWithoutOfficeVisitedNestedInput
    users?: usersUpdateManyWithoutOfficeNestedInput
  }

  export type officesUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    ServiceFeedback?: serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedNestedInput
    users?: usersUncheckedUpdateManyWithoutOfficeNestedInput
  }

  export type serviceKindUpsertWithoutServicesInput = {
    update: XOR<serviceKindUpdateWithoutServicesInput, serviceKindUncheckedUpdateWithoutServicesInput>
    create: XOR<serviceKindCreateWithoutServicesInput, serviceKindUncheckedCreateWithoutServicesInput>
    where?: serviceKindWhereInput
  }

  export type serviceKindUpdateToOneWithWhereWithoutServicesInput = {
    where?: serviceKindWhereInput
    data: XOR<serviceKindUpdateWithoutServicesInput, serviceKindUncheckedUpdateWithoutServicesInput>
  }

  export type serviceKindUpdateWithoutServicesInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutServiceKindNestedInput
  }

  export type serviceKindUncheckedUpdateWithoutServicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutServiceKindNestedInput
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutServiceInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutServiceInput, serviceFeedbackUncheckedUpdateWithoutServiceInput>
    create: XOR<serviceFeedbackCreateWithoutServiceInput, serviceFeedbackUncheckedCreateWithoutServiceInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutServiceInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutServiceInput, serviceFeedbackUncheckedUpdateWithoutServiceInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutServiceInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutServiceInput>
  }

  export type serviceFeedbackCreateWithoutServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutServiceKindInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput>
  }

  export type serviceFeedbackCreateManyServiceKindInputEnvelope = {
    data: serviceFeedbackCreateManyServiceKindInput | serviceFeedbackCreateManyServiceKindInput[]
    skipDuplicates?: boolean
  }

  export type servicesCreateWithoutServiceKindInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    office?: officesCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type servicesUncheckedCreateWithoutServiceKindInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type servicesCreateOrConnectWithoutServiceKindInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput>
  }

  export type servicesCreateManyServiceKindInputEnvelope = {
    data: servicesCreateManyServiceKindInput | servicesCreateManyServiceKindInput[]
    skipDuplicates?: boolean
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutServiceKindInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutServiceKindInput, serviceFeedbackUncheckedUpdateWithoutServiceKindInput>
    create: XOR<serviceFeedbackCreateWithoutServiceKindInput, serviceFeedbackUncheckedCreateWithoutServiceKindInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutServiceKindInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutServiceKindInput, serviceFeedbackUncheckedUpdateWithoutServiceKindInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutServiceKindInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutServiceKindInput>
  }

  export type servicesUpsertWithWhereUniqueWithoutServiceKindInput = {
    where: servicesWhereUniqueInput
    update: XOR<servicesUpdateWithoutServiceKindInput, servicesUncheckedUpdateWithoutServiceKindInput>
    create: XOR<servicesCreateWithoutServiceKindInput, servicesUncheckedCreateWithoutServiceKindInput>
  }

  export type servicesUpdateWithWhereUniqueWithoutServiceKindInput = {
    where: servicesWhereUniqueInput
    data: XOR<servicesUpdateWithoutServiceKindInput, servicesUncheckedUpdateWithoutServiceKindInput>
  }

  export type servicesUpdateManyWithWhereWithoutServiceKindInput = {
    where: servicesScalarWhereInput
    data: XOR<servicesUpdateManyMutationInput, servicesUncheckedUpdateManyWithoutServiceKindInput>
  }

  export type servicesScalarWhereInput = {
    AND?: servicesScalarWhereInput | servicesScalarWhereInput[]
    OR?: servicesScalarWhereInput[]
    NOT?: servicesScalarWhereInput | servicesScalarWhereInput[]
    id?: IntFilter<"services"> | number
    title?: StringFilter<"services"> | string
    relatedOfficeId?: IntNullableFilter<"services"> | number | null
    serviceKindId?: IntNullableFilter<"services"> | number | null
    created_at?: DateTimeFilter<"services"> | Date | string
    updated_at?: DateTimeFilter<"services"> | Date | string
  }

  export type submittersCreateWithoutLogsInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    sex: string
    age?: ageCreateNestedOneWithoutSubmittersInput
    clientType?: clientTypeCreateNestedOneWithoutSubmittersInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutSubmitterInput
  }

  export type submittersUncheckedCreateWithoutLogsInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutSubmitterInput
  }

  export type submittersCreateOrConnectWithoutLogsInput = {
    where: submittersWhereUniqueInput
    create: XOR<submittersCreateWithoutLogsInput, submittersUncheckedCreateWithoutLogsInput>
  }

  export type serviceFeedbackCreateWithoutLogsInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    officeVisited: officesCreateNestedOneWithoutServiceFeedbackInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutLogsInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutLogsInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutLogsInput, serviceFeedbackUncheckedCreateWithoutLogsInput>
  }

  export type submittersUpsertWithoutLogsInput = {
    update: XOR<submittersUpdateWithoutLogsInput, submittersUncheckedUpdateWithoutLogsInput>
    create: XOR<submittersCreateWithoutLogsInput, submittersUncheckedCreateWithoutLogsInput>
    where?: submittersWhereInput
  }

  export type submittersUpdateToOneWithWhereWithoutLogsInput = {
    where?: submittersWhereInput
    data: XOR<submittersUpdateWithoutLogsInput, submittersUncheckedUpdateWithoutLogsInput>
  }

  export type submittersUpdateWithoutLogsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: ageUpdateOneWithoutSubmittersNestedInput
    clientType?: clientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutSubmitterNestedInput
  }

  export type submittersUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
  }

  export type serviceFeedbackUpsertWithoutLogsInput = {
    update: XOR<serviceFeedbackUpdateWithoutLogsInput, serviceFeedbackUncheckedUpdateWithoutLogsInput>
    create: XOR<serviceFeedbackCreateWithoutLogsInput, serviceFeedbackUncheckedCreateWithoutLogsInput>
    where?: serviceFeedbackWhereInput
  }

  export type serviceFeedbackUpdateToOneWithWhereWithoutLogsInput = {
    where?: serviceFeedbackWhereInput
    data: XOR<serviceFeedbackUpdateWithoutLogsInput, serviceFeedbackUncheckedUpdateWithoutLogsInput>
  }

  export type serviceFeedbackUpdateWithoutLogsInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type feedbackQuestionCreateWithoutCategoryInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    question: questionsCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: serviceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type feedbackQuestionUncheckedCreateWithoutCategoryInput = {
    id?: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionCreateOrConnectWithoutCategoryInput = {
    where: feedbackQuestionWhereUniqueInput
    create: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput>
  }

  export type feedbackQuestionCreateManyCategoryInputEnvelope = {
    data: feedbackQuestionCreateManyCategoryInput | feedbackQuestionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type questionsCreateWithoutCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionCreateNestedManyWithoutQuestionInput
  }

  export type questionsUncheckedCreateWithoutCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type questionsCreateOrConnectWithoutCategoryInput = {
    where: questionsWhereUniqueInput
    create: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput>
  }

  export type questionsCreateManyCategoryInputEnvelope = {
    data: questionsCreateManyCategoryInput | questionsCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type feedbackQuestionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: feedbackQuestionWhereUniqueInput
    update: XOR<feedbackQuestionUpdateWithoutCategoryInput, feedbackQuestionUncheckedUpdateWithoutCategoryInput>
    create: XOR<feedbackQuestionCreateWithoutCategoryInput, feedbackQuestionUncheckedCreateWithoutCategoryInput>
  }

  export type feedbackQuestionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: feedbackQuestionWhereUniqueInput
    data: XOR<feedbackQuestionUpdateWithoutCategoryInput, feedbackQuestionUncheckedUpdateWithoutCategoryInput>
  }

  export type feedbackQuestionUpdateManyWithWhereWithoutCategoryInput = {
    where: feedbackQuestionScalarWhereInput
    data: XOR<feedbackQuestionUpdateManyMutationInput, feedbackQuestionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type questionsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: questionsWhereUniqueInput
    update: XOR<questionsUpdateWithoutCategoryInput, questionsUncheckedUpdateWithoutCategoryInput>
    create: XOR<questionsCreateWithoutCategoryInput, questionsUncheckedCreateWithoutCategoryInput>
  }

  export type questionsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: questionsWhereUniqueInput
    data: XOR<questionsUpdateWithoutCategoryInput, questionsUncheckedUpdateWithoutCategoryInput>
  }

  export type questionsUpdateManyWithWhereWithoutCategoryInput = {
    where: questionsScalarWhereInput
    data: XOR<questionsUpdateManyMutationInput, questionsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type questionsScalarWhereInput = {
    AND?: questionsScalarWhereInput | questionsScalarWhereInput[]
    OR?: questionsScalarWhereInput[]
    NOT?: questionsScalarWhereInput | questionsScalarWhereInput[]
    id?: IntFilter<"questions"> | number
    title?: StringNullableFilter<"questions"> | string | null
    description?: StringNullableFilter<"questions"> | string | null
    categoryId?: IntFilter<"questions"> | number
    created_at?: DateTimeFilter<"questions"> | Date | string
    updated_at?: DateTimeFilter<"questions"> | Date | string
  }

  export type categoriesCreateWithoutQuestionsInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateWithoutQuestionsInput = {
    id?: number
    title: string
    qualityDimension: string
    created_at?: Date | string
    updated_at?: Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesCreateOrConnectWithoutQuestionsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
  }

  export type feedbackQuestionCreateWithoutQuestionInput = {
    id?: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
    category: categoriesCreateNestedOneWithoutFeedbackQuestionInput
    serviceFeedback: serviceFeedbackCreateNestedOneWithoutFeedbackQuestionsInput
  }

  export type feedbackQuestionUncheckedCreateWithoutQuestionInput = {
    id?: number
    categoryId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionCreateOrConnectWithoutQuestionInput = {
    where: feedbackQuestionWhereUniqueInput
    create: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type feedbackQuestionCreateManyQuestionInputEnvelope = {
    data: feedbackQuestionCreateManyQuestionInput | feedbackQuestionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type categoriesUpsertWithoutQuestionsInput = {
    update: XOR<categoriesUpdateWithoutQuestionsInput, categoriesUncheckedUpdateWithoutQuestionsInput>
    create: XOR<categoriesCreateWithoutQuestionsInput, categoriesUncheckedCreateWithoutQuestionsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutQuestionsInput, categoriesUncheckedUpdateWithoutQuestionsInput>
  }

  export type categoriesUpdateWithoutQuestionsInput = {
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    qualityDimension?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type feedbackQuestionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: feedbackQuestionWhereUniqueInput
    update: XOR<feedbackQuestionUpdateWithoutQuestionInput, feedbackQuestionUncheckedUpdateWithoutQuestionInput>
    create: XOR<feedbackQuestionCreateWithoutQuestionInput, feedbackQuestionUncheckedCreateWithoutQuestionInput>
  }

  export type feedbackQuestionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: feedbackQuestionWhereUniqueInput
    data: XOR<feedbackQuestionUpdateWithoutQuestionInput, feedbackQuestionUncheckedUpdateWithoutQuestionInput>
  }

  export type feedbackQuestionUpdateManyWithWhereWithoutQuestionInput = {
    where: feedbackQuestionScalarWhereInput
    data: XOR<feedbackQuestionUpdateManyMutationInput, feedbackQuestionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type serviceFeedbackCreateWithoutOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    sex?: string | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    submitter: submittersCreateNestedOneWithoutServiceFeedbacksInput
    service?: servicesCreateNestedOneWithoutServiceFeedbacksInput
    ClientType?: clientTypeCreateNestedOneWithoutServiceFeedbackInput
    Age?: ageCreateNestedOneWithoutServiceFeedbackInput
    serviceKind?: serviceKindCreateNestedOneWithoutServiceFeedbacksInput
    feedbackQuestions?: feedbackQuestionCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
    feedbackQuestions?: feedbackQuestionUncheckedCreateNestedManyWithoutServiceFeedbackInput
    logs?: logsUncheckedCreateNestedManyWithoutServiceFeedbackInput
  }

  export type serviceFeedbackCreateOrConnectWithoutOfficeVisitedInput = {
    where: serviceFeedbackWhereUniqueInput
    create: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput>
  }

  export type serviceFeedbackCreateManyOfficeVisitedInputEnvelope = {
    data: serviceFeedbackCreateManyOfficeVisitedInput | serviceFeedbackCreateManyOfficeVisitedInput[]
    skipDuplicates?: boolean
  }

  export type servicesCreateWithoutOfficeInput = {
    id?: number
    title: string
    created_at?: Date | string
    updated_at?: Date | string
    serviceKind?: serviceKindCreateNestedOneWithoutServicesInput
    serviceFeedbacks?: serviceFeedbackCreateNestedManyWithoutServiceInput
  }

  export type servicesUncheckedCreateWithoutOfficeInput = {
    id?: number
    title: string
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedCreateNestedManyWithoutServiceInput
  }

  export type servicesCreateOrConnectWithoutOfficeInput = {
    where: servicesWhereUniqueInput
    create: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput>
  }

  export type servicesCreateManyOfficeInputEnvelope = {
    data: servicesCreateManyOfficeInput | servicesCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutOfficeInput = {
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type usersUncheckedCreateWithoutOfficeInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type usersCreateOrConnectWithoutOfficeInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput>
  }

  export type usersCreateManyOfficeInputEnvelope = {
    data: usersCreateManyOfficeInput | usersCreateManyOfficeInput[]
    skipDuplicates?: boolean
  }

  export type serviceFeedbackUpsertWithWhereUniqueWithoutOfficeVisitedInput = {
    where: serviceFeedbackWhereUniqueInput
    update: XOR<serviceFeedbackUpdateWithoutOfficeVisitedInput, serviceFeedbackUncheckedUpdateWithoutOfficeVisitedInput>
    create: XOR<serviceFeedbackCreateWithoutOfficeVisitedInput, serviceFeedbackUncheckedCreateWithoutOfficeVisitedInput>
  }

  export type serviceFeedbackUpdateWithWhereUniqueWithoutOfficeVisitedInput = {
    where: serviceFeedbackWhereUniqueInput
    data: XOR<serviceFeedbackUpdateWithoutOfficeVisitedInput, serviceFeedbackUncheckedUpdateWithoutOfficeVisitedInput>
  }

  export type serviceFeedbackUpdateManyWithWhereWithoutOfficeVisitedInput = {
    where: serviceFeedbackScalarWhereInput
    data: XOR<serviceFeedbackUpdateManyMutationInput, serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedInput>
  }

  export type servicesUpsertWithWhereUniqueWithoutOfficeInput = {
    where: servicesWhereUniqueInput
    update: XOR<servicesUpdateWithoutOfficeInput, servicesUncheckedUpdateWithoutOfficeInput>
    create: XOR<servicesCreateWithoutOfficeInput, servicesUncheckedCreateWithoutOfficeInput>
  }

  export type servicesUpdateWithWhereUniqueWithoutOfficeInput = {
    where: servicesWhereUniqueInput
    data: XOR<servicesUpdateWithoutOfficeInput, servicesUncheckedUpdateWithoutOfficeInput>
  }

  export type servicesUpdateManyWithWhereWithoutOfficeInput = {
    where: servicesScalarWhereInput
    data: XOR<servicesUpdateManyMutationInput, servicesUncheckedUpdateManyWithoutOfficeInput>
  }

  export type usersUpsertWithWhereUniqueWithoutOfficeInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutOfficeInput, usersUncheckedUpdateWithoutOfficeInput>
    create: XOR<usersCreateWithoutOfficeInput, usersUncheckedCreateWithoutOfficeInput>
  }

  export type usersUpdateWithWhereUniqueWithoutOfficeInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutOfficeInput, usersUncheckedUpdateWithoutOfficeInput>
  }

  export type usersUpdateManyWithWhereWithoutOfficeInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutOfficeInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    uid?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    officeName?: StringNullableFilter<"users"> | string | null
    officeId?: IntNullableFilter<"users"> | number | null
  }

  export type serviceFeedbackCreateManySubmitterInput = {
    id?: number
    startTime?: Date | string | null
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type logsCreateManyUserInput = {
    id?: number
    serviceFeedbackId: number
    created_at?: Date | string
  }

  export type serviceFeedbackUpdateWithoutSubmitterInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutSubmitterInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedback?: serviceFeedbackUpdateOneRequiredWithoutLogsNestedInput
  }

  export type logsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type submittersCreateManyAgeInput = {
    id?: number
    name?: string | null
    email: string
    ageBracket?: string | null
    specAge?: number | null
    clientTypeId?: number | null
    sex: string
  }

  export type serviceFeedbackCreateManyAgeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type submittersUpdateWithoutAgeInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    clientType?: clientTypeUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateManyWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    clientTypeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type serviceFeedbackUpdateWithoutAgeInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutAgeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionCreateManyServiceFeedbackInput = {
    id?: number
    categoryId: number
    questionId: number
    rating: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type logsCreateManyServiceFeedbackInput = {
    id?: number
    userId: number
    created_at?: Date | string
  }

  export type feedbackQuestionUpdateWithoutServiceFeedbackInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    question?: questionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
  }

  export type feedbackQuestionUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUpdateWithoutServiceFeedbackInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: submittersUpdateOneRequiredWithoutLogsNestedInput
  }

  export type logsUncheckedUpdateWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type logsUncheckedUpdateManyWithoutServiceFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceFeedbackCreateManyClientTypeInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type submittersCreateManyClientTypeInput = {
    id?: number
    name?: string | null
    email: string
    ageId?: number | null
    ageBracket?: string | null
    specAge?: number | null
    sex: string
  }

  export type serviceFeedbackUpdateWithoutClientTypeInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type submittersUpdateWithoutClientTypeInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    age?: ageUpdateOneWithoutSubmittersNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutSubmitterNestedInput
    Logs?: logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type submittersUncheckedUpdateManyWithoutClientTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    ageId?: NullableIntFieldUpdateOperationsInput | number | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    specAge?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: StringFieldUpdateOperationsInput | string
  }

  export type serviceFeedbackCreateManyServiceInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type serviceFeedbackUpdateWithoutServiceInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutServiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceFeedbackCreateManyServiceKindInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeId: number
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type servicesCreateManyServiceKindInput = {
    id?: number
    title: string
    relatedOfficeId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type serviceFeedbackUpdateWithoutServiceKindInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    officeVisited?: officesUpdateOneRequiredWithoutServiceFeedbackNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeId?: IntFieldUpdateOperationsInput | number
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type servicesUpdateWithoutServiceKindInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    office?: officesUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type servicesUncheckedUpdateWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type servicesUncheckedUpdateManyWithoutServiceKindInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    relatedOfficeId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionCreateManyCategoryInput = {
    id?: number
    questionId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type questionsCreateManyCategoryInput = {
    id?: number
    title?: string | null
    description?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionUpdateWithoutCategoryInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: questionsUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: serviceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type feedbackQuestionUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    questionId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type questionsUpdateWithoutCategoryInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    FeedbackQuestion?: feedbackQuestionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type questionsUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionCreateManyQuestionInput = {
    id?: number
    categoryId: number
    rating: number
    serviceFeedbackId: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type feedbackQuestionUpdateWithoutQuestionInput = {
    rating?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoriesUpdateOneRequiredWithoutFeedbackQuestionNestedInput
    serviceFeedback?: serviceFeedbackUpdateOneRequiredWithoutFeedbackQuestionsNestedInput
  }

  export type feedbackQuestionUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type feedbackQuestionUncheckedUpdateManyWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    rating?: IntFieldUpdateOperationsInput | number
    serviceFeedbackId?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceFeedbackCreateManyOfficeVisitedInput = {
    id?: number
    startTime?: Date | string | null
    submitterId: number
    submittername: string
    email?: string | null
    language?: string | null
    serviceDesc?: string | null
    serviceId: number
    otherService?: string | null
    typeId?: number | null
    sex?: string | null
    ageBracketId?: number | null
    specificAge?: number | null
    serviceKindId?: number | null
    serviceKindDescription?: string | null
    relatedClientType?: string | null
    ageBracket?: string | null
    officeName?: string | null
    consent?: string | null
    awareCC?: string | null
    seeCC?: string | null
    useCC?: string | null
    overallComment?: string | null
    averageRating: number
    responsiveness: number
    reliability: number
    accessAndFacilities: number
    communication: number
    costs: number
    integrity: number
    assurance: number
    outcome: number
    uniqueIdentifier: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type servicesCreateManyOfficeInput = {
    id?: number
    title: string
    serviceKindId?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersCreateManyOfficeInput = {
    uid?: number
    username: string
    password: string
    role: string
    officeName?: string | null
  }

  export type serviceFeedbackUpdateWithoutOfficeVisitedInput = {
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    submitter?: submittersUpdateOneRequiredWithoutServiceFeedbacksNestedInput
    service?: servicesUpdateOneWithoutServiceFeedbacksNestedInput
    ClientType?: clientTypeUpdateOneWithoutServiceFeedbackNestedInput
    Age?: ageUpdateOneWithoutServiceFeedbackNestedInput
    serviceKind?: serviceKindUpdateOneWithoutServiceFeedbacksNestedInput
    feedbackQuestions?: feedbackQuestionUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateWithoutOfficeVisitedInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbackQuestions?: feedbackQuestionUncheckedUpdateManyWithoutServiceFeedbackNestedInput
    logs?: logsUncheckedUpdateManyWithoutServiceFeedbackNestedInput
  }

  export type serviceFeedbackUncheckedUpdateManyWithoutOfficeVisitedInput = {
    id?: IntFieldUpdateOperationsInput | number
    startTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submitterId?: IntFieldUpdateOperationsInput | number
    submittername?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    serviceDesc?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: IntFieldUpdateOperationsInput | number
    otherService?: NullableStringFieldUpdateOperationsInput | string | null
    typeId?: NullableIntFieldUpdateOperationsInput | number | null
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracketId?: NullableIntFieldUpdateOperationsInput | number | null
    specificAge?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    serviceKindDescription?: NullableStringFieldUpdateOperationsInput | string | null
    relatedClientType?: NullableStringFieldUpdateOperationsInput | string | null
    ageBracket?: NullableStringFieldUpdateOperationsInput | string | null
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
    consent?: NullableStringFieldUpdateOperationsInput | string | null
    awareCC?: NullableStringFieldUpdateOperationsInput | string | null
    seeCC?: NullableStringFieldUpdateOperationsInput | string | null
    useCC?: NullableStringFieldUpdateOperationsInput | string | null
    overallComment?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    responsiveness?: IntFieldUpdateOperationsInput | number
    reliability?: IntFieldUpdateOperationsInput | number
    accessAndFacilities?: IntFieldUpdateOperationsInput | number
    communication?: IntFieldUpdateOperationsInput | number
    costs?: IntFieldUpdateOperationsInput | number
    integrity?: IntFieldUpdateOperationsInput | number
    assurance?: IntFieldUpdateOperationsInput | number
    outcome?: IntFieldUpdateOperationsInput | number
    uniqueIdentifier?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type servicesUpdateWithoutOfficeInput = {
    title?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceKind?: serviceKindUpdateOneWithoutServicesNestedInput
    serviceFeedbacks?: serviceFeedbackUpdateManyWithoutServiceNestedInput
  }

  export type servicesUncheckedUpdateWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    serviceFeedbacks?: serviceFeedbackUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type servicesUncheckedUpdateManyWithoutOfficeInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    serviceKindId?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUpdateWithoutOfficeInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateWithoutOfficeInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyWithoutOfficeInput = {
    uid?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    officeName?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SubmittersCountOutputTypeDefaultArgs instead
     */
    export type SubmittersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmittersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AgeCountOutputTypeDefaultArgs instead
     */
    export type AgeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AgeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceFeedbackCountOutputTypeDefaultArgs instead
     */
    export type ServiceFeedbackCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceFeedbackCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClientTypeCountOutputTypeDefaultArgs instead
     */
    export type ClientTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClientTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicesCountOutputTypeDefaultArgs instead
     */
    export type ServicesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServicesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServiceKindCountOutputTypeDefaultArgs instead
     */
    export type ServiceKindCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ServiceKindCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionsCountOutputTypeDefaultArgs instead
     */
    export type QuestionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OfficesCountOutputTypeDefaultArgs instead
     */
    export type OfficesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OfficesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use submittersDefaultArgs instead
     */
    export type submittersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = submittersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ageDefaultArgs instead
     */
    export type ageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use serviceFeedbackDefaultArgs instead
     */
    export type serviceFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = serviceFeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use clientTypeDefaultArgs instead
     */
    export type clientTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = clientTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use feedbackQuestionDefaultArgs instead
     */
    export type feedbackQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = feedbackQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use servicesDefaultArgs instead
     */
    export type servicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = servicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use serviceKindDefaultArgs instead
     */
    export type serviceKindArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = serviceKindDefaultArgs<ExtArgs>
    /**
     * @deprecated Use logsDefaultArgs instead
     */
    export type logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = logsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use questionsDefaultArgs instead
     */
    export type questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = questionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use officesDefaultArgs instead
     */
    export type officesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = officesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}