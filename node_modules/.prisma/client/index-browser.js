
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.1
 * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
 */
Prisma.prismaVersion = {
  client: "5.7.1",
  engine: "e9771e62de70f79a5e1c604a2d7c8e2a0a874b48"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  uid: 'uid',
  username: 'username',
  password: 'password',
  role: 'role',
  officeName: 'officeName',
  officeId: 'officeId'
};

exports.Prisma.SubmittersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  ageId: 'ageId',
  specAge: 'specAge',
  clientTypeId: 'clientTypeId',
  sex: 'sex'
};

exports.Prisma.AgeScalarFieldEnum = {
  id: 'id',
  description: 'description'
};

exports.Prisma.ServiceFeedbackScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  submitterId: 'submitterId',
  submittername: 'submittername',
  email: 'email',
  language: 'language',
  serviceDesc: 'serviceDesc',
  serviceId: 'serviceId',
  otherService: 'otherService',
  typeId: 'typeId',
  ageBracketId: 'ageBracketId',
  specificAge: 'specificAge',
  serviceKindId: 'serviceKindId',
  serviceKindDescription: 'serviceKindDescription',
  relatedClientType: 'relatedClientType',
  ageBracket: 'ageBracket',
  officeId: 'officeId',
  officeName: 'officeName',
  consent: 'consent',
  awareCC: 'awareCC',
  seeCC: 'seeCC',
  useCC: 'useCC',
  overallComment: 'overallComment',
  averageRating: 'averageRating',
  responsiveness: 'responsiveness',
  reliability: 'reliability',
  accessAndFacilities: 'accessAndFacilities',
  communication: 'communication',
  costs: 'costs',
  integrity: 'integrity',
  assurance: 'assurance',
  outcome: 'outcome',
  uniqueIdentifier: 'uniqueIdentifier',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ClientTypeScalarFieldEnum = {
  id: 'id',
  type: 'type'
};

exports.Prisma.FeedbackQuestionScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  questionId: 'questionId',
  rating: 'rating',
  serviceFeedbackId: 'serviceFeedbackId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  relatedOfficeId: 'relatedOfficeId',
  serviceKindId: 'serviceKindId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ServiceKindScalarFieldEnum = {
  id: 'id',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LogsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  serviceFeedbackId: 'serviceFeedbackId',
  created_at: 'created_at'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  qualityDimension: 'qualityDimension',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.QuestionsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  categoryId: 'categoryId',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OfficesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  users: 'users',
  submitters: 'submitters',
  age: 'age',
  serviceFeedback: 'serviceFeedback',
  clientType: 'clientType',
  feedbackQuestion: 'feedbackQuestion',
  services: 'services',
  serviceKind: 'serviceKind',
  logs: 'logs',
  categories: 'categories',
  questions: 'questions',
  offices: 'offices'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
